(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (integer_literal) (])) ([) (integer_literal) (])) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (token_tree (() (boolean_literal (false)) (,) (boolean_literal (false)) ())) (;) (identifier) (])) (;) (identifier) (]))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (integer_literal) (])) ([) (integer_literal) (])) (=) (tuple_expression (() (boolean_literal (true)) (,) (boolean_literal (true)) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (assignment_expression (field_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (.) (integer_literal)) (=) (binary_expression (field_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) (||) (field_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (assignment_expression (field_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (.) (integer_literal)) (=) (binary_expression (field_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (])) (.) (integer_literal)) (||) (field_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (])) (.) (integer_literal)))) (;)) (})))) (})))) (})))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (-) (integer_literal)) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (!=) (integer_literal)) (||) (binary_expression (identifier) (!=) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (as) (primitive_type) (,) (identifier) (as) (primitive_type) (]))) ()))) (;)) (expression_statement (if_expression (if) (field_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (.) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (integer_literal))) (;)) (})) (else_clause (else) (if_expression (if) (field_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (.) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (}))))))) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (]))) ()))) (;)) (expression_statement (return_expression (return) (identifier)) (;)) (}))) (}))))