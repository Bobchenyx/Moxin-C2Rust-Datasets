(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<=) (integer_literal)) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (integer_literal) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (type_cast_expression (identifier) (as) (primitive_type)) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (parenthesized_expression (() (type_cast_expression (identifier) (as) (primitive_type)) ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (index_expression (identifier) ([) (identifier) (])) ()))) (;)) (})))) (expression_statement (return_expression (return) (identifier)) (;)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (identifier)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (<) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) (,) (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) ()))) (;)) (}))))) (}))) (}))))