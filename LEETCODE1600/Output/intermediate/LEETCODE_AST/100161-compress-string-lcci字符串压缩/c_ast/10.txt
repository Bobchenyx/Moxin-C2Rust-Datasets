(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (number_literal)) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (number_literal)) ()))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (identifier)) (,) (string_literal (") (string_content) (")) (,) (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (<) (identifier)) (?) (identifier) (:) (identifier)) (;)) (}))))