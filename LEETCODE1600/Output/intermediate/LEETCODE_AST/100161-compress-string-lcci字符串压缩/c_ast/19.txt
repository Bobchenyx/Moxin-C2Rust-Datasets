(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (number_literal)) ())) (/) (number_literal))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (number_literal)) ())) (/) (number_literal))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (number_literal)) ())) (/) (number_literal))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (binary_expression (identifier) (%) (number_literal))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (+) (char_literal (') (character) (')))) (;)) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (number_literal) (-) (identifier))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (pointer_expression (*) (identifier))) ())) (>=) (identifier)) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (+) (char_literal (') (character) (')))) (;)) (}))) (})))) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (escape_sequence) ('))) ())) (return_statement (return) (identifier) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (identifier)) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (identifier)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (binary_expression (identifier) (+) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (identifier)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) (,) (identifier) (,) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) ()))) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (}))) (})))) (}))) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (return_statement (return) (identifier) (;)) (}))))