(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (string_literal (") (string_content) ("))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (null (NULL)) (}))) (;)) (do_statement (do) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (binary_expression (identifier) (%) (number_literal)) (]))) (;)) (expression_statement (assignment_expression (identifier) (/=) (number_literal)) (;)) (})) (while) (parenthesized_expression (() (identifier) ())) (;)) (for_statement (for) (() (update_expression (--) (identifier)) (;) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (--) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (+=) (number_literal)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (escape_sequence) ('))) ())) (return_statement (return) (identifier) (;))) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (assignment_expression (identifier) (=) (identifier))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (pointer_expression (*) (identifier))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (pointer_expression (*) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})))) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (pointer_expression (*) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (identifier) (,) (identifier) ()))) (;)) (return_statement (return) (conditional_expression (binary_expression (identifier) (<=) (identifier)) (?) (identifier) (:) (identifier)) (;)) (}))))