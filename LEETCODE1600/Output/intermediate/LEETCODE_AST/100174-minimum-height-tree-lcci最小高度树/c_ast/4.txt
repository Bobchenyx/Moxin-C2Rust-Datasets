(translation_unit (comment) (comment) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (/) (number_literal))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (struct_specifier (struct) (type_identifier)) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) (*) (number_literal)) ()))))) (;)) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (=) (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (=) (null (NULL)))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (field_expression (identifier) (->) (field_identifier)) ()))) (;)) (}))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (number_literal)) (!=) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (struct_specifier (struct) (type_identifier)) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) (*) (number_literal)) ()))))) (;)) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (=) (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (=) (null (NULL)))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (+) (number_literal)) (,) (identifier) (,) (field_expression (identifier) (->) (field_identifier)) ()))) (;)) (}))) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())))) (;)) (}))) (function_definition (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (comment) (declaration (struct_specifier (struct) (type_identifier)) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (struct_specifier (struct) (type_identifier)) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) (*) (number_literal)) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (null (NULL)))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (identifier) (,) (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))