(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (comment) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (comment) (field_declaration (sized_type_specifier (unsigned) (long) (long)) (field_identifier) (;)) (field_declaration (sized_type_specifier (unsigned) (long) (long)) (field_identifier) (;)) (field_declaration (sized_type_specifier (unsigned) (long) (long)) (field_identifier) (;)) (field_declaration (sized_type_specifier (unsigned) (long) (long)) (field_identifier) (;)) (}))) (type_identifier) (;)) (comment) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_qualifier (const)) (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_qualifier (const)) (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier))) (+) (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier)))) ())) (%) (identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier))) (+) (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier)))) ())) (%) (identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier))) (+) (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier)))) ())) (%) (identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier))) (+) (binary_expression (field_expression (identifier) (->) (field_identifier)) (*) (field_expression (identifier) (->) (field_identifier)))) ())) (%) (identifier))) (;)) (return_statement (return) (identifier) (;)) (}))) (comment) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (sized_type_specifier (unsigned) (long) (long)) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (number_literal)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (%) (number_literal)) (==) (number_literal)) ())) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (/) (number_literal)) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ())))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (%) (number_literal)) (==) (number_literal)) ())) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (number_literal)) ())) (/) (number_literal)) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ())))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ())))) (;)) (}))))))) (return_statement (return) (identifier) (;)) (}))) (function_definition (sized_type_specifier (long)) (function_declarator (identifier) (parameter_list (() (parameter_declaration (sized_type_specifier (long) (long)) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (expression_statement (update_expression (identifier) (--)) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (return_statement (return) (field_expression (identifier) (.) (field_identifier)) (;)) (}))))