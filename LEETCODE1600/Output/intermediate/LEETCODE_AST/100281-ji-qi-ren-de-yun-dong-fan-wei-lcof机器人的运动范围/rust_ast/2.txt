(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (as) (primitive_type) (])) (;) (identifier) (as) (primitive_type) (]))) ())) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (integer_literal) (,) (integer_literal) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (primitive_type))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) ())) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ())))) (block ({) (return_expression (return)) (})))) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (token_tree (() (identifier) (,) (identifier) (-) (integer_literal) ())) (,) (token_tree (() (identifier) (,) (identifier) (+) (integer_literal) ())) (,) (token_tree (() (identifier) (+) (integer_literal) (,) (identifier) ())) (,) (token_tree (() (identifier) (-) (integer_literal) (,) (identifier) ())) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (==) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (unary_expression (*) (identifier)) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (return_expression (return)) (;)) (}))))) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (field_expression (identifier) (.) (integer_literal)) (,) (field_expression (identifier) (.) (integer_literal)) (,) (identifier) (,) (identifier) ()))) (;)) (})))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (integer_literal)) (||) (binary_expression (identifier) (<) (integer_literal))) (||) (binary_expression (identifier) (>=) (identifier))) (||) (binary_expression (identifier) (>=) (identifier))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (+) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ())))) (>) (identifier)) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (boolean_literal (true)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (%) (integer_literal))) (;)) (expression_statement (compound_assignment_expr (identifier) (/=) (integer_literal)) (;)) (})))) (identifier) (}))) (}))))