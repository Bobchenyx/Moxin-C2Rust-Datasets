(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (labeled_statement (statement_identifier) (:) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (<) (binary_expression (identifier) (>>) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (identifier)) ()))))) (;))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (ERROR (return)) (compound_statement ({) (}))) (expression_statement (;)) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (<) (binary_expression (identifier) (>>) (identifier))) (;)) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (>) (identifier)) (;)) (expression_statement (comma_expression (binary_expression (binary_expression (identifier) (<) (identifier)) (<) (identifier)) (ERROR (*)) (,) (binary_expression (identifier) (>>) (identifier))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (compound_statement ({) (ERROR (comma_expression (identifier) (,) (number_literal))) (})) ()))) (;)) (while_statement (while) (parenthesized_expression (() (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) ())) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (update_expression (identifier) (--)) (>) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (.) (field_identifier))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (;)) (if_statement (if) (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ())) (compound_statement ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (compound_statement ({) (expression_statement (comma_expression (field_expression (identifier) (->) (field_identifier)) (,) (binary_expression (identifier) (+) (number_literal))) (;)) (})) ()))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ())) (compound_statement ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (compound_statement ({) (expression_statement (comma_expression (field_expression (identifier) (->) (field_identifier)) (,) (binary_expression (identifier) (+) (number_literal))) (;)) (})) ()))) (;)) (}))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ()))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (%) (number_literal)) (==) (number_literal)) ())) (expression_statement (call_expression (identifier) (argument_list (() (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) ()))) (;))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;)) (}))) (return_statement (return) (identifier) (;)) (})) (}))) (expression_statement (;)))