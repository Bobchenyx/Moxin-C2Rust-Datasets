(source_file (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (||) (binary_expression (identifier) (==) (integer_literal))) (block ({) (identifier) (})) (else_clause (else) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (identifier) (}))))) (}))) (line_comment (//)) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (integer_literal) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (integer_literal) (})) (else_clause (else) (block ({) (binary_expression (call_expression (identifier) (arguments (() (binary_expression (identifier) (-) (integer_literal)) ()))) (+) (call_expression (identifier) (arguments (() (binary_expression (identifier) (-) (integer_literal)) ())))) (}))))))) (}))))