(translation_unit (comment) (ERROR (binary_expression (pointer_expression (*) (pointer_expression (*) (identifier))) (ERROR (ERROR) (identifier) (ERROR) (identifier)) (*) (ERROR (pointer_expression (*) (identifier))) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (identifier)) (,) (binary_expression (identifier) (*) (identifier)) ()))))) (compound_statement ({) (return_statement (return) (binary_expression (pointer_expression (*) (identifier)) (-) (pointer_expression (*) (identifier))) (;)) (})) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (pointer_expression (*) (identifier)) ()))) ()))))) (;)) (declaration (primitive_type) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (*) (parenthesized_expression (() (identifier) ()))) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (,) (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))) (expression_statement (pointer_expression (*) (pointer_expression (*) (identifier))) (ERROR (ERROR) (identifier) (ERROR)) (;)) (function_definition (type_identifier) (ERROR (ERROR) (identifier)) (pointer_declarator (*) (pointer_declarator (*) (ERROR (identifier)) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<) (number_literal))) ())) (comment) (expression_statement (update_expression (identifier) (++)) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (pointer_expression (*) (identifier)) ()))) ()))))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (identifier) (>=) (number_literal))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (subscript_expression (identifier) ([) (identifier) (]))) (>=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (subscript_expression (identifier) ([) (identifier) (])))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})))) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))