(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (break_statement (break) (;))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (break_statement (break) (;))) (}))) (comment) (expression_statement (comma_expression (assignment_expression (identifier) (=) (identifier)) (,) (assignment_expression (identifier) (=) (identifier))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (comment) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (-) (number_literal)) (==) (number_literal)) (||) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) ([) (identifier) (])) (==) (char_literal (') (character) (')))) ())) (comment) (break_statement (break) (;))) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (comment) (expression_statement (comma_expression (assignment_expression (identifier) (=) (identifier)) (,) (assignment_expression (identifier) (=) (identifier))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (+) (number_literal)) (==) (number_literal)) (||) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) ([) (identifier) (])) (==) (char_literal (') (character) (')))) ())) (break_statement (break) (;))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (comment) (expression_statement (comma_expression (assignment_expression (identifier) (=) (identifier)) (,) (assignment_expression (identifier) (=) (identifier))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (number_literal)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (+) (number_literal)) (==) (number_literal)) (||) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (number_literal)) (])) (==) (char_literal (') (character) (')))) ())) (break_statement (break) (;))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (comment) (expression_statement (comma_expression (assignment_expression (identifier) (=) (identifier)) (,) (assignment_expression (identifier) (=) (identifier))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (number_literal)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (-) (number_literal)) (==) (number_literal)) (||) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (number_literal)) (])) (==) (char_literal (') (character) (')))) ())) (break_statement (break) (;))) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))