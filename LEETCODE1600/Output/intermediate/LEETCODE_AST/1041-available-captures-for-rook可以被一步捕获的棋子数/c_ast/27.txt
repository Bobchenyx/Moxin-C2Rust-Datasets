(translation_unit (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (array_declarator (identifier) ([) (number_literal) (])) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (subscript_expression (identifier) ([) (identifier) (]))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (.) (field_identifier)) (=) (identifier)) (;)) (}))) (}))) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (--)) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal))) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (!=) (char_literal (') (character) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (break_statement (break) (;)) (}))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (number_literal))) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (!=) (char_literal (') (character) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (break_statement (break) (;)) (}))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal))) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (!=) (char_literal (') (character) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (break_statement (break) (;)) (}))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (number_literal))) (;)) (binary_expression (identifier) (<) (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (]))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (!=) (char_literal (') (character) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (break_statement (break) (;)) (}))) (}))) (}))) (return_statement (return) (identifier) (;)) (}))))