(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (let_declaration (let) (identifier) (=) (reference_expression (&) (index_expression (identifier) ([) (identifier) (]))) (;)) (binary_expression (binary_expression (binary_expression (call_expression (identifier) (arguments (() (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (range_expression (..) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) ()))) (line_comment (//)) (+) (call_expression (identifier) (arguments (() (call_expression (field_expression (index_expression (identifier) ([) (range_expression (binary_expression (identifier) (+) (integer_literal)) (..)) (])) (.) (field_identifier)) (arguments (() ()))) ())))) (line_comment (//)) (+) (call_expression (identifier) (arguments (() (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (reference_expression (&) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])))) ()))) ())))) (line_comment (//)) (+) (call_expression (identifier) (arguments (() (call_expression (field_expression (parenthesized_expression (() (range_expression (binary_expression (identifier) (+) (integer_literal)) (..) (integer_literal)) ())) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (reference_expression (&) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])))) ()))) ())))) (line_comment (//)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) ())) (->) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (block ({) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (char_literal)) (block ({) (expression_statement (return_expression (return) (tuple_expression (() (identifier) (,) (identifier) ()))) (;)) (})))) (})))) (})))) (macro_invocation (identifier) (!) (token_tree (() ()))) (}))) (function_item (fn) (identifier) (type_parameters (<) (lifetime_parameter (lifetime (') (identifier))) (>)) (parameters (() (parameter (mutable_specifier) (identifier) (:) (abstract_type (impl) (generic_type (type_identifier) (type_arguments (<) (type_binding (type_identifier) (=) (reference_type (&) (lifetime (') (identifier)) (primitive_type))) (>))))) ())) (->) (primitive_type) (block ({) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (match_expression (match) (unary_expression (*) (identifier)) (match_block ({) (match_arm (match_pattern (char_literal)) (=>) (return_expression (return) (integer_literal)) (,)) (match_arm (match_pattern (char_literal)) (=>) (continue_expression (continue)) (,)) (match_arm (match_pattern (_)) (=>) (break_expression (break)) (,)) (})))) (})))) (integer_literal) (}))))