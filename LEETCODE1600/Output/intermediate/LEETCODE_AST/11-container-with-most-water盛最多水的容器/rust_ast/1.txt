(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (|)) (->) (primitive_type) (block ({) (binary_expression (identifier) (*) (identifier)) (}))) (;)) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (|)) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (identifier) (})) (else_clause (else) (block ({) (identifier) (}))))) (}))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (+) (integer_literal)) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ()))) (,) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (as) (primitive_type)) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (assignment_expression (identifier) (=) (identifier)) (})))) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (identifier) (}))))