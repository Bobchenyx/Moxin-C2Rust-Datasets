(translation_unit (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (type_identifier) (field_identifier) (;)) (}))) (type_identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (})) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (||) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ()))) (||) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ()))) (||) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (==) (number_literal)) ()))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (,) (identifier) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (null (NULL))) ())) (compound_statement ({) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (,) (identifier) ()))) (;)) (})))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (true)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (pointer_expression (&) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (,) (identifier) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (false)) (;)) (break_statement (break) (;)) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (<=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (false)) (;)) (break_statement (break) (;)) (}))) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (--)) (;)) (})))) (}))) (if_statement (if) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (}))) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (})) (return_statement (return) (identifier) (;)) (}))))