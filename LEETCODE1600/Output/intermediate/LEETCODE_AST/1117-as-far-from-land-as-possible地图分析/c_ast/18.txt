(translation_unit (comment) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (declaration (primitive_type) (array_declarator (array_declarator (identifier) ([) (binary_expression (identifier) (*) (identifier)) (])) ([) (number_literal) (])) (;)) (comment) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (identifier)) (;)) (comment) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (identifier)) (;)) (comment) (}))) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (binary_expression (binary_expression (identifier) (*) (identifier)) (-) (number_literal))) ())) (return_statement (return) (number_literal) (;))) (comment) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (comment) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (>=) (number_literal)) (&&) (binary_expression (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (>=) (number_literal))) (&&) (binary_expression (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (<) (identifier))) (&&) (binary_expression (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (<) (identifier))) (&&) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (])) ([) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (])) (==) (number_literal))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (])) ([) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (]))) (])) (=) (identifier)) (;)) (comment) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (}))) (}))) (}))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (return_statement (return) (binary_expression (identifier) (-) (number_literal)) (;)) (}))))