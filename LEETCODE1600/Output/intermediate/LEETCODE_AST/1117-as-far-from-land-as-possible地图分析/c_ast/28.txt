(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (comment) (ERROR (binary_expression (binary_expression (identifier) (ERROR (:) (primitive_type) (identifier) (() (identifier)) (<) (identifier)) (<) (binary_expression (identifier) (>>) (pointer_expression (&) (identifier)))) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (array_declarator (array_declarator (identifier) ([) (number_literal) (])) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (,) (init_declarator (identifier) (=) (call_expression (field_expression (subscript_expression (identifier) ([) (number_literal) (])) (.) (field_identifier)) (argument_list (() ())))) (;)) (expression_statement (comma_expression (binary_expression (binary_expression (identifier) (<) (identifier)) (<) (identifier)) (,) (binary_expression (identifier) (>>) (identifier))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (comma_expression (binary_expression (identifier) (<) (identifier)) (,) (binary_expression (identifier) (>) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))))) (;)) (comment) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (identifier) ()))) (;)) (comment) (}))) (}))) (}))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (==) (binary_expression (identifier) (*) (identifier))) (||) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (==) (number_literal))) ())) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (while_statement (while) (parenthesized_expression (() (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (.) (field_identifier))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (>=) (identifier)) (||) (binary_expression (identifier) (<) (number_literal))) (||) (binary_expression (identifier) (>=) (identifier))) (||) (binary_expression (identifier) (<) (number_literal))) (||) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (>) (number_literal))) ())) (continue_statement (continue) (;))) (comment) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+) (number_literal))) (;)) (expression_statement (comma_expression (binary_expression (identifier) (<) (identifier)) (,) (binary_expression (identifier) (>) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (identifier) ()))) (;)) (}))) (}))) (return_statement (return) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (-) (number_literal)) (;)) (})) (}))) (expression_statement (;)))