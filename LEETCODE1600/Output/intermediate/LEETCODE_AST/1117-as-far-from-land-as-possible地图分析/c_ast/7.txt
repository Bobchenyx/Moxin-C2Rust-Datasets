(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (subscript_expression (identifier) ([) (identifier) (]))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (number_literal) (==) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<=) (identifier)) (||) (binary_expression (identifier) (<=) (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())))) (||) (binary_expression (identifier) (<=) (identifier))) (||) (binary_expression (identifier) (<=) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (identifier)) ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (>) (number_literal)) ())) (?) (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (:) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (<) (identifier)) ())) (?) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (:) (binary_expression (identifier) (-) (number_literal)))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (>) (number_literal)) ())) (?) (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (:) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (<) (subscript_expression (identifier) ([) (identifier) (]))) ())) (?) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (:) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (number_literal)))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (identifier)) (;) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (if_statement (if) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (+) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ())) (?) (identifier) (:) (identifier))) (;)) (})))) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (identifier)) (;) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (if_statement (if) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (+) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ())) (?) (identifier) (:) (identifier))) (;)) (})))) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (if_statement (if) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (+) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ())) (?) (identifier) (:) (identifier))) (;)) (})))) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (if_statement (if) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (+) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ())) (?) (identifier) (:) (identifier))) (;)) (})))) (comment) (if_statement (if) (parenthesized_expression (() (identifier) ())) (break_statement (break) (;))) (}))) (})) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)))) (comment) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (?) (identifier) (:) (identifier))) (;)) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (&&) (identifier)) ())) (return_statement (return) (identifier) (;)) (else_clause (else) (return_statement (return) (number_literal) (;)))) (}))))