(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (}))) (line_comment (//)) (line_comment (//)) (line_comment (//)) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (type_identifier) (block ({) (line_comment (//)) (line_comment (//)) (line_comment (//)) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (self) (.) (field_identifier))) ()))) (}))) (}))) (line_comment (//)) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (call_expression (identifier) (arguments (() (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) ()))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (-) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (]))) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (-) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (identifier) (;) (identifier) (])) (;) (identifier) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (type_cast_expression (identifier) (as) (primitive_type))) (,) (field_initializer (field_identifier) (:) (type_cast_expression (identifier) (as) (primitive_type))) (}))) ()))) (;)) (})))) (})))) (})))) (line_comment (//)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (struct_pattern (type_identifier) ({) (field_pattern (shorthand_field_identifier)) (,) (field_pattern (shorthand_field_identifier)) (,) (field_pattern (shorthand_field_identifier)) (})) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (integer_literal)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (index_expression (identifier) ([) (identifier) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (index_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (>=) (integer_literal)) (&&) (binary_expression (identifier) (<) (type_cast_expression (identifier) (as) (primitive_type)))) (&&) (binary_expression (identifier) (>=) (integer_literal))) (&&) (binary_expression (identifier) (<) (type_cast_expression (identifier) (as) (primitive_type)))) (block ({) (expression_statement (if_expression (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (integer_literal)) (<) (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (]))) ())) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (binary_expression (identifier) (+) (integer_literal))) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (}))) ()))) (;)) (})))) (})))) (})))) (})))) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())))) (;)) (})))) (})))) (})))) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (unary_expression (-) (integer_literal)) (})) (else_clause (else) (block ({) (identifier) (}))))) (}))) (}))))