(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (type_cast_expression (identifier) (as) (primitive_type))) (||) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (index_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (index_expression (identifier) ([) (identifier) (]))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>=) (type_cast_expression (identifier) (as) (primitive_type))) (&&) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (type_cast_expression (identifier) (as) (primitive_type))) (])) (==) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (index_expression (identifier) ([) (binary_expression (identifier) (-) (type_cast_expression (identifier) (as) (primitive_type))) (]))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>=) (type_cast_expression (identifier) (as) (primitive_type))) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (index_expression (identifier) ([) (identifier) (]))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (;)) (})))) (identifier) (}))) (}))))