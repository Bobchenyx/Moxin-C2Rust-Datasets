(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (%) (identifier)) ())))) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (storage_class_specifier (static)) (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (assignment_expression (identifier) (+=) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (+) (identifier)) (,) (identifier) ()))) ())) (break_statement (break) (;))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (return_statement (return) (identifier) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (assignment_expression (identifier) (+=) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (+) (identifier)) (,) (identifier) ()))) ())) (break_statement (break) (;))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (return_statement (return) (identifier) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))