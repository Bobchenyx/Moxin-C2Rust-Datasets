(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (type_parameters (<) (lifetime_parameter (lifetime (') (identifier))) (>)) (parameters (() (parameter (identifier) (:) (reference_type (&) (lifetime (') (identifier)) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (reference_type (&) (lifetime (') (identifier)) (array_type ([) (primitive_type) (]))) (>))) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (*) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) ()))) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (tuple_pattern (() (identifier) (,) (identifier) ())) (|)) (binary_expression (identifier) (==) (identifier))) ()))) (block ({) (call_expression (identifier) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (range_expression (identifier) (..)) (]))) ()))) (})) (else_clause (else) (block ({) (identifier) (}))))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (call_expression (field_expression (call_expression (field_expression (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (call_expression (field_expression (string_literal (") (")) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))