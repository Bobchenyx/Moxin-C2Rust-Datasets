(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..=) (identifier)) ())) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (_) (|)) (integer_literal)) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (index_expression (identifier) ([) (integer_literal) (])) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (+=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (})))) (identifier) (}))) (}))))