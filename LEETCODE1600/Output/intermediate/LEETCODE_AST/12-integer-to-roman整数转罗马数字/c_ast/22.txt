(translation_unit (comment) (declaration (type_identifier) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (compound_statement ({) (ERROR (type_qualifier (const)) (type_identifier) (=) ([) (comma_expression (char_literal (') (character) (')) (,) (comma_expression (char_literal (') (character) (')) (,) (char_literal (') (character) (')))) (]) (type_qualifier (const)) (type_identifier) (=) ([)) (expression_statement (comma_expression (char_literal (') (character) (')) (,) (comma_expression (char_literal (') (character) (')) (,) (comma_expression (char_literal (') (character) (')) (,) (ERROR (char_literal (') (character) (')) (]) (identifier)) (assignment_expression (identifier) (=) (number_literal))))) (;)) (ERROR (type_identifier) (identifier) (=) (') (')) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (compound_statement ({) (declaration (type_qualifier (const)) (type_identifier) (init_declarator (identifier) (=) (binary_expression (identifier) (%) (number_literal))) (;)) (switch_statement (switch) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (case_statement (case) (number_literal) (:)) (case_statement (case) (number_literal) (:)) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (=) (ERROR (ERROR) (identifier) ({)) (call_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (argument_list (() (identifier) (,) (subscript_expression (identifier) ([) (identifier) (])) ())))) (;))) (}))) (declaration (type_identifier) (ERROR ({)) (identifier) (;)) (}))) (ERROR (ERROR)) (break_statement (break) (;)) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (=) (ERROR (ERROR) (identifier) ({)) (subscript_expression (identifier) ([) (identifier) (]))) (;))) (})) (function_definition (type_identifier) (ERROR ({) (array_declarator (identifier) ([) (identifier) (])) (})) (identifier) (compound_statement ({) (ERROR (identifier)) (}))) (ERROR (ERROR)) (break_statement (break) (;)) (case_statement (case) (number_literal) (:)) (ERROR (assignment_expression (identifier) (=) (ERROR (ERROR) (identifier) ({)) (subscript_expression (identifier) ([) (identifier) (]))) (}) (identifier) (compound_statement ({) (ERROR (identifier)) (})) (ERROR (ERROR)) (break)) (case_statement (case) (number_literal) (:)) (case_statement (case) (number_literal) (:)) (case_statement (case) (number_literal) (:)) (ERROR (assignment_expression (identifier) (=) (ERROR (ERROR) (identifier) ({)) (subscript_expression (identifier) ([) (identifier) (]))) (}) (identifier) (compound_statement ({) (expression_statement (call_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (argument_list (() (binary_expression (identifier) (-) (number_literal)) (,) (subscript_expression (identifier) ([) (identifier) (])) ()))) (;)) (})) (identifier) (compound_statement ({) (ERROR (identifier)) (})) (ERROR (ERROR)) (break)) (case_statement (case) (number_literal) (:) (ERROR (assignment_expression (identifier) (=) (ERROR (ERROR) (identifier) ({)) (subscript_expression (identifier) ([) (identifier) (]))) (}) (identifier) (compound_statement ({) (expression_statement (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (;)) (})) (identifier)) (compound_statement ({) (ERROR (identifier)) (}))) (ERROR (ERROR) (break) (})) (comment) (comment) (ERROR (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (/) (number_literal)) ())) (>>) (ERROR (number_literal)) (update_expression (identifier) (++)))) (}) (return) (identifier) (})))