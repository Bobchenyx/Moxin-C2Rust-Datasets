(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (labeled_statement (statement_identifier) (:) (ERROR (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (type_identifier) (identifier) (;)) (switch_statement (switch) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;))) (case_statement (case) (number_literal) (:) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (break_statement (break) (;))) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (string_literal (") ("))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (identifier) ())) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) ())))) (;))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (number_literal))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (identifier) ())) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) ())))) (;))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (number_literal))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (identifier) ())) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) ())))) (;))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (number_literal))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (identifier) ())) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) ())))) (;))) (return_statement (return) (identifier) (;)) (}))) (}))) (expression_statement (;)))