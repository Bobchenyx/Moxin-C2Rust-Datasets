(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (number_literal)) ())) (expression_statement (update_expression (identifier) (++)) (;))) (declaration (primitive_type) (array_declarator (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (binary_expression (identifier) (*) (number_literal))) (-) (number_literal)) (])) (=) (char_literal (') (character) ('))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (binary_expression (identifier) (*) (number_literal))) (-) (number_literal)) (])) (=) (char_literal (') (character) ('))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (*) (number_literal))) (])) (=) (char_literal (') (character) ('))) (;)) (})) (else_clause (else) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (*) (number_literal))) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)))) (}))) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (return_statement (return) (identifier) (;)) (}))))