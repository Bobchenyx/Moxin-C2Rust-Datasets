(translation_unit (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) ())) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) ())) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) ())) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) ())) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (||) (binary_expression (identifier) (==) (number_literal))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (for_statement (for) (() (;) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (parenthesized_expression (() (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) (||) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ())))) (||) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ())))) ()))) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) (||) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ())))) (||) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ())))) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) (&&) (unary_expression (!) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))))) ())) (||) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) (&&) (unary_expression (!) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))))) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (subscript_expression (identifier) ([) (identifier) (]))) (||) (binary_expression (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) (==) (subscript_expression (identifier) ([) (identifier) (])))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))))) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (return_statement (return) (true) (;)) (}))))