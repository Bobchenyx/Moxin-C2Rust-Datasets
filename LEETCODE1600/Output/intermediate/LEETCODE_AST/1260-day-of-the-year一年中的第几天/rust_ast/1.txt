(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (index_expression (identifier) ([) (integer_literal) (])) (;)) (expression_statement (if_expression (if) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (%) (integer_literal)) (==) (integer_literal)) (&&) (binary_expression (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (%) (integer_literal)) (!=) (integer_literal))) ())) (||) (binary_expression (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (%) (integer_literal)) (==) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (integer_literal) (])) (+=) (integer_literal)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (index_expression (identifier) ([) (integer_literal) (]))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (index_expression (identifier) ([) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (]))) (;)) (})))) (identifier) (}))) (}))))