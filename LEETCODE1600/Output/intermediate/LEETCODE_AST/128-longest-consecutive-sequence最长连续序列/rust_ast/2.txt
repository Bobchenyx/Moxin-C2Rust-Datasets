(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) (,) (unary_expression (*) (identifier)) ()))) (;)) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (->) (primitive_type) (block ({) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (*) (identifier)) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (!=) (index_expression (field_expression (self) (.) (field_identifier)) ([) (reference_expression (&) (identifier)) (]))) (block ({) (expression_statement (assignment_expression (identifier) (=) (index_expression (field_expression (self) (.) (field_identifier)) ([) (reference_expression (&) (identifier)) (]))) (;)) (})))) (identifier) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (reference_type (&) (primitive_type))) (,) (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (identifier)) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (})))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (reference_expression (&) (index_expression (field_expression (self) (.) (field_identifier)) ([) (identifier) (]))) ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (integer_literal) ()))) (;)) (}))))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (index_expression (identifier) ([) (identifier) (])) (,) (identifier) ())))) (;)) (})))) (identifier) (}))) (}))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ()))) ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (reference_expression (&) (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ()))) ()))) (;)) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (reference_expression (&) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) ()))) (;)) (})))) (})))) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))