(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (return_statement (return) (null (NULL)) (;))) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (comment) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (subscript_expression (identifier) ([) (identifier) (])) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (identifier)) (;)) (comment) (comment) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (identifier)) (;)) (comment) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (comma_expression (update_expression (identifier) (--)) (,) (update_expression (identifier) (--))) (;)) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<=) (identifier)) ())) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (]))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (number_literal))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (+) (number_literal))) (;)) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (number_literal)) (;)) (comment) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<=) (identifier)) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (expression_statement (comma_expression (update_expression (identifier) (++)) (,) (update_expression (identifier) (--))) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (binary_expression (number_literal) (*) (update_expression (++) (identifier))))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (escape_sequence) (')) (,) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (subscript_expression (identifier) ([) (identifier) (])) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (char_literal (') (character) ('))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (comment) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))