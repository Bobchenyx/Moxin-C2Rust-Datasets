(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (switch_statement (switch) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (case_statement (case) (char_literal (') (character) (')) (:) (return_statement (return) (number_literal) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (return_statement (return) (number_literal) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (return_statement (return) (number_literal) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (return_statement (return) (number_literal) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (return_statement (return) (number_literal) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (return_statement (return) (number_literal) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (return_statement (return) (number_literal) (;))) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (pointer_expression (*) (identifier)) ()))) (<) (call_expression (identifier) (argument_list (() (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) ())))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (-=) (call_expression (identifier) (argument_list (() (pointer_expression (*) (identifier)) ())))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (pointer_expression (*) (identifier)) ())))) (;)) (})))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (pointer_expression (*) (identifier)) ())))) (;)) (return_statement (return) (identifier) (;)) (}))))