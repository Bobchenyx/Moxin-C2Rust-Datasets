(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (char_literal (') (character) (')) (-) (char_literal (') (character) ('))) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (char_literal (') (character) (')) (-) (char_literal (') (character) ('))) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (char_literal (') (character) (')) (-) (char_literal (') (character) ('))) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (char_literal (') (character) (')) (-) (char_literal (') (character) ('))) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (char_literal (') (character) (')) (-) (char_literal (') (character) ('))) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (char_literal (') (character) (')) (-) (char_literal (') (character) ('))) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (char_literal (') (character) (')) (-) (char_literal (') (character) ('))) (])) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) (==) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (subscript_expression (identifier) ([) (binary_expression (pointer_expression (*) (update_expression (identifier) (++))) (-) (char_literal (') (character) ('))) (]))) (;)) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (pointer_expression (*) (identifier)) (-) (char_literal (') (character) ('))) (])) (>=) (subscript_expression (identifier) ([) (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) (-) (char_literal (') (character) ('))) (]))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (subscript_expression (identifier) ([) (binary_expression (pointer_expression (*) (update_expression (identifier) (++))) (-) (char_literal (') (character) ('))) (]))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) (-) (char_literal (') (character) ('))) (])) (-) (subscript_expression (identifier) ([) (binary_expression (pointer_expression (*) (identifier)) (-) (char_literal (') (character) ('))) (]))) ()))) (;)) (expression_statement (assignment_expression (identifier) (+=) (number_literal)) (;)) (})))) (})))) (}))) (return_statement (return) (identifier) (;)) (}))))