(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (+) (integer_literal) (]))) (;)) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (identifier)) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (&&) (binary_expression (binary_expression (index_expression (identifier) ([) (identifier) (])) (+) (integer_literal)) (<) (index_expression (identifier) ([) (identifier) (])))) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (binary_expression (index_expression (identifier) ([) (identifier) (])) (+) (integer_literal))) (;)) (})))) (})))) (})))) (binary_expression (index_expression (identifier) ([) (identifier) (])) (-) (integer_literal)) (}))) (}))) (line_comment (//)) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (boolean_literal (false)) (;) (identifier) (])) (;) (identifier) (]))) (;)) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (line_comment (//)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (identifier) (,) (identifier) ())) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (binary_expression (identifier) (>=) (integer_literal)) (&&) (binary_expression (identifier) (<) (identifier))) (&&) (binary_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (==) (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (=) (boolean_literal (true))) (;)) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (line_comment (//)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ())) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (binary_expression (identifier) (>=) (integer_literal)) (&&) (binary_expression (identifier) (<) (identifier))) (&&) (binary_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (==) (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (=) (boolean_literal (true))) (;)) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (identifier) (}))))