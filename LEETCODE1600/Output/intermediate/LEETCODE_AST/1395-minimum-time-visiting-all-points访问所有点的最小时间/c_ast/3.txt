(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (identifier)) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (,) (array_declarator (identifier) ([) (number_literal) (])) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (++)) (;)) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (++)) (;)) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (--)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (--)) (;)) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (})) (else_clause (else) (compound_statement ({) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (!=) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (--)) (;)) (expression_statement (update_expression (subscript_expression (identifier) ([) (number_literal) (])) (--)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (})))))))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (-) (subscript_expression (identifier) ([) (number_literal) (])))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (-) (subscript_expression (identifier) ([) (number_literal) (])))) (;)) (})))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (-) (subscript_expression (identifier) ([) (number_literal) (])))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (-) (subscript_expression (identifier) ([) (number_literal) (])))) (;)) (})))) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (comma_expression (update_expression (identifier) (++)) (,) (update_expression (identifier) (++))) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (subscript_expression (identifier) ([) (identifier) (])) (,) (subscript_expression (identifier) ([) (identifier) (])) (,) (subscript_expression (identifier) ([) (identifier) (])) ())))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))