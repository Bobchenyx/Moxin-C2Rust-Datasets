(translation_unit (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (,) (field_identifier) (;)) (field_declaration (primitive_type) (array_declarator (field_identifier) ([) (number_literal) (])) (;)) (}))) (type_identifier) (;)) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() ())))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (=) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (=) (number_literal)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (=) (binary_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (number_literal)) (])) (*) (identifier))) (;)) (})))) (expression_statement (update_expression (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ())) (++)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>) (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (identifier)) (-) (number_literal))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (binary_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (number_literal)) (])) (/) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (identifier)) (-) (number_literal)) (]))) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (}))) (comment))