(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (unsafe_block (unsafe) (block ({) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (mutable_specifier) (identifier) (:) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (|)) (block ({) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier))) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))))) (;)) (})))) (identifier) (}))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (!=) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ())))) ())) (.) (field_identifier)) (arguments (() ())))) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ())))) ())) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (binary_expression (identifier) (*) (integer_literal)) ())))) (;)) (expression_statement (assignment_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (=) (identifier)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (})))) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))))) (;)) (expression_statement (compound_assignment_expr (identifier) (*=) (integer_literal)) (;)) (})))) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (,) (parameter (identifier) (:) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) ()))) ()))) ()))) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (identifier) (,) (identifier) (,) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) ())) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (identifier) (,) (identifier) ())) (;)) (expression_statement (unsafe_block (unsafe) (block ({) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (identifier) (:) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (|)) (block ({) (expression_statement (if_expression (if) (binary_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (==) (identifier)) (block ({) (identifier) (})) (else_clause (else) (block ({) (call_expression (identifier) (arguments (() (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) ()))) (}))))) (}))) (;)) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (identifier) (:) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (|)) (block ({) (expression_statement (if_expression (if) (binary_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (==) (identifier)) (block ({) (identifier) (})) (else_clause (else) (block ({) (type_cast_expression (reference_expression (&) (mutable_specifier) (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier))) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (}))))) (}))) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (match_expression (match) (tuple_expression (() (call_expression (identifier) (arguments (() (identifier) ()))) (,) (call_expression (identifier) (arguments (() (identifier) ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ()))) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) ())))) ())) (!=) (identifier)) (&&) (binary_expression (call_expression (identifier) (arguments (() (identifier) ()))) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) ())))) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))))) (;)) (})))) (expression_statement (assignment_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) ())))) ())) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) ())))) ())) (!=) (identifier)) (&&) (binary_expression (call_expression (identifier) (arguments (() (identifier) ()))) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) ())))) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))))) (;)) (})))) (expression_statement (assignment_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) ())))) ())) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (}))))) (empty_statement (;)) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (_) ())) (,) (identifier) ()))) (=>) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (break_expression (break)) (;)) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (tuple_struct_pattern (identifier) (() (_) ())) ()))) (=>) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (break_expression (break)) (;)) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (identifier) ()))) (=>) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})) (,)) (})))) (})))) (})))) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (}))) (}))))