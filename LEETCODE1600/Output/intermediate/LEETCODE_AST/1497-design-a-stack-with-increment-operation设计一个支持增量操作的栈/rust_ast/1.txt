(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (identifier) (::) (identifier)) (;)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) (,) (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (visibility_modifier (pub)) (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) (,) (field_declaration (visibility_modifier (pub)) (field_identifier) (:) (primitive_type)) (,) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) ())))) (,) (shorthand_field_initializer (identifier)) (,) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (let_declaration (let) (identifier) (=) (reference_expression (&) (field_expression (self) (.) (field_identifier))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<) (type_cast_expression (field_expression (self) (.) (field_identifier)) (as) (primitive_type))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (primitive_type) (block ({) (expression_statement (match_expression (match) (reference_expression (&) (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (unary_expression (*) (identifier)) (,)) (match_arm (match_pattern (identifier)) (=>) (unary_expression (-) (integer_literal)) (,)) (})))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (let_declaration (let) (identifier) (=) (reference_expression (&) (field_expression (self) (.) (field_identifier))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (+=) (identifier)) (;)) (})))) (}))) (}))))