(source_file (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<) (integer_literal)) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (::) (identifier)) (arguments (() ()))) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (loop_expression (loop) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (+) (integer_literal)) (;)) (expression_statement (loop_expression (loop) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (+) (integer_literal)) (;)) (expression_statement (loop_expression (loop) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (index_expression (identifier) ([) (identifier) (])) (+) (index_expression (identifier) ([) (identifier) (]))) (+) (index_expression (identifier) ([) (identifier) (]))) (==) (integer_literal)) (block ({) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (token_tree ([) (identifier) (])) (,) (identifier) (token_tree ([) (identifier) (])) (,) (identifier) (token_tree ([) (identifier) (])) (]))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (line_comment (//)) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (}))))