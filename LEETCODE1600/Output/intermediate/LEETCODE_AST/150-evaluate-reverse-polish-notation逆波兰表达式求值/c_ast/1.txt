(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (comment) (}))) (type_identifier) (;)) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (field_expression (identifier) (->) (field_identifier))) (==) (field_expression (identifier) (->) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (binary_expression (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (identifier)) ())) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (field_expression (identifier) (->) (field_identifier)))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (identifier))) (;)) (}))) (expression_statement (assignment_expression (pointer_expression (*) (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ()))) (=) (identifier)) (;)) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (field_expression (identifier) (->) (field_identifier))) ())) (return_statement (return) (number_literal) (;))) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (--)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (pointer_expression (*) (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ())))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (identifier) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (comment) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (string_literal (") (string_content) (")) ())))) ())) (compound_statement ({) (expression_statement (comma_expression (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ())))) (,) (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (binary_expression (identifier) (+) (identifier)) ()))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (string_literal (") (string_content) (")) ())))) ())) (compound_statement ({) (expression_statement (comma_expression (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ())))) (,) (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (binary_expression (identifier) (-) (identifier)) ()))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (string_literal (") (string_content) (")) ())))) ())) (compound_statement ({) (expression_statement (comma_expression (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ())))) (,) (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (binary_expression (identifier) (*) (identifier)) ()))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (string_literal (") (string_content) (")) ())))) ())) (compound_statement ({) (expression_statement (comma_expression (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ())))) (,) (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (binary_expression (identifier) (/) (identifier)) ()))) (;)) (})) (else_clause (else) (compound_statement ({) (comment) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) ()))) (;)) (})))))))))) (}))) (return_statement (return) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (comment) (}))))