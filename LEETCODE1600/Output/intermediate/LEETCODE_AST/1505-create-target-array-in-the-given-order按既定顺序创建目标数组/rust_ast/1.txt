(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (-) (integer_literal) (;) (integer_literal) (]))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (reference_pattern (&) (identifier)) (,) (reference_pattern (&) (identifier)) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (range_expression (identifier) (..) (integer_literal)) (,) (binary_expression (identifier) (+) (integer_literal)) ()))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (reference_pattern (&) (identifier)) (|)) (binary_expression (identifier) (!=) (unary_expression (-) (integer_literal)))) ()))) (;)) (identifier) (}))) (}))))