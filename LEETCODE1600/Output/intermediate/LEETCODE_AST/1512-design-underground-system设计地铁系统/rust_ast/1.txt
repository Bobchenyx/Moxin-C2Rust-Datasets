(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (type_identifier)) (,) (}))) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (type_identifier)) (}))) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (,) (type_identifier) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (,) (type_identifier) (>)))) (}))) (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (}))) (}))) (block_comment (/*) (*/)) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (integer_literal)) (block ({) (expression_statement (if_expression (if) (match_expression (match) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (])))) ()))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (_) ()))) (=>) (boolean_literal (false)) (,)) (match_arm (match_pattern (identifier)) (=>) (boolean_literal (true)) (,)) (}))) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (]))) (,) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (}))) ()))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (})))) (}))) (block_comment (/*) (*/)) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (integer_literal)) (block ({) (expression_statement (if_expression (if) (match_expression (match) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (])))) ()))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (_) ()))) (=>) (boolean_literal (false)) (,)) (match_arm (match_pattern (identifier)) (=>) (boolean_literal (true)) (,)) (}))) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (]))) (,) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (}))) ()))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (})))) (}))) (block_comment (/*) (*/)) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (reference_expression (&) (field_expression (self) (.) (field_identifier))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (field_expression (identifier) (.) (field_identifier)) (==) (identifier)) (&&) (binary_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (type_cast_expression (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier))) ())) (as) (primitive_type)))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (float_literal)) (;)) (})))) (parenthesized_expression (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (/) (type_cast_expression (identifier) (as) (primitive_type))) ())) (}))) (}))) (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)))