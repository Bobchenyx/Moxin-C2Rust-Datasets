(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (labeled_statement (statement_identifier) (:) (ERROR (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (ERROR (<) (primitive_type) (>) (&)) (identifier)) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (binary_expression (identifier) (*) (subscript_expression (identifier) ([) (identifier) (]))) ()))) (,) (binary_expression (identifier) (*) (subscript_expression (identifier) ([) (identifier) (]))) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (binary_expression (identifier) (*) (subscript_expression (identifier) ([) (identifier) (]))) ()))) (,) (binary_expression (identifier) (*) (subscript_expression (identifier) ([) (identifier) (]))) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (}))) (expression_statement (;)))