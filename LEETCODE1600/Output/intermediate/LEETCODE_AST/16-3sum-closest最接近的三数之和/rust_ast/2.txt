(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) (,) (identifier) (,) (integer_literal) ()))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ()))) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (identifier))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (call_expression (identifier) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (range_expression (binary_expression (identifier) (+) (integer_literal)) (..)) (]))) (,) (binary_expression (identifier) (-) (identifier)) (,) (binary_expression (identifier) (-) (integer_literal)) ())))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (parenthesized_expression (() (binary_expression (unary_expression (*) (identifier)) (-) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (>) (call_expression (field_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (identifier)) (;)) (})))) (})))) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (}))))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (return_expression (return) (index_expression (identifier) ([) (identifier) (]))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (>) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (return_expression (return) (index_expression (identifier) ([) (identifier) (]))) (;)) (})))))) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (-) (identifier)) (>) (integer_literal)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (/) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (<) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (}))))))) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (-) (index_expression (identifier) ([) (identifier) (]))) (>) (binary_expression (index_expression (identifier) ([) (identifier) (])) (-) (identifier))) (block ({) (index_expression (identifier) ([) (identifier) (])) (})) (else_clause (else) (block ({) (index_expression (identifier) ([) (identifier) (])) (}))))) (}))))