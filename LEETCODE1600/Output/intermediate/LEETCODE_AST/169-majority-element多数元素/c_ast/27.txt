(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (type_identifier) (array_declarator (field_identifier) ([) (identifier) (])) (;)) (}))) (type_identifier) (;)) (declaration (type_identifier) (identifier) (;)) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (binary_expression (identifier) (%) (identifier)) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (binary_expression (number_literal) (+) (parenthesized_expression (() (binary_expression (identifier) (%) (parenthesized_expression (() (binary_expression (identifier) (-) (number_literal)) ()))) ()))) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (binary_expression (binary_expression (cast_expression (() (type_descriptor (sized_type_specifier (long) (long))) ()) (identifier)) (*) (cast_expression (() (type_descriptor (sized_type_specifier (long) (long))) ()) (identifier))) (%) (identifier))) ())) (%) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ())))) (;)) (declaration (primitive_type) (identifier) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (.) (field_identifier)) (==) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (=) (pointer_expression (*) (identifier))) (;)) (return_statement (return) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (.) (field_identifier)) (==) (field_expression (identifier) (->) (field_identifier))) ())) (compound_statement ({) (return_statement (return) (;)) (}))))) (}))) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (identifier) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (.) (field_identifier)) (==) (identifier)) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (.) (field_identifier)) (==) (identifier)) ())) (compound_statement ({) (return_statement (return) (pointer_expression (&) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (}))))) (}))) (return_statement (return) (null (NULL)) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (field_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (.) (field_identifier)) (=) (identifier)) (;)) (}))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (null (NULL))) (||) (binary_expression (identifier) (==) (number_literal))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (subscript_expression (identifier) ([) (number_literal) (])) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (type_identifier) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (subscript_expression (identifier) ([) (identifier) (])) ())))) (;)) (if_statement (if) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (update_expression (++) (field_expression (identifier) (->) (field_identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>) (identifier)) ())) (compound_statement ({) (return_statement (return) (field_expression (identifier) (->) (field_identifier)) (;)) (}))) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ()))) (;)) (})))) (}))) (return_statement (return) (number_literal) (;)) (}))))