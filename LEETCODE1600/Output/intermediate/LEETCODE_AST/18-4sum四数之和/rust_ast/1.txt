(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (integer_literal)) (block ({) (return_expression (return) (identifier)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (+) (index_expression (identifier) ([) (integer_literal) (]))) (+) (index_expression (identifier) ([) (integer_literal) (]))) (+) (index_expression (identifier) ([) (integer_literal) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (return_expression (return) (identifier)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (+) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (return_expression (return) (identifier)) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (binary_expression (identifier) (-) (integer_literal))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (!=) (integer_literal)) (&&) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (==) (identifier))) (block ({) (continue_expression (continue)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (identifier) (+) (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (break_expression (break)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (identifier) (+) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (continue_expression (continue)) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (binary_expression (identifier) (+) (integer_literal)) (..) (binary_expression (identifier) (-) (integer_literal))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (!=) (binary_expression (identifier) (+) (integer_literal))) (&&) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (==) (identifier))) (block ({) (continue_expression (continue)) (})))) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (binary_expression (identifier) (+) (integer_literal)) (,) (binary_expression (identifier) (-) (integer_literal)) ())) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (index_expression (identifier) ([) (identifier) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (break_expression (break)) (})))) (line_comment (//)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (index_expression (identifier) ([) (identifier) (]))) (+) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (continue_expression (continue)) (})))) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (tuple_expression (() (index_expression (identifier) ([) (identifier) (])) (,) (index_expression (identifier) ([) (identifier) (])) ())) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (identifier)) (+) (identifier)) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (-) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (]))) ()))) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])))) (block ({) (compound_assignment_expr (identifier) (+=) (integer_literal)) (})))) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])))) (block ({) (compound_assignment_expr (identifier) (-=) (integer_literal)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (}))))))) (})))) (})))) (})))) (identifier) (}))))