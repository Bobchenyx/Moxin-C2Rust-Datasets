(source_file (type_item (type) (type_identifier) (=) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (line_comment (//)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (type_identifier))) (,) (type_cast_expression (reference_expression (&) (identifier)) (as) (pointer_type (*) (const) (type_identifier))) ())) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (unsafe_block (unsafe) (block ({) (expression_statement (while_expression (while) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (})))) (expression_statement (while_expression (while) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)))) (;)) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)))) (;)) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (}))))) (})))) (identifier) (}))) (}))))