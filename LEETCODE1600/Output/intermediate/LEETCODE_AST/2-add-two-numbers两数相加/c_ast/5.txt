(translation_unit (comment) (function_definition (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (return_statement (return) (identifier) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (return_statement (return) (identifier) (;))) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (field_expression (identifier) (->) (field_identifier)))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (field_expression (identifier) (->) (field_identifier)) ())))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (null (NULL))) ())) (compound_statement ({) (declaration (struct_specifier (struct) (type_identifier)) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) ())))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (binary_expression (field_expression (identifier) (->) (field_identifier)) (/) (number_literal))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (null (NULL))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (+=) (binary_expression (field_expression (identifier) (->) (field_identifier)) (/) (number_literal))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ()))) (;)) (})))) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (%=) (number_literal)) (;)) (}))) (}))))