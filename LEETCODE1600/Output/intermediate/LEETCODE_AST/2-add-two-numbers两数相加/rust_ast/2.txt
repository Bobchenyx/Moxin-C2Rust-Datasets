(source_file (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (identifier) (,) (identifier) ())) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (match_expression (match) (tuple_expression (() (identifier) (,) (identifier) ())) (match_block ({) (line_comment (//)) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ()))) (=>) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (field_expression (identifier) (.) (field_identifier)))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (}))) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (identifier) ()))) (=>) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ()))) (=>) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (identifier) ()))) (=>) (block ({) (expression_statement (break_expression (break)) (;)) (}))) (})))) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (identifier) (%) (integer_literal)) ()))) ()))) ())))) (;)) (line_comment (//)) (expression_statement (compound_assignment_expr (identifier) (/=) (integer_literal)) (;)) (line_comment (//)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (integer_literal)) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ()))) ())))) (;)) (})))) (identifier) (}))) (}))))