(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (binary_expression (binary_expression (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (&) (integer_literal)) (==) (integer_literal)) (&&) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (binary_expression (call_expression (identifier) (arguments (() (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (or_pattern (or_pattern (char_literal) (|) (char_literal)) (|) (char_literal))) (=>) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (return_expression (return) (boolean_literal (true))) (})) (,)) (match_arm (match_pattern (char_literal)) (=>) (char_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (char_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (char_literal) (,)) (match_arm (match_pattern (_)) (=>) (macro_invocation (identifier) (!) (token_tree (() ())))) (}))) ()))) (==) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))))) ())))) (&&) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (}))))