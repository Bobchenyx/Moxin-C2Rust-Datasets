(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (loop_expression (loop) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (})))) (expression_statement (loop_expression (loop) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (integer_literal)) ())) (*) (parenthesized_expression (() (binary_expression (identifier) (%) (integer_literal)) ())))) (;)) (expression_statement (compound_assignment_expr (identifier) (/=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<=) (integer_literal)) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (}))) (}))))