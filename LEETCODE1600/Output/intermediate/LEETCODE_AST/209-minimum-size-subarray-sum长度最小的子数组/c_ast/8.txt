(translation_unit (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<=) (identifier)) ())) (comment) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>=) (identifier)) (&&) (binary_expression (identifier) (<) (identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (-) (identifier)) ())))) (;)) (expression_statement (assignment_expression (identifier) (-=) (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (]))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (expression_statement (assignment_expression (identifier) (+=) (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (]))) (;)) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (identifier)) (?) (number_literal) (:) (identifier)) (;)) (}))))