(source_file (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) ()))) ()))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (match_expression (match) (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (identifier) ()))) (=>) (block ({) (expression_statement (break_expression (break)) (;)) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (identifier) ()))) (=>) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (break_expression (break)) (;)) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ()))) (=>) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (break_expression (break)) (;)) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ()))) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (identifier) (.) (field_identifier)) (<) (field_expression (identifier) (.) (field_identifier))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))))) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)))) (;)) (})) (,)) (})))) (})))) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (}))) (}))))