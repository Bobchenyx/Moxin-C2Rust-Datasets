(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (identifier) (=) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})) (else_clause (else) (if_expression (if) (let_condition (let) (identifier) (=) (identifier)) (block ({) (return_expression (return) (identifier)) (})))))) (empty_statement (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (|)) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (call_expression (identifier) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (})) (else_clause (else) (block ({) (identifier) (}))))) (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (if_expression (if) (binary_expression (call_expression (field_expression (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (<=) (call_expression (field_expression (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ())))) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (})) (else_clause (else) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (})))) (;)) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (|)) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (call_expression (identifier) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (})) (else_clause (else) (block ({) (identifier) (}))))) (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))))) (|)) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (block ({) (call_expression (identifier) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (})) (else_clause (else) (block ({) (identifier) (}))))) (})) (else_clause (else) (block ({) (identifier) (}))))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (expression_statement (loop_expression (loop) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (let_condition (let) (identifier) (=) (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ())))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (line_comment (//)) (expression_statement (if_expression (if) (let_condition (let) (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (})))) (expression_statement (break_expression (break)) (;)) (})))) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (call_expression (field_expression (call_expression (identifier) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (<=) (call_expression (field_expression (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ())))) (&&) (binary_expression (call_expression (field_expression (call_expression (identifier) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (>) (call_expression (field_expression (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (call_expression (identifier) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) ()))) ()))) ())))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (field_expression (identifier) (.) (field_identifier)) (,)) (match_arm (match_pattern (identifier)) (=>) (identifier) (,)) (})))) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (}))))) (})))) (identifier) (}))) (}))))