(source_file (struct_item (struct) (type_identifier) (field_declaration_list ({) (}))) (line_comment (//)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (])) (struct_item (visibility_modifier (pub)) (struct) (type_identifier) (field_declaration_list ({) (field_declaration (visibility_modifier (pub)) (field_identifier) (:) (primitive_type)) (,) (field_declaration (visibility_modifier (pub)) (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (attribute_item (#) ([) (attribute (identifier)) (])) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (identifier)) (,) (shorthand_field_initializer (identifier)) (}))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) ()))) ()))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (&&) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (;)) (let_declaration (let) (identifier) (=) (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (;)) (line_comment (//)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (;)) (line_comment (//)) (}))))) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)))) (;)) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (identifier)) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (identifier)) (;)) (}))))) (expression_statement (return_expression (return) (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (;)) (}))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) ()))) ()))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (binary_expression (identifier) (+) (integer_literal))) (block ({) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ()))) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})) (,)) (match_arm (match_pattern (identifier)) (=>) (block ({) (})) (,)) (})))) (})))) (expression_statement (return_expression (return) (identifier)) (;)) (}))) (function_item (fn) (identifier) (parameters (() ())) (block ({) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (integer_literal) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (integer_literal) ()))) (;)) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) (::) (identifier) (token_tree (() (identifier) (,) (identifier) ())) ()))) (;)) (}))))