(source_file (struct_item (visibility_modifier (pub)) (struct) (type_identifier) (type_parameters (<) (type_parameter (type_identifier) (trait_bounds (:) (scoped_type_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (type_identifier)))) (>)) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (}))) (impl_item (impl) (type_parameters (<) (type_parameter (type_identifier)) (>)) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (where_clause (where) (where_predicate (type_identifier) (trait_bounds (:) (scoped_type_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (type_identifier)))) (,)) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (struct_expression (type_identifier) (field_initializer_list ({) (shorthand_field_initializer (identifier)) (,) (field_initializer (field_identifier) (:) (integer_literal)) (}))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (primitive_type) (block ({) (field_expression (self) (.) (field_identifier)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (reference_type (&) (type_identifier)) (>))) (block ({) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (mutable_specifier) (identifier) (:) (primitive_type)) ())) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (/) (integer_literal)) (;)) (let_declaration (let) (struct_pattern (type_identifier) ({) (field_pattern (shorthand_field_identifier)) (,) (remaining_field_pattern (..)) (})) (=) (self) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>=) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (<) (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (]))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) (,) (type_cast_expression (identifier) (as) (primitive_type)) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (/) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break)) (;)) (}))))) (})))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (type_identifier)) ())) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (type_cast_expression (field_expression (self) (.) (field_identifier)) (as) (primitive_type)) ()))) (;)) (expression_statement (compound_assignment_expr (field_expression (self) (.) (field_identifier)) (+=) (integer_literal)) (;)) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (mutable_specifier) (identifier) (:) (primitive_type)) ())) (block ({) (let_declaration (let) (struct_pattern (type_identifier) ({) (field_pattern (shorthand_field_identifier)) (,) (remaining_field_pattern (..)) (})) (=) (self) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (binary_expression (identifier) (*) (integer_literal)) (+) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (binary_expression (identifier) (*) (integer_literal)) (+) (integer_literal)) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (identifier) (])))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (integer_literal)) (+) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (integer_literal)) (+) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break)) (;)) (}))))) (})))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (expression_statement (match_expression (match) (field_expression (self) (.) (field_identifier)) (match_block ({) (match_arm (match_pattern (integer_literal)) (=>) (identifier) (,)) (match_arm (match_pattern (integer_literal)) (=>) (block ({) (expression_statement (assignment_expression (field_expression (self) (.) (field_identifier)) (=) (integer_literal)) (;)) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (}))) (match_arm (match_pattern (_)) (=>) (block ({) (expression_statement (compound_assignment_expr (field_expression (self) (.) (field_identifier)) (-=) (integer_literal)) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (integer_literal) (,) (field_expression (self) (.) (field_identifier)) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (;)) (identifier) (}))) (})))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (integer_literal) (*) (type_cast_expression (identifier) (as) (primitive_type))) ()))) (;)) (expression_statement (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) ()))) (;)) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (}))) (}))))