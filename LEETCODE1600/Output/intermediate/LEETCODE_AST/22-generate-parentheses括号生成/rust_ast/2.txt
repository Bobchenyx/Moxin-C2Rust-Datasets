(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (line_comment (//)) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))))) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) (,) (char_literal) ()))) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) (,) (identifier) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) (,) (char_literal) ()))) (,) (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) ()))) (;)) (})))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (,) (identifier) (,) (identifier) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (identifier) (}))) (}))))