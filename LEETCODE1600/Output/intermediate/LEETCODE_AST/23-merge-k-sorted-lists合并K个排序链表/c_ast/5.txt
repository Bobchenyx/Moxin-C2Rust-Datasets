(translation_unit (comment) (type_definition (typedef) (struct_specifier (struct) (type_identifier)) (type_identifier) (;)) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (*) (number_literal))) (;) (binary_expression (identifier) (<=) (identifier)) (;) (comma_expression (assignment_expression (identifier) (=) (identifier)) (,) (assignment_expression (identifier) (*=) (number_literal))) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (+) (number_literal)) (<=) (identifier)) (&&) (binary_expression (field_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (->) (field_identifier)) (<) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (->) (field_identifier)))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (->) (field_identifier)) (<) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (->) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (})) (else_clause (else) (break_statement (break) (;)))) (}))) (}))) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (type_identifier) (pointer_declarator (*) (array_declarator (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (if_statement (if) (parenthesized_expression (() (subscript_expression (identifier) ([) (identifier) (])) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (++) (identifier)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (null (NULL)) (;))) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (initializer_pair (field_designator (.) (field_identifier)) (=) (identifier)) (,) (initializer_pair (field_designator (.) (field_identifier)) (=) (null (NULL))) (}))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (pointer_expression (&) (identifier))) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (binary_expression (identifier) (>) (number_literal)) (;) (update_expression (identifier) (--)) ()) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;))) (declaration (type_identifier) (identifier) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (pointer_expression (&) (identifier))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (identifier) ([) (number_literal) (])) (->) (field_identifier)) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (field_expression (subscript_expression (identifier) ([) (number_literal) (])) (->) (field_identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (null (NULL))) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (pointer_expression (&) (identifier))) (;))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (identifier) ()))) (;)) (comment) (}))) (return_statement (return) (field_expression (identifier) (.) (field_identifier)) (;)) (}))))