(translation_unit (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (array_declarator (field_identifier) ([) (number_literal) (])) (;)) (field_declaration (primitive_type) (array_declarator (field_identifier) ([) (number_literal) (])) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (comment) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() ())))) (compound_statement ({) (return_statement (return) (call_expression (identifier) (argument_list (() (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (])) (=) (identifier)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (])) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (--) (field_expression (identifier) (->) (field_identifier))) (]))) (;)) (}))) (}))) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>) (number_literal)) ()))) (;)) (return_statement (return) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (--) (field_expression (identifier) (->) (field_identifier))) (])) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (])) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (--) (field_expression (identifier) (->) (field_identifier))) (]))) (;)) (}))) (}))) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>) (number_literal)) ()))) (;)) (return_statement (return) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (number_literal)) (])) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (return_statement (return) (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) (&&) (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (comment))