(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (}))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (type_identifier) (>))))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (+) (integer_literal)) (>=) (identifier)) (block ({) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) (,) (primitive_type) ())) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (arguments (() ()))) (>) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (||) (binary_expression (field_expression (index_expression (identifier) ([) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal)) (])) (.) (integer_literal)) (!=) (identifier))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ())) ()))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal)) (;)) (expression_statement (assignment_expression (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (integer_literal)) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (}))))) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (identifier)) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (}))))) (}))))) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (reference_expression (&) (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal))) (;)) (let_declaration (let) (identifier) (=) (reference_expression (&) (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (integer_literal))) (;)) (expression_statement (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) ()))) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (field_expression (identifier) (.) (integer_literal)) (,) (field_expression (identifier) (.) (integer_literal)) (,) (identifier) ())))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (})))) (boolean_literal (true)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (arguments (() ())))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (>))) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (type_identifier) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (call_expression (field_expression (call_expression (scoped_identifier (generic_type (type_identifier) (::) (type_arguments (<) (reference_type (&) (primitive_type)) (>))) (::) (identifier)) (arguments (() (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (tuple_expression (() (unary_expression (*) (identifier)) (,) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) ()))) ()))) ()))) (;)) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (integer_literal) (,) (integer_literal) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (reference_expression (&) (mutable_specifier) (identifier)) ())))) (block ({) (expression_statement (return_expression (return) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (loop_expression (loop) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (tuple_pattern (() (_) (,) (identifier) ())) (|)) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (tuple_pattern (() (identifier) (,) (_) ())) (|)) (unary_expression (*) (identifier))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (call_expression (field_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (expression_statement (if_expression (if) (unary_expression (!) (identifier)) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (})))) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (})) (else_clause (else) (block ({) (identifier) (}))))) (}))) (}))))