(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (}))) (const_item (const) (identifier) (:) (reference_type (&) (lifetime (') (identifier)) (primitive_type)) (=) (string_literal (") (string_content) (")) (;)) (const_item (const) (identifier) (:) (reference_type (&) (lifetime (') (identifier)) (primitive_type)) (=) (string_literal (") (string_content) (")) (;)) (const_item (const) (identifier) (:) (reference_type (&) (lifetime (') (identifier)) (primitive_type)) (=) (string_literal (") (string_content) (")) (;)) (const_item (const) (identifier) (:) (reference_type (&) (lifetime (') (identifier)) (primitive_type)) (=) (string_literal (") (string_content) (")) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (type_identifier) (block ({) (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (self) (.) (identifier) (,) (identifier) (,) (self) (.) (identifier) (.) (identifier) (token_tree (() ())) (.) (identifier) (token_tree (() ())) (.) (identifier) (::) (<) (identifier) (>) (token_tree (() ())) (,) (identifier) (,) (self) (.) (identifier) (.) (identifier) (token_tree (() ())) (.) (identifier) (token_tree (() (|) (token_tree (() (identifier) (,) (identifier) ())) (|) (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) (,) (identifier) (,) (identifier) ())) ())) (.) (identifier) (::) (<) (identifier) (<) (identifier) (>>) (token_tree (() ())) (.) (identifier) (token_tree (() (identifier) ())) (,) (identifier) (,) (self) (.) (identifier) (.) (identifier) (token_tree (() ())) (.) (identifier) (token_tree (() (|) (identifier) (|) (identifier) (.) (identifier) (token_tree (() ())) ())) (.) (identifier) (::) (<) (identifier) (<) (identifier) (>>) (token_tree (() ())) (.) (identifier) (token_tree (() (identifier) ())) ()))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (generic_function (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (generic_type (type_identifier) (::) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (::) (identifier)) (arguments (() (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))))) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (;)) (tuple_expression (() (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (call_expression (generic_function (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) ())) (}))) ()))) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))))) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (field_expression (call_expression (generic_function (field_expression (identifier) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (arguments (() ()))) (;)) (struct_expression (type_identifier) (field_initializer_list ({) (shorthand_field_initializer (identifier)) (,) (shorthand_field_initializer (identifier)) (,) (shorthand_field_initializer (identifier)) (,) (shorthand_field_initializer (identifier)) (}))) (}))) (}))) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) (,) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (macro_invocation (identifier) (!) (token_tree ([) (])))) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (macro_invocation (identifier) (!) (token_tree ([) (])))) (,) (}))) ()))) ()))) (;)) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (])))) (}))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (,) (shorthand_field_initializer (identifier)) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (macro_invocation (identifier) (!) (token_tree ([) (])))) (,) (}))) ()))) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (,) (identifier) (,) (identifier) ()))) (;)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (<) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (&&) (binary_expression (identifier) (<) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (!=) (index_expression (field_expression (identifier) (.) (field_identifier)) ([) (identifier) (]))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (:) (primitive_type) (=) (index_expression (field_expression (identifier) (.) (field_identifier)) ([) (identifier) (])) (;)) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (range_expression (identifier) (..)) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (identifier) (arguments (() (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier))) (,) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier))) ()))) (;)) (expression_statement (call_expression (identifier) (arguments (() (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier))) (,) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier))) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) (,) (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (:) (primitive_type) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (block ({) (expression_statement (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (call_expression (field_expression (index_expression (field_expression (self) (.) (field_identifier)) ([) (unary_expression (*) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) (,) (reference_expression (&) (index_expression (identifier) ([) (range_expression (identifier) (..)) (]))) (,) (identifier) ()))) (;)) (}))) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (|)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (call_expression (field_expression (index_expression (identifier) ([) (range_expression (identifier) (..)) (])) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (field_expression (identifier) (.) (field_identifier)) (}))) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (}))))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (type_identifier) (block ({) (call_expression (field_expression (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (}))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() (identifier) ()))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ()))) ())))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (;)) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ())))) (,) (shorthand_field_initializer (identifier)) (}))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (]))) ()))) ()))) (;)) (expression_statement (block ({) (expression_statement (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (call_expression (field_expression (index_expression (field_expression (self) (.) (field_identifier)) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (string_literal (") (")) ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (}))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (reference_pattern (&) (tuple_pattern (() (_) (,) (identifier) ()))) (|)) (identifier)) ()))) (;)) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) (arguments (() ())))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (mutable_specifier) (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (type_identifier) (,) (primitive_type) ())) (>))) (>))) (>)))) ())) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (unary_expression (*) (identifier)) ())) ()))) (;)) (})))) (}))) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (index_expression (field_expression (self) (.) (field_identifier)) ([) (unary_expression (*) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (}))) (}))) (struct_item (struct) (type_identifier) (field_declaration_list ({) (}))) (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (identifier) ()))) (;)) (})))) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))