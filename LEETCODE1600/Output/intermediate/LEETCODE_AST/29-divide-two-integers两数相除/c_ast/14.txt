(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (comment) (return_statement (return) (number_literal) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (comment) (return_statement (return) (identifier) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (return_statement (return) (identifier) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (identifier))) ())) (comment) (return_statement (return) (number_literal) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (return_statement (return) (number_literal) (;))))))))))) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (^) (identifier)) ())) (<) (number_literal))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (comment) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (>>) (identifier)) ())) (>=) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (number_literal) (<<) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (-=) (binary_expression (identifier) (<<) (identifier))) (;)) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (return_statement (return) (identifier) (;)) (else_clause (else) (return_statement (return) (conditional_expression (identifier) (?) (unary_expression (-) (identifier)) (:) (identifier)) (;)))) (return_statement (return) (number_literal) (;)) (}))))