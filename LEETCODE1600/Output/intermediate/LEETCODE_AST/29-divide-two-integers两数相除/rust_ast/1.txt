(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (unary_expression (-) (integer_literal)))) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>) (integer_literal)) (&&) (binary_expression (identifier) (<) (integer_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (expression_statement (assignment_expression (identifier) (=) (unary_expression (-) (identifier))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (binary_expression (identifier) (<) (integer_literal)) (&&) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (expression_statement (assignment_expression (identifier) (=) (unary_expression (-) (identifier))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (binary_expression (identifier) (>) (integer_literal)) (&&) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (unary_expression (-) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (unary_expression (-) (identifier))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (return_expression (return) (integer_literal)) (})))))))))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<=) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (identifier) (>) (binary_expression (identifier) (/) (integer_literal))) (&&) (binary_expression (binary_expression (identifier) (+) (identifier)) (>) (binary_expression (identifier) (/) (integer_literal)))) (&&) (binary_expression (identifier) (<=) (binary_expression (identifier) (+) (identifier)))) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (identifier)) (;)) (break_expression (break)) (}))))) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (boolean_literal (true))) (block ({) (assignment_expression (identifier) (=) (unary_expression (-) (identifier))) (})))) (return_expression (return) (identifier)) (}))) (}))))