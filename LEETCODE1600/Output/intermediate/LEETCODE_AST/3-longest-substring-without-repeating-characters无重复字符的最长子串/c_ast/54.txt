(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (return_statement (return) (identifier) (;)) (else_clause (else) (return_statement (return) (identifier) (;)))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (null (NULL))) (||) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (==) (number_literal))) ())) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (&&) (binary_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (==) (number_literal))) ())) (comment) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})) (else_clause (else) (comment) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (--)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (-) (identifier)) ())))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))