(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (parenthesized_expression (() (binary_expression (reference_expression (&) (identifier)) (==) (string_literal (") ("))) ())) (block ({) (expression_statement (return_expression (return) (type_cast_expression (integer_literal) (as) (primitive_type))) (;)) (})))) (let_declaration (let) (identifier) (=) (reference_expression (&) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) ())) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (-) (integer_literal) (;) (integer_literal) (]))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (integer_literal)) ())) (block ({) (expression_statement (return_expression (return) (type_cast_expression (integer_literal) (as) (primitive_type))) (;)) (})))) (expression_statement (while_expression (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (char_literal) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (index_expression (identifier) ([) (range_expression (identifier) (..) (binary_expression (identifier) (+) (integer_literal))) (])) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (type_cast_expression (integer_literal) (as) (primitive_type))) (;)) (line_comment (//)) (expression_statement (if_expression (if) (parenthesized_expression (() (binary_expression (index_expression (identifier) ([) (identifier) (])) (>=) (type_cast_expression (identifier) (as) (primitive_type))) ())) (block ({) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (parenthesized_expression (() (binary_expression (index_expression (identifier) ([) (identifier) (])) (+) (integer_literal)) ())) (as) (primitive_type))) (;)) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (as) (primitive_type))) (;)) (})))) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ())))) (;)) (line_comment (//)) (})))) (identifier) (}))) (}))))