(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (line_comment (//)) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (let_declaration (let) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (^) (binary_expression (identifier) (*) (type_cast_expression (index_expression (identifier) ([) (identifier) (])) (as) (primitive_type))))) (;)) (})))) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (||) (binary_expression (identifier) (==) (integer_literal))) (||) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (*) (identifier)))) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())))) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (parenthesized_expression (() (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (binary_expression (identifier) (*) (identifier))) (+) (integer_literal)) ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (range_expression (parenthesized_expression (() (binary_expression (identifier) (+) (binary_expression (identifier) (*) (identifier))) ())) (..) (parenthesized_expression (() (binary_expression (identifier) (+) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (*) (identifier))) ()))) (]))) ())))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) ()))) (;)) (})))) (})))) (identifier) (}))) (}))))