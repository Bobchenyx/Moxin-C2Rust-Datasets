(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (,) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (>)))) (,) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (>))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (tuple_pattern (() (identifier) (,) (identifier) ())) ())) (=) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (tuple_expression (() (identifier) (,) (identifier) ()))) ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (unary_expression (*) (identifier)) (==) (identifier)) (&&) (binary_expression (unary_expression (*) (identifier)) (==) (identifier))) (block ({) (expression_statement (return_expression (return) (call_expression (identifier) (arguments (() (tuple_expression (() (unary_expression (*) (identifier)) (,) (unary_expression (*) (identifier)) ())) ())))) (;)) (})))) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (field_expression (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) (,) (unary_expression (*) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (tuple_expression (() (identifier) (,) (identifier) ()))) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (tuple_expression (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (return_expression (return) (call_expression (identifier) (arguments (() (tuple_expression (() (identifier) (,) (identifier) ())) ())))) (;)) (})))) (identifier) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (tuple_type (() (primitive_type) (,) (primitive_type) ()))) (,) (parameter (identifier) (:) (tuple_type (() (primitive_type) (,) (primitive_type) ()))) ())) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (tuple_pattern (() (identifier) (,) (identifier) ())) ())) (=) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (integer_literal)) (,) (field_expression (identifier) (.) (integer_literal)) ())))) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) (,) (tuple_expression (() (identifier) (,) (identifier) ())) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (}))))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (tuple_type (() (primitive_type) (,) (primitive_type) ()))) (,) (parameter (identifier) (:) (tuple_type (() (primitive_type) (,) (primitive_type) ()))) ())) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (field_expression (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (integer_literal)) (,) (field_expression (identifier) (.) (integer_literal)) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (field_expression (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (integer_literal)) (,) (field_expression (identifier) (.) (integer_literal)) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (identifier) ())) (,) (tuple_expression (() (identifier) (,) (identifier) ())) ()))) (;)) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (identifier) (=) (array_expression ([) (array_expression ([) (integer_literal) (,) (integer_literal) (])) (,) (array_expression ([) (integer_literal) (,) (integer_literal) (])) (,) (array_expression ([) (integer_literal) (,) (unary_expression (-) (integer_literal)) (])) (,) (array_expression ([) (unary_expression (-) (integer_literal)) (,) (integer_literal) (])) (])) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (tuple_expression (() (index_expression (identifier) ([) (integer_literal) (])) (,) (index_expression (identifier) ([) (integer_literal) (])) ())) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (_) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (tuple_expression (() (binary_expression (identifier) (+) (index_expression (identifier) ([) (integer_literal) (]))) (,) (binary_expression (identifier) (+) (index_expression (identifier) ([) (integer_literal) (]))) ())) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (tuple_pattern (() (identifier) (,) (identifier) ())) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ())))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (reference_expression (&) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (unary_expression (*) (identifier)) (==) (identifier)) (&&) (binary_expression (unary_expression (*) (identifier)) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (})))) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (identifier) ())) ()))) (;)) (})))) (})))) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (identifier) ())) (,) (tuple_expression (() (identifier) (,) (identifier) ())) ()))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) (,) (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) ())) (,) (tuple_expression (() (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (integer_literal)) (,) (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (integer_literal)) ())) ()))) (;)) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (identifier) ())) (,) (tuple_expression (() (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (integer_literal)) (,) (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (integer_literal)) ())) ()))) (;)) (}))))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (identifier) (}))) (}))))