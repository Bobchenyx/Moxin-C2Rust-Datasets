(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<=) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (>) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (block ({) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (-) (integer_literal)) (,) (binary_expression (identifier) (-) (integer_literal)) ()))) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (<) (index_expression (identifier) ([) (identifier) (])))) (block ({) (assignment_expression (identifier) (=) (identifier)) (})))) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (index_expression (identifier) ([) (range_expression (identifier) (..) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (break_expression (break)) (})) (else_clause (else) (block ({) (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (integer_literal))) (}))))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (boolean_literal (false))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (}))))) (}))) (}))))