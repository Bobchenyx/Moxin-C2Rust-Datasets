(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (mut_pattern (mutable_specifier) (identifier)) ())) (=) (identifier)) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (}))))) (expression_statement (assignment_expression (identifier) (=) (unary_expression (!) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (line_comment (//)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ())))) (;)) (})))) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ())))) (;)) (})))) (identifier) (}))) (}))))