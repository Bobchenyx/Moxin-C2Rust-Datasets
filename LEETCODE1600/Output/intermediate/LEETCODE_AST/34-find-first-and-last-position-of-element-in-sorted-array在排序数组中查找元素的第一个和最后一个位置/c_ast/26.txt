(translation_unit (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (,) (identifier) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<=) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (>>) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (identifier)) ())) (return_statement (return) (identifier) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (identifier)) ())) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)))))) (}))) (return_statement (return) (number_literal) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (identifier)) (,) (identifier) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (>>) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>=) (identifier)) ())) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)))) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (identifier)) (?) (number_literal) (:) (identifier)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (,) (identifier) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) ())) (>>) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (identifier)) ())) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)))) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (number_literal)) ()))))) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (number_literal))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (identifier)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (identifier)) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (}))))