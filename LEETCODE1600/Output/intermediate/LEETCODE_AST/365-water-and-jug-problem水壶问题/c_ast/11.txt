(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (identifier))) (;) (binary_expression (identifier) (!=) (number_literal)) (;) (comma_expression (assignment_expression (identifier) (=) (identifier)) (,) (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (identifier)))) ()) (expression_statement (;))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (<) (identifier)) ())) (return_statement (return) (number_literal) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (||) (binary_expression (identifier) (==) (number_literal))) ())) (return_statement (return) (binary_expression (binary_expression (identifier) (==) (number_literal)) (||) (binary_expression (binary_expression (identifier) (+) (identifier)) (==) (identifier))) (;)) (else_clause (else) (return_statement (return) (binary_expression (binary_expression (identifier) (%) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (==) (number_literal)) (;)))) (}))))