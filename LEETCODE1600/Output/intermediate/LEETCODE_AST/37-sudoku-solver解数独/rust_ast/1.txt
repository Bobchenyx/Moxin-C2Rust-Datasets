(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (])) (=) (integer_literal)) (;)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (])) (=) (integer_literal)) (;)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (return_expression (return) (binary_expression (index_expression (identifier) ([) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (])) (==) (integer_literal))) (;)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (+) (integer_literal)) ()))) (;)) (})))) (})))) (identifier) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) (,) (parameter (mutable_specifier) (identifier) (:) (primitive_type)) (,) (parameter (mutable_specifier) (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (&&) (binary_expression (identifier) (==) (integer_literal))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (!=) (char_literal)) (block ({) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (identifier) (]))) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (&&) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (/) (integer_literal)) ())) (*) (integer_literal)) (+) (binary_expression (identifier) (/) (integer_literal))) (]))) (,) (identifier) ())))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (call_expression (field_expression (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) (,) (integer_literal) ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})))) (})))) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (}))))) (})))) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (!=) (char_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (})))) (expression_statement (return_expression (return) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (identifier) (]))) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (&&) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (/) (integer_literal)) ())) (*) (integer_literal)) (+) (binary_expression (identifier) (/) (integer_literal))) (]))) (,) (identifier) ())))) (block ({) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (/) (integer_literal)) ())) (*) (integer_literal)) (+) (binary_expression (identifier) (/) (integer_literal))) (]))) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (call_expression (field_expression (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) (,) (integer_literal) ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (+) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (boolean_literal (false))) (block ({) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (/) (integer_literal)) ())) (*) (integer_literal)) (+) (binary_expression (identifier) (/) (integer_literal))) (]))) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (char_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break)) (;)) (}))))) (})))) (})))) (expression_statement (return_expression (return) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (!=) (char_literal))) (;)) (}))))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) ())) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (integer_literal) (;) (integer_literal) (])) (;) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (integer_literal) (;) (integer_literal) (])) (;) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (integer_literal) (;) (integer_literal) (])) (;) (integer_literal) (]))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) ())))) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (/) (integer_literal)) ())) (*) (integer_literal)) (+) (binary_expression (identifier) (/) (integer_literal))) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (})))) (})))) (})))) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (integer_literal) (,) (integer_literal) ()))) (;)) (}))) (}))))