(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (as) (primitive_type) (+) (integer_literal) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) (,) (identifier) ())) (=) (tuple_expression (() (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (,) (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (,) (index_expression (identifier) ([) (integer_literal) (])) ())) (;)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (+=) (identifier)) (;)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (-=) (identifier)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (type_cast_expression (identifier) (as) (primitive_type))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (+=) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (identifier) (}))) (}))))