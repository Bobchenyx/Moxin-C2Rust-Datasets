(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (macro_invocation (identifier) (!) (token_tree ([) (])))) (block ({) (assignment_expression (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (])))) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (char_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (char_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (call_expression (identifier) (arguments (() (identifier) (,) (integer_literal) ()))) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (compound_assignment_expr (identifier) (+=) (integer_literal)) (}))))) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (}))))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (call_expression (identifier) (arguments (() (identifier) (,) (integer_literal) ()))) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (string_literal (") (")) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (reference_expression (&) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))))) (;)) (})))) (expression_statement (return_expression (return) (identifier)) (;)) (}))) (}))))