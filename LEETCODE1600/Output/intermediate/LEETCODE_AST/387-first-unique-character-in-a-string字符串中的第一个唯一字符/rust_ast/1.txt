(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (array_expression ([) (integer_literal) (;) (integer_literal) (])) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (char_literal)) ())) (as) (primitive_type)) (])) (+=) (integer_literal)) (;)) (})))) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (char_literal)) ())) (as) (primitive_type)) (])) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (})))) (})))) (unary_expression (-) (integer_literal)) (}))) (}))))