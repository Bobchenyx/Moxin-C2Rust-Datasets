(translation_unit (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (}))) (;)) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (type_qualifier (const)) (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) ())))) ())) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (}))) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (return_statement (return) (number_literal) (;)) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (number_literal) (]))) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (--)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (break_statement (break) (;)) (}))) (}))))) (}))) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (binary_expression (identifier) (-) (number_literal)) (+) (number_literal))) (;)) (comment) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (,) (binary_expression (identifier) (-) (identifier)) ()))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (}))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (;) (assignment_expression (identifier) (+=) (identifier)) ()) (compound_statement ({) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (comment) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (+) (identifier))) (;)) (})))) (}))) (}))) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (;) (assignment_expression (identifier) (+=) (identifier)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (+) (identifier))) (;)) (})))) (}))) (return_statement (return) (identifier) (;)) (}))))