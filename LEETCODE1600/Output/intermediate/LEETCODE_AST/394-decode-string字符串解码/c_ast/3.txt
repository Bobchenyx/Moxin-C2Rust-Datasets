(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (enum_specifier (enum) (enumerator_list ({) (enumerator (identifier)) (,) (enumerator (identifier)) (}))) (type_identifier) (;)) (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (array_declarator (field_identifier) ([) (identifier) (])) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type)) ())))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (null (NULL)) (==) (identifier)) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (null (NULL)) (!=) (pointer_expression (*) (identifier))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (*) (identifier)) ()))) (;)) (}))) (}))) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (return_statement (return) (true) (;)) (else_clause (else) (return_statement (return) (false) (;)))) (}))) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (identifier)) ())) (return_statement (return) (true) (;)) (else_clause (else) (return_statement (return) (false) (;)))) (}))) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (return_statement (return) (false) (;)) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (=) (identifier)) (;)) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (;)) (return_statement (return) (true) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (return_statement (return) (number_literal) (;)) (else_clause (else) (compound_statement ({) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (--)) (;)) (return_statement (return) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (return_statement (return) (number_literal) (;)) (else_clause (else) (compound_statement ({) (return_statement (return) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (number_literal)) (])) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) ()))) (;)) (while_statement (while) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (--) (identifier)) (])) ()))) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (escape_sequence) (")) ()))) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (update_expression (identifier) (--)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (pointer_expression (*) (identifier))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (update_expression (identifier) (++))) (=) (pointer_expression (*) (identifier))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (update_expression (identifier) (--))) (=) (identifier)) (;)) (}))) (}))) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() ())))) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() ())))) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (number_literal) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (escape_sequence) (')) (,) (number_literal) ()))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (escape_sequence) (')) (,) (number_literal) ()))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (pointer_expression (*) (identifier)) ()))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (pointer_expression (*) (identifier))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (*) (identifier)) ()))) (;)) (})))) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (pointer_expression (*) (identifier)) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (pointer_expression (*) (identifier))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (*) (identifier)) ()))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) ())))) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (escape_sequence) (')) (,) (number_literal) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) ())))) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (*) (identifier)) ()))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (})) (else_clause (else) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (})))) (}))))))))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (return_statement (return) (identifier) (;)) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (}))) (comment))