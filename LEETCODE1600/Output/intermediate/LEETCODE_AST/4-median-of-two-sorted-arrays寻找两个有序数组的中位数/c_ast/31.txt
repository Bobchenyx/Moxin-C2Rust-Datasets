(translation_unit (ERROR (update_expression (identifier) (++))) (function_definition (type_identifier) (identifier) (compound_statement ({) (ERROR (comma_expression (binary_expression (binary_expression (identifier) (ERROR (:) (primitive_type) (identifier) (() (identifier)) (<) (identifier)) (>) (pointer_expression (&) (identifier))) (,) (binary_expression (binary_expression (identifier) (<) (identifier)) (>) (pointer_expression (&) (identifier)))) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) ())) (>>) (number_literal))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) ())) (>>) (number_literal))) (;)) (while_statement (while) (parenthesized_expression (() (true) ())) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (return_statement (return) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (])) (;)) (else_clause (else) (return_statement (return) (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (])) (+) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (]))) ())) (*) (number_literal)) (;)))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (return_statement (return) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (])) (;)) (else_clause (else) (return_statement (return) (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (])) (+) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (]))) ())) (*) (number_literal)) (;)))) (}))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (==) (binary_expression (identifier) (-) (number_literal))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (return_statement (return) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (subscript_expression (identifier) ([) (identifier) (])) ()))) (;)) (else_clause (else) (compound_statement ({) (expression_statement (comma_expression (binary_expression (binary_expression (identifier) (<) (identifier)) (>) (assignment_expression (identifier) (=) (ERROR ({)) (subscript_expression (identifier) ([) (identifier) (])))) (,) (subscript_expression (identifier) ([) (identifier) (]))) (ERROR (})) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (number_literal)) (<) (identifier)) ())) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) ()))) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (number_literal)) (<) (identifier)) ())) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) ()))) (;))) (expression_statement (call_expression (identifier) (argument_list (() (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) ()))) (;)) (return_statement (return) (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (*) (number_literal)) (;)) (})))) (}))) (comment) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (identifier)) ())) (>>) (number_literal))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (number_literal)) (,) (binary_expression (identifier) (-) (number_literal)) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (number_literal)) (,) (binary_expression (identifier) (-) (number_literal)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (subscript_expression (identifier) ([) (identifier) (]))) ())) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)))) (}))) (return_statement (return) (number_literal) (;)) (})) (}))) (expression_statement (;)))