(source_file (use_declaration (use) (scoped_use_list (scoped_identifier (identifier) (::) (identifier)) (::) (use_list ({) (identifier) (,) (identifier) (}))) (;)) (use_declaration (use) (scoped_use_list (scoped_identifier (identifier) (::) (identifier)) (::) (use_list ({) (identifier) (,) (identifier) (}))) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (return_expression (return) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ())))) (;)) (})))) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (binary_expression (integer_literal) (*) (identifier)) ())) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) ())) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<=) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (/) (integer_literal)) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (identifier) (})) (else_clause (else) (block ({) (index_expression (identifier) ([) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (/) (integer_literal)) (])) (}))))) (;)) (expression_statement (assignment_expression (identifier) (=) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (identifier) (})) (else_clause (else) (block ({) (index_expression (identifier) ([) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (/) (integer_literal)) (])) (}))))) (;)) (expression_statement (assignment_expression (identifier) (=) (if_expression (if) (binary_expression (identifier) (==) (binary_expression (identifier) (*) (integer_literal))) (block ({) (identifier) (})) (else_clause (else) (block ({) (index_expression (identifier) ([) (binary_expression (identifier) (/) (integer_literal)) (])) (}))))) (;)) (expression_statement (assignment_expression (identifier) (=) (if_expression (if) (binary_expression (identifier) (==) (binary_expression (identifier) (*) (integer_literal))) (block ({) (identifier) (})) (else_clause (else) (block ({) (index_expression (identifier) ([) (binary_expression (identifier) (/) (integer_literal)) (])) (}))))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (integer_literal))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break)) (;)) (}))))))) (})))) (binary_expression (type_cast_expression (parenthesized_expression (() (binary_expression (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ()))) (+) (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ())))) ())) (as) (primitive_type)) (/) (float_literal)) (}))) (}))))