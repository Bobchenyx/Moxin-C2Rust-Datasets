(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_use_list (scoped_identifier (identifier) (::) (identifier)) (::) (use_list ({) (identifier) (,) (identifier) (}))) (;)) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (type_identifier) (block ({) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (self) (.) (field_identifier))) ()))) (}))) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (primitive_type) (block ({) (binary_expression (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) (==) (scoped_identifier (identifier) (::) (identifier))) (}))) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (call_expression (identifier) (arguments (() (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) ()))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (boolean_literal (false)) ()))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (identifier) (*) (identifier)) ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (]))) (}))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (binary_expression (identifier) (-) (integer_literal))) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (}))) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (])) (=) (boolean_literal (true))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (=) (boolean_literal (true))) (;)) (})))) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (integer_literal) (])) ([) (identifier) (]))) (}))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (binary_expression (identifier) (-) (integer_literal))) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (]))) (}))) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (integer_literal) (])) ([) (identifier) (])) (=) (boolean_literal (true))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (])) (=) (boolean_literal (true))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (field_expression (identifier) (.) (field_identifier)) ())))) (;)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (field_expression (identifier) (.) (field_identifier)) (>) (integer_literal)) (&&) (unary_expression (!) (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal))) (,) (field_initializer (field_identifier) (:) (field_expression (identifier) (.) (field_identifier))) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (]))) (}))) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (=) (boolean_literal (true))) (;)) (let_declaration (let) (identifier) (=) (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (-) (identifier))) (;)) (})))) (})))) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (field_expression (identifier) (.) (field_identifier)) (<) (binary_expression (identifier) (-) (integer_literal))) (&&) (unary_expression (!) (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal))) (,) (field_initializer (field_identifier) (:) (field_expression (identifier) (.) (field_identifier))) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (]))) (}))) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (=) (boolean_literal (true))) (;)) (let_declaration (let) (identifier) (=) (index_expression (index_expression (identifier) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (-) (identifier))) (;)) (})))) (})))) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (field_expression (identifier) (.) (field_identifier)) (<) (binary_expression (identifier) (-) (integer_literal))) (&&) (unary_expression (!) (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (])))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (field_expression (identifier) (.) (field_identifier))) (,) (field_initializer (field_identifier) (:) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal))) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (]))) (}))) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (])) (=) (boolean_literal (true))) (;)) (let_declaration (let) (identifier) (=) (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (integer_literal)) (])) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (-) (identifier))) (;)) (})))) (})))) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (field_expression (identifier) (.) (field_identifier)) (>) (integer_literal)) (&&) (unary_expression (!) (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (])))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (field_expression (identifier) (.) (field_identifier))) (,) (field_initializer (field_identifier) (:) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal))) (,) (field_initializer (field_identifier) (:) (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (]))) (}))) ()))) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (])) (=) (boolean_literal (true))) (;)) (let_declaration (let) (identifier) (=) (index_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (integer_literal)) (])) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (-) (identifier))) (;)) (})))) (})))) (})))) (expression_statement (return_expression (return) (identifier)) (;)) (}))) (}))))