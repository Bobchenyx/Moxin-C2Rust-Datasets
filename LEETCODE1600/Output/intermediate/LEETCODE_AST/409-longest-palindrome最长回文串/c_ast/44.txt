(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (return_statement (return) (number_literal) (;))) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (number_literal)) ()))))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (number_literal)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>=) (char_literal (') (character) ('))) ())) (&&) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (char_literal (') (character) ('))) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) (')))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (+=) (number_literal)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>=) (char_literal (') (character) ('))) ())) (&&) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (char_literal (') (character) ('))) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (number_literal) (+) (subscript_expression (identifier) ([) (identifier) (]))) (-) (char_literal (') (character) (')))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (+=) (number_literal)) (;)) (})) (else_clause (else) (compound_statement ({) (})))))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>>) (number_literal)) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (%) (number_literal)) ())) (==) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;))) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (identifier)) (;)) (}))))