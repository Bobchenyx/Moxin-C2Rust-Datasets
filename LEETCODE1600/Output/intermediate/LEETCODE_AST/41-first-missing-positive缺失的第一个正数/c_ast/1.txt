(translation_unit (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (^) (parenthesized_expression (() (pointer_expression (*) (identifier)) ())))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (^) (parenthesized_expression (() (pointer_expression (*) (identifier)) ())))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (^) (parenthesized_expression (() (pointer_expression (*) (identifier)) ())))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (identifier) (;)) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (comment) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (&&) (binary_expression (identifier) (<=) (identifier))) ())) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (]))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (continue_statement (continue) (;)) (}))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (number_literal)) (!=) (identifier)) ())) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (]))) ()))) (;))) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (<=) (number_literal)) (||) (binary_expression (identifier) (>) (identifier))) (||) (binary_expression (binary_expression (identifier) (-) (number_literal)) (==) (identifier))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (}))) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (number_literal)) (!=) (identifier)) ())) (return_statement (return) (binary_expression (identifier) (+) (number_literal)) (;))) (}))) (return_statement (return) (binary_expression (identifier) (+) (number_literal)) (;)) (}))))