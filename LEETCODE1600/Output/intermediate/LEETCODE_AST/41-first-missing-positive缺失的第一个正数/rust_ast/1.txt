(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (loop_expression (loop) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (as) (primitive_type))) (block ({) (expression_statement (break_expression (break)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (binary_expression (integer_literal) (<=) (identifier)) (&&) (binary_expression (identifier) (<=) (type_cast_expression (identifier) (as) (primitive_type)))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (as) (primitive_type)) (])) (==) (identifier)) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (unary_expression (-) (integer_literal))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (as) (primitive_type)) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (unary_expression (-) (integer_literal))) (;)) (expression_statement (break_expression (break)) (;)) (}))))))) (})))) (})))) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (unary_expression (-) (integer_literal))) (block ({) (expression_statement (return_expression (return) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (as) (primitive_type))) (;)) (})))) (})))) (expression_statement (return_expression (return) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (as) (primitive_type))) (;)) (}))) (}))))