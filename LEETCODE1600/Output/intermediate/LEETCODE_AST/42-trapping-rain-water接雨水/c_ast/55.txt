(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (array_declarator (field_identifier) ([) (identifier) (])) (;)) (comment) (field_declaration (primitive_type) (field_identifier) (;)) (comment) (}))) (type_identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (binary_expression (identifier) (-) (number_literal))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (comment) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (])) (=) (identifier)) (;)) (comment) (return_statement (return) (identifier) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (compound_statement ({) (comment) (return_statement (return) (number_literal) (;)) (}))) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (--) (field_expression (identifier) (->) (field_identifier))) (]))) (;)) (comment) (return_statement (return) (identifier) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (return_statement (return) (true) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (binary_expression (identifier) (-) (number_literal))) ())) (comment) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (identifier) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (.) (field_identifier)) ([) (field_expression (identifier) (.) (field_identifier)) (])) (=) (number_literal)) (;)) (comment) (expression_statement (update_expression (field_expression (identifier) (.) (field_identifier)) (++)) (;)) (comment) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (==) (false)) ())) (&&) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (subscript_expression (field_expression (identifier) (.) (field_identifier)) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal)) (])) (])) (<) (subscript_expression (identifier) ([) (identifier) (]))) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (==) (true)) ())) (compound_statement ({) (comment) (break_statement (break) (;)) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (-) (subscript_expression (field_expression (identifier) (.) (field_identifier)) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal)) (]))) (-) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (subscript_expression (identifier) ([) (subscript_expression (field_expression (identifier) (.) (field_identifier)) ([) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal)) (])) (])) ()))) (-) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (assignment_expression (identifier) (+=) (parenthesized_expression (() (binary_expression (identifier) (*) (identifier)) ()))) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (identifier) ()))) (;)) (}))) (comment) (return_statement (return) (identifier) (;)) (}))))