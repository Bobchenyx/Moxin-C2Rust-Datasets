(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (labeled_statement (statement_identifier) (:) (ERROR (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (type_identifier) (identifier)) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (string_literal (") (string_content) ("))) (||) (binary_expression (identifier) (==) (string_literal (") (string_content) (")))) ())) (return_statement (return) (string_literal (") (string_content) (")) (;))) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (>) (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (+) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (+) (number_literal)) (,) (number_literal) ())))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (])) (+=) (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())) (*) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())))) (;)) (}))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (-) (number_literal))) (;)) (binary_expression (identifier) (>) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<) (number_literal)) ())) (continue_statement (continue) (;))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (+=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (/) (number_literal))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (%=) (number_literal)) (;)) (}))) (declaration (type_identifier) (init_declarator (identifier) (=) (string_literal (") ("))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (true)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (number_literal))) ())) (continue_statement (continue) (;))) (expression_statement (assignment_expression (identifier) (=) (false)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (+) (char_literal (') (character) ('))) ()))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (}))) (expression_statement (;)))