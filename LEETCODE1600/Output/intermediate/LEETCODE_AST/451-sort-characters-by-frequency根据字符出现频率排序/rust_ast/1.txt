(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (token_tree (() (integer_literal) (,) (integer_literal) ())) (;) (integer_literal) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (compound_assignment_expr (field_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (.) (integer_literal)) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (field_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (.) (integer_literal)) (=) (identifier)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (,) (identifier) (|)) (call_expression (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (integer_literal))) ())))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (identifier) (block ({) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) ()))) (;)) (})))) (})))) (identifier) (}))) (}))))