(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (unary_expression (*) (identifier)) (+) (unary_expression (*) (identifier))) ()))) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (;)) (expression_statement (compound_assignment_expr (unary_expression (*) (identifier)) (+=) (integer_literal)) (;)) (})))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (parenthesized_expression (() (binary_expression (binary_expression (integer_literal) (-) (unary_expression (*) (identifier))) (-) (unary_expression (*) (identifier))) ()))) ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (identifier)) (;)) (})))) (})))) (})))) (identifier) (}))) (}))))