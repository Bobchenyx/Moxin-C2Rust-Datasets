(translation_unit (expression_statement (identifier) (;)) (preproc_def (#define) (identifier) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (identifier) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (declaration (primitive_type) (identifier) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (number_literal) ())) (||) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (!=) (call_expression (identifier) (argument_list (() (identifier) ())))) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) (])) (++)) (;)) (expression_statement (update_expression (subscript_expression (identifier) ([) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) (])) (--)) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (}))) (return_statement (return) (true) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) ())))))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*))))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()))) ()))))) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) ()))) (==) (true)) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (}))) (}))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()))) ()))))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (update_expression (subscript_expression (identifier) ([) (identifier) (])) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (comment) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (update_expression (subscript_expression (identifier) ([) (identifier) (])) (++)) (;)) (})))) (}))) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (return_statement (return) (identifier) (;)) (}))))