(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (string_literal (") (")) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (;)) (})))) (let_declaration (let) (identifier) (=) (type_cast_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (as) (primitive_type) (]))) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (call_expression (field_expression (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (binary_expression (integer_literal) (*) (identifier)) (-) (identifier)) ())) (as) (primitive_type)) (])) (.) (field_identifier)) (arguments (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (integer_literal)) ()))) (})) (else_clause (else) (block ({) (integer_literal) (})))) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (<) (identifier)) (&&) (binary_expression (binary_expression (identifier) (-) (identifier)) (>) (unary_expression (-) (integer_literal)))) (&&) (binary_expression (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (as) (primitive_type)) (])) (==) (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (as) (primitive_type)) (])))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (+) (identifier)) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (=) (identifier)) (;)) (})))) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (reference_pattern (&) (identifier)) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (range_expression (binary_expression (identifier) (-) (parenthesized_expression (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) ()))) (..) (binary_expression (identifier) (+) (type_cast_expression (identifier) (as) (primitive_type)))) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (reference_pattern (&) (identifier)) (|)) (binary_expression (unary_expression (*) (identifier)) (!=) (char_literal))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (type_identifier) (>))) (arguments (() ())))) (;)) (})))) (})))) (identifier) (}))) (}))))