(translation_unit (comment) (preproc_include (#include) (system_lib_string)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (declaration (primitive_type) (init_declarator (array_declarator (array_declarator (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (initializer_list ({) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (}))) (;)) (declaration (primitive_type) (array_declarator (array_declarator (identifier) ([) (identifier) (])) ([) (identifier) (])) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (true)) (;)) (for_statement (for) (() (;) (;) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (number_literal)) (||) (binary_expression (identifier) (>=) (identifier))) (||) (binary_expression (identifier) (<) (number_literal))) (||) (binary_expression (identifier) (>=) (identifier))) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (false)) (;)) (break_statement (break) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (true)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (,) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (pointer_declarator (*) (identifier))))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (pointer_declarator (*) (identifier))) (=) (null (NULL))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()))) ()))))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (char_literal (') (character) ('))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (char_literal (') (character) ('))) (;)) (})))) (}))) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (pointer_expression (*) (identifier)) (])) (=) (identifier)) (;)) (expression_statement (assignment_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (+=) (number_literal)) (;)) (return_statement (return) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ())))) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (true)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (false)) (;)) (}))) (}))) (function_definition (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) ())))))) (compound_statement ({) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (=) (null (NULL))) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*))))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()))) ()))))) (;)) (expression_statement (assignment_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (number_literal) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (pointer_expression (*) (identifier)) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ())))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) ([) (identifier) (])) (=) (identifier)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))