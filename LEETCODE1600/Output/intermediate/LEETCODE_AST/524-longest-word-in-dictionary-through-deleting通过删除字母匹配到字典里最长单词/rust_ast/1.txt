(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) ())) (->) (type_identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (||) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (return_expression (return) (call_expression (field_expression (string_literal (") (")) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (,) (identifier) (|)) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (return_expression (return) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (;)) (})))) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (reference_expression (&) (parenthesized_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) ()))) (}))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (reference_pattern (&) (identifier)) ())) (in) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (]))) ()))) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (line_comment (//)) (})))) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (closure_expression (closure_parameters (|) (identifier) (|)) (binary_expression (identifier) (+) (integer_literal))) ()))) (;)) (line_comment (//)) (expression_statement (match_expression (match) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (})) (,)) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (line_comment (//)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (index_expression (identifier) ([) (identifier) (])) ())))) (;)) (})) (,)) (})))) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (expression_statement (break_expression (break)) (;)) (}))))) (})))) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (})))) (call_expression (field_expression (string_literal (") (")) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))