(source_file (use_declaration (use) (scoped_identifier (identifier) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (identifier) (=) (type_cast_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (identifier) (=) (type_cast_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (binary_expression (identifier) (-) (identifier)) (>) (identifier)) (&&) (binary_expression (binary_expression (identifier) (-) (identifier)) (>) (identifier))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (-) (binary_expression (integer_literal) (*) (identifier))) ()))) (as) (primitive_type)) ()))) (.) (field_identifier)) (arguments (() (range_expression (binary_expression (identifier) (+) (integer_literal)) (..) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (integer_literal))) ()))) (.) (field_identifier)) (arguments (() (call_expression (field_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (integer_literal)) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (-) (binary_expression (integer_literal) (*) (identifier))) ()))) (as) (primitive_type)) ()))) ()))) (.) (field_identifier)) (arguments (() (call_expression (field_expression (parenthesized_expression (() (range_expression (binary_expression (identifier) (+) (integer_literal)) (..) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (integer_literal))) ())) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (range_expression (identifier) (..) (binary_expression (identifier) (-) (identifier))) ())) (.) (field_identifier)) (arguments (() (call_expression (field_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (integer_literal)) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (binary_expression (binary_expression (identifier) (-) (binary_expression (integer_literal) (*) (identifier))) (-) (integer_literal)) ()))) (as) (primitive_type)) ()))) ()))) (.) (field_identifier)) (arguments (() (call_expression (field_expression (parenthesized_expression (() (range_expression (identifier) (..) (binary_expression (identifier) (-) (identifier))) ())) (.) (field_identifier)) (arguments (() ()))) ()))) (.) (field_identifier)) (arguments (() (call_expression (field_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (binary_expression (binary_expression (identifier) (-) (binary_expression (integer_literal) (*) (identifier))) (-) (integer_literal)) ()))) (as) (primitive_type)) ()))) ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (*) (identifier)) ())) (as) (primitive_type))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ()))) (;)) (})))) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (identifier) (}))) (}))))