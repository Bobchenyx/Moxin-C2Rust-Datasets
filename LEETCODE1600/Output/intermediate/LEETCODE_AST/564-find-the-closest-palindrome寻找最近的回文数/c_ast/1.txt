(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) ())) (preproc_arg)) (type_definition (typedef) (sized_type_specifier (long) (long)) (type_identifier) (;)) (function_definition (storage_class_specifier (static)) (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (array_declarator (identifier) ([) (binary_expression (binary_expression (identifier) (/) (number_literal)) (+) (number_literal)) (])) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (/) (number_literal))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (return_statement (return) (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (comment) (function_definition (storage_class_specifier (static)) (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (comment) (return_statement (return) (number_literal) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (,) (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (identifier)) ())) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (number_literal)) (-) (identifier)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (}))) (})) (else_clause (else) (compound_statement ({) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (identifier)) (])) (=) (char_literal (') (character) ('))) (;)) (}))) (})))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (identifier)) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (return_statement (return) (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (declaration (storage_class_specifier (static)) (primitive_type) (array_declarator (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (;)) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (type_identifier) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (type_identifier) (identifier) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (,) (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (/) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (-) (identifier)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (number_literal)) (,) (binary_expression (identifier) (-) (identifier)) ())))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) (,) (binary_expression (identifier) (-) (identifier)) ())))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (number_literal)) (,) (binary_expression (identifier) (-) (identifier)) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) (,) (binary_expression (identifier) (-) (identifier)) ())))) (;)) (})))))) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (<) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ())))) (?) (identifier) (:) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (==) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ())))) (?) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (:) (identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (,) (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))