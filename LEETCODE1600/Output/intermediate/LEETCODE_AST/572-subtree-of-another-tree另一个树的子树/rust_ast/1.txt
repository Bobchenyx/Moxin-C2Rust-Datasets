(source_file (line_comment (//)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (]))) ()))) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (]))) ()))) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (string_literal (") (string_content) (")) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (string_literal (") (string_content) (")) ()))) (;)) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (line_comment (//)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>))))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (block ({) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (identifier)) (=>) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) ()))) (,)) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (}))) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (}))) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (}))) (}))) (})))) (}))) (}))) (line_comment (//)) (use_declaration (use) (scoped_identifier (scoped_identifier (scoped_identifier (crate) (::) (identifier)) (::) (identifier)) (::) (identifier)) (;)) (struct_item (struct) (type_identifier) (;)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) ()))) (])) (mod_item (mod) (identifier) (declaration_list ({) (use_declaration (use) (use_wildcard (super) (::) (*)) (;)) (use_declaration (use) (scoped_use_list (crate) (::) (use_list ({) (identifier) (,) (identifier) (}))) (;)) (attribute_item (#) ([) (attribute (identifier)) (])) (function_item (fn) (identifier) (parameters (() ())) (block ({) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree (() (integer_literal) (,) (identifier) (!) (token_tree (() (integer_literal) (,) (identifier) (!) (token_tree (() (integer_literal) ())) (,) (identifier) (!) (token_tree (() (integer_literal) ())) ())) (,) (identifier) (!) (token_tree (() (integer_literal) ())) ()))) (;)) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree (() (integer_literal) (,) (identifier) (!) (token_tree (() (integer_literal) ())) (,) (identifier) (!) (token_tree (() (integer_literal) ())) ()))) (;)) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (identifier) (::) (identifier) (token_tree (() (identifier) (,) (identifier) ())) ()))) (;)) (}))) (attribute_item (#) ([) (attribute (identifier)) (])) (function_item (fn) (identifier) (parameters (() ())) (block ({) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree (() (integer_literal) (,) (identifier) (!) (token_tree (() (integer_literal) (,) (identifier) (!) (token_tree (() (integer_literal) ())) (,) (identifier) (!) (token_tree (() (integer_literal) (,) (identifier) (!) (token_tree (() (integer_literal) ())) (,) (identifier) ())) ())) (,) (identifier) (!) (token_tree (() (integer_literal) ())) ()))) (;)) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree (() (integer_literal) (,) (identifier) (!) (token_tree (() (integer_literal) ())) (,) (identifier) (!) (token_tree (() (integer_literal) ())) ()))) (;)) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (!) (identifier) (::) (identifier) (token_tree (() (identifier) (,) (identifier) ())) ()))) (;)) (}))) (}))))