(translation_unit (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (identifier) (;))) (for_statement (for) (() (comma_expression (assignment_expression (identifier) (=) (number_literal)) (,) (assignment_expression (identifier) (=) (number_literal))) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (*) (parenthesized_expression (() (binary_expression (binary_expression (number_literal) (*) (identifier)) (-) (number_literal)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (parenthesized_expression (() (binary_expression (binary_expression (number_literal) (*) (identifier)) (-) (number_literal)) ()))) (+) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (break_statement (break) (;))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (binary_expression (number_literal) (*) (identifier)) (-) (binary_expression (number_literal) (*) (identifier))) (-) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (break_statement (break) (;))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (}))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (binary_expression (binary_expression (identifier) (+) (binary_expression (identifier) (*) (parenthesized_expression (() (binary_expression (binary_expression (number_literal) (*) (identifier)) (-) (number_literal)) ())))) (-) (number_literal)) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (binary_expression (identifier) (*) (parenthesized_expression (() (binary_expression (binary_expression (number_literal) (*) (identifier)) (-) (number_literal)) ())))) (-) (number_literal)) (]))) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (return_statement (return) (identifier) (;)) (}))))