(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (integer_literal)) (||) (binary_expression (identifier) (==) (integer_literal))) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (;)) (let_declaration (let) (identifier) (=) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (%) (parenthesized_expression (() (binary_expression (identifier) (*) (integer_literal)) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (binary_expression (identifier) (-) (integer_literal)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (>) (binary_expression (identifier) (+) (integer_literal))) (block ({) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (integer_literal)) (})) (else_clause (else) (block ({) (integer_literal) (}))))))) (})) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..) (identifier)) ())) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (*) (integer_literal)) ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (identifier) (!=) (integer_literal)) (&&) (binary_expression (identifier) (>=) (identifier))) (&&) (binary_expression (identifier) (!=) (identifier))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (index_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) ()))) (;)) (})))) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (+) (identifier)) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (identifier) (!=) (integer_literal)) (&&) (binary_expression (binary_expression (identifier) (-) (identifier)) (<=) (identifier))) (&&) (binary_expression (identifier) (!=) (identifier))) (block ({) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (index_expression (identifier) ([) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (identifier)) (-) (identifier)) (-) (integer_literal)) (])) ()))) (})))) (})))) (expression_statement (unsafe_block (unsafe) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (})))) (}))) (}))))