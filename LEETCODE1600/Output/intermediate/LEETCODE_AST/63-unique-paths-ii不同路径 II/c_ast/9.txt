(translation_unit (labeled_statement (statement_identifier) (:) (ERROR (number_literal)) (expression_statement (comma_expression (identifier) (,) (identifier)) (;))) (declaration (type_identifier) (identifier) (;)) (ERROR (binary_expression (binary_expression (number_literal) (%) (ERROR (identifier) (identifier) (:) (number_literal) (identifier) (,) (identifier) (identifier) (identifier)) (number_literal)) (%) (identifier)) (identifier) (identifier) (() (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier))) (,) (ERROR (identifier)) (identifier) (,) (ERROR (identifier)) (pointer_declarator (*) (identifier)) ())) (compound_statement ({) (comment) (declaration (sized_type_specifier (long) (primitive_type)) (identifier) (,) (identifier) (;)) (declaration (sized_type_specifier (long) (primitive_type)) (init_declarator (pointer_declarator (*) (pointer_declarator (*) (identifier))) (=) (cast_expression (() (type_descriptor (sized_type_specifier (long) (primitive_type)) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (sized_type_specifier (long) (primitive_type)) (abstract_pointer_declarator (*))) ())) (*) (identifier)) ()))))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (cast_expression (() (type_descriptor (sized_type_specifier (long) (primitive_type)) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (sized_type_specifier (long) (primitive_type))) ())) (*) (parenthesized_expression (() (pointer_expression (*) (identifier)) ()))) ()))))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (number_literal) (])) ([) (number_literal) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (number_literal) (])) ([) (number_literal) (])) (=) (number_literal)) (;)) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (number_literal) (;)) (})))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (==) (number_literal)) (&&) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) ([) (number_literal) (])) (==) (number_literal))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (number_literal)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (=) (number_literal)) (;)) (})))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (subscript_expression (identifier) ([) (number_literal) (])) ([) (identifier) (])) (==) (number_literal)) (&&) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (number_literal) (])) ([) (binary_expression (identifier) (-) (number_literal)) (])) (==) (number_literal))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (number_literal) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (number_literal) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (})))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) ([) (identifier) (])) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (number_literal)) (])))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (})))) (}))) (}))) (return_statement (return) (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) ([) (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) (])) (;)) (})))