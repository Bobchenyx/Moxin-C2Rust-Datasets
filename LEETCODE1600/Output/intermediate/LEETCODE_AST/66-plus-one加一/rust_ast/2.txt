(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal)) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (!=) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (+=) (integer_literal)) (;)) (expression_statement (return_expression (return) (identifier)) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (integer_literal) ()))) (;)) (expression_statement (return_expression (return) (identifier)) (;)) (}))))) (}))))) (})))) (}))) (}))))