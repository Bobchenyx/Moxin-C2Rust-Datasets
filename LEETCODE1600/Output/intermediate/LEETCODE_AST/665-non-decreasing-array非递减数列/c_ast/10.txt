(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (||) (binary_expression (identifier) (==) (number_literal))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (identifier)) ()))))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<=) (binary_expression (identifier) (-) (number_literal))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (=) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (binary_expression (identifier) (-) (number_literal))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<=) (binary_expression (identifier) (-) (number_literal))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (binary_expression (identifier) (-) (number_literal))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (}))) (return_statement (return) (false) (;)) (}))))