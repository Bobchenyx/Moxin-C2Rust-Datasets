(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (number_literal)) ())) (comment) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (false) (;)) (else_clause (else) (return_statement (return) (true) (;)))) (})) (else_clause (else) (comment) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (<) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (]))) ())) (comment) (expression_statement (update_expression (identifier) (++)) (;))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (false) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (<) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])))) ())) (return_statement (return) (false) (;)) (else_clause (else) (expression_statement (update_expression (identifier) (++)) (;)))) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (false) (;)) (else_clause (else) (return_statement (return) (true) (;)))) (})))) (}))))