(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (declaration (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (;)) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (conditional_expression (binary_expression (identifier) (>) (identifier)) (?) (binary_expression (identifier) (+) (number_literal)) (:) (binary_expression (identifier) (+) (number_literal)))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (,) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (,) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (identifier)) ()))))) (;)) (while_statement (while) (parenthesized_expression (() (number_literal) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (char_literal (') (character) ('))) (,) (binary_expression (identifier) (-) (char_literal (') (character) ('))) (,) (identifier) (,) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) ())))) (;)) (comment) (expression_statement (update_expression (identifier) (--)) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (<) (number_literal)) (&&) (binary_expression (identifier) (<) (number_literal))) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (break_statement (break) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (char_literal (') (character) ('))) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (char_literal (') (character) ('))) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (number_literal)) (+) (number_literal)) ()))) ()))))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (binary_expression (identifier) (+) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (]))) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (identifier))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (binary_expression (identifier) (%) (number_literal)) (+) (char_literal (') (character) (')))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (number_literal)) ())) (return_statement (return) (assignment_expression (identifier) (=) (number_literal)) (;))) (return_statement (return) (identifier) (;)) (}))))