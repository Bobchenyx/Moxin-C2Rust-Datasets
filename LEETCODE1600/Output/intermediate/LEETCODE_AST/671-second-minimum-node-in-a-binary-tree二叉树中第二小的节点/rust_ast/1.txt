(source_file (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (match_expression (match) (tuple_expression (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ())) (match_block ({) (match_arm (match_pattern (or_pattern (or_pattern (tuple_pattern (() (identifier) (,) (identifier) ())) (|) (tuple_pattern (() (_) (,) (identifier) ()))) (|) (tuple_pattern (() (identifier) (,) (_) ())))) (=>) (unary_expression (-) (integer_literal)) (,)) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ()))) (=>) (block ({) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (,) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) ())) (;)) (expression_statement (if_expression (if) (parenthesized_expression (() (binary_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (==) (identifier)) ())) (block ({) (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (identifier) (arguments (() (identifier) ()))) ())))) (})))) (expression_statement (if_expression (if) (parenthesized_expression (() (binary_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (==) (identifier)) ())) (block ({) (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (identifier) (arguments (() (identifier) ()))) ())))) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (!=) (unary_expression (-) (integer_literal))) (&&) (binary_expression (identifier) (!=) (unary_expression (-) (integer_literal)))) (block ({) (return_expression (return) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (unary_expression (-) (integer_literal))) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})) (else_clause (else) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (}))))) (}))) (})))) (})) (else_clause (else) (block ({) (unary_expression (-) (integer_literal)) (}))))) (}))) (}))))