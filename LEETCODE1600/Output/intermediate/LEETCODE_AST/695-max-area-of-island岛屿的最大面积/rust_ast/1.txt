(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (primitive_type))) ())) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (token_tree (() (identifier) (,) (identifier) ())) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) ())) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ())) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) ())) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ())) ()))) (;)) (})))) (})))) (})))) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) ())))) (;)) (}))) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (integer_literal)) (block ({) (call_expression (identifier) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (})))) (})))) (})))) (identifier) (}))) (}))))