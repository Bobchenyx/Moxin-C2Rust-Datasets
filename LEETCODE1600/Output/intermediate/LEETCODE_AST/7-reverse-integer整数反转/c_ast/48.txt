(translation_unit (preproc_include (#include) (system_lib_string)) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (sized_type_specifier (long)) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (parenthesized_expression (() (assignment_expression (identifier) (/=) (number_literal)) ())) (!=) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (;)) (comment) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (sized_type_specifier (long) (long)) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (comma_expression (update_expression (identifier) (++)) (,) (update_expression (identifier) (--))) ()) (comment) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (binary_expression (identifier) (/) (cast_expression (() (type_descriptor (primitive_type)) ()) (call_expression (identifier) (argument_list (() (number_literal) (,) (identifier) ())))))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (%=) (number_literal)) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (cast_expression (() (type_descriptor (sized_type_specifier (long) (long))) ()) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (call_expression (identifier) (argument_list (() (number_literal) (,) (identifier) ())))) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (cast_expression (() (type_descriptor (sized_type_specifier (long) (long))) ()) (call_expression (identifier) (argument_list (() (number_literal) (,) (number_literal) ()))))) (||) (binary_expression (identifier) (<) (binary_expression (number_literal) (-) (cast_expression (() (type_descriptor (sized_type_specifier (long) (long))) ()) (call_expression (identifier) (argument_list (() (number_literal) (,) (number_literal) ()))))))) ())) (comment) (return_statement (return) (number_literal) (;))) (}))) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier))) (;)) (return_statement (return) (identifier) (;)) (}))))