(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (,) (identifier) (,) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (&&) (binary_expression (binary_expression (identifier) (-) (number_literal)) (<) (binary_expression (call_expression (identifier) (argument_list (() (number_literal) (,) (number_literal) ()))) (-) (number_literal)))) ())) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (number_literal)) (&&) (binary_expression (binary_expression (identifier) (+) (number_literal)) (>) (binary_expression (unary_expression (-) (call_expression (identifier) (argument_list (() (number_literal) (,) (number_literal) ())))) (+) (number_literal)))) ())) (expression_statement (assignment_expression (identifier) (=) (unary_expression (-) (identifier))) (;)) (comment) (else_clause (else) (return_statement (return) (number_literal) (;)))))) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (%) (number_literal)) (==) (number_literal)) ())) (expression_statement (update_expression (identifier) (++)) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (/) (number_literal)) (>=) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;))))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (number_literal)) ())) (*) (call_expression (identifier) (argument_list (() (number_literal) (,) (identifier) ()))))) (;)) (comment) (break_statement (break) (;)) (})) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)))) (}))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (number_literal))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (-) (identifier))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (?) (identifier) (:) (parenthesized_expression (() (unary_expression (-) (identifier)) ()))) (;)) (comment) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (<=) (binary_expression (call_expression (identifier) (argument_list (() (number_literal) (,) (number_literal) ()))) (/) (call_expression (identifier) (argument_list (() (number_literal) (,) (binary_expression (identifier) (+) (number_literal)) ()))))) (&&) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (!=) (number_literal))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (*) (call_expression (identifier) (argument_list (() (number_literal) (,) (binary_expression (identifier) (+) (number_literal)) ())))) (+) (identifier))) (;)) (comment) (return_statement (return) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (?) (identifier) (:) (parenthesized_expression (() (unary_expression (-) (identifier)) ()))) (;)) (comment) (})) (else_clause (else) (return_statement (return) (number_literal) (;)))))) (comment) (}))))