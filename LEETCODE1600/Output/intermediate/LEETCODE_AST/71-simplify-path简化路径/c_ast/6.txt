(translation_unit (type_definition (typedef) (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (type_identifier)) (;)) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (type_identifier) (field_identifier) (;)) (}))) (;) (type_definition (typedef) (type_identifier) (type_identifier) (;)) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (cast_expression (() (type_descriptor (type_identifier)) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (null (NULL))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (compound_statement ({) (return_statement (return) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (null (NULL))) ())) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (cast_expression (() (type_descriptor (type_identifier)) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (return_statement (return) (true) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (declaration (type_identifier) (init_declarator (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (true) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (return_statement (return) (parenthesized_expression (() (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ())) (;)) (}))) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() ())))) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (identifier)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (null (NULL))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (string_literal (") (string_content) (")) ())))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (!=) (null (NULL))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (string_literal (") (string_content) (")) ()))) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (string_literal (") (string_content) (")) ()))) (==) (number_literal)) ())) (compound_statement ({) (})) (else_clause (else) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (})))))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (null (NULL)) (,) (string_literal (") (string_content) (")) ())))) (;)) (}))) (declaration (type_identifier) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (identifier)) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (string_literal (") (string_content) (")) ()))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (null (NULL))) ())) (compound_statement ({) (declaration (type_qualifier (const)) (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (!=) (null (NULL))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (string_literal (") (string_content) (")) ()))) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (}))) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (return_statement (return) (identifier) (;)) (}))))