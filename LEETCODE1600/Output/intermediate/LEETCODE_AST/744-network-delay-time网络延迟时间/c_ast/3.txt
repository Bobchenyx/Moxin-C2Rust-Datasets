(translation_unit (ERROR (identifier) ([) (])) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (number_literal)) (;)) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (==) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (])) (=) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (]))) (;)) (}))) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (number_literal)) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (])) (>) (binary_expression (subscript_expression (identifier) ([) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (])) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (])) (=) (binary_expression (subscript_expression (identifier) ([) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])) (])) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) (;)) (}))) (}))) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (<) (subscript_expression (identifier) ([) (identifier) (]))) (?) (subscript_expression (identifier) ([) (identifier) (])) (:) (identifier))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))