(source_file (struct_item (struct) (type_identifier) (;)) (line_comment (//)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (identifier) (::) (identifier)) (;)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (type_identifier) (block ({) (call_expression (field_expression (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (self) (.) (field_identifier))) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (|)) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) ())))) ()))) (}))) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (call_expression (identifier) (arguments (() (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) ()))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (=) (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..=) (identifier)) ())) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (_) (|)) (scoped_identifier (identifier) (::) (identifier))) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (integer_literal)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (}))) ()))) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (struct_pattern (type_identifier) ({) (field_pattern (shorthand_field_identifier)) (,) (field_pattern (shorthand_field_identifier)) (})) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (==) (identifier))) ()))) (block ({) (let_declaration (let) (identifier) (=) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (binary_expression (identifier) (+) (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)))) (,) (field_initializer (field_identifier) (:) (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type))) (,) (}))) (;)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (field_expression (identifier) (.) (field_identifier)) (<) (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (]))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (})))) (})))) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (scoped_identifier (identifier) (::) (identifier))) (block ({) (unary_expression (-) (integer_literal)) (})) (else_clause (else) (block ({) (type_cast_expression (unary_expression (*) (identifier)) (as) (primitive_type)) (}))))) (}))) (}))) (line_comment (//)))