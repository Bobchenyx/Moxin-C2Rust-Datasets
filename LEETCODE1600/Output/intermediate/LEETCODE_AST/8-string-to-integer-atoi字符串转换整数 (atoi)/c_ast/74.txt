(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (array_declarator (identifier) ([) (]))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (;)) (declaration (primitive_type) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (char_literal (') (escape_sequence) (')))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (number_literal) ())))) (;)) (return_statement (return) (identifier) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (number_literal) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (identifier) (;))) (return_statement (return) (unary_expression (-) (identifier)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (number_literal) ())))) (;)) (return_statement (return) (identifier) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (array_declarator (identifier) ([) (]))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>=) (char_literal (') (character) (')))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (char_literal (') (character) (')))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())) (<) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())))) (;)) (return_statement (return) (identifier) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())) (>=) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (}))) (}))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))