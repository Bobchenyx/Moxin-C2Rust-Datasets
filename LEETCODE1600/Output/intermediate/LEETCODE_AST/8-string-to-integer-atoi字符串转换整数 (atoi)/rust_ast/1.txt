(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (])) (,) (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (])) (,) (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (])) (,) (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (,) (integer_literal) (])) (]))) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (or_pattern (char_literal) (|) (char_literal))) (=>) (integer_literal) (,)) (match_arm (match_pattern (_)) (=>) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (block ({) (integer_literal) (})) (else_clause (else) (block ({) (integer_literal) (}))))) (}))) (}))) (;)) (expression_statement (assignment_expression (identifier) (=) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (;)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (type_cast_expression (char_literal) (as) (primitive_type))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (&&) (binary_expression (identifier) (>) (binary_expression (parenthesized_expression (() (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (-) (identifier)) ())) (/) (integer_literal)))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (binary_expression (identifier) (==) (unary_expression (-) (integer_literal))) (&&) (binary_expression (identifier) (<) (binary_expression (parenthesized_expression (() (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (-) (binary_expression (identifier) (*) (identifier))) ())) (/) (integer_literal)))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (integer_literal)) (+) (binary_expression (identifier) (*) (identifier)))) (;)) (}))))))) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (char_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (unary_expression (-) (integer_literal))) (;)) (}))))) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (break_expression (break)) (;)) (})))))))) (})))) (identifier) (}))) (}))))