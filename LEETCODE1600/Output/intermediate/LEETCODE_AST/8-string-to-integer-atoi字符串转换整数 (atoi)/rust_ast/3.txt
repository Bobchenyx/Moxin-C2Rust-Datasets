(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (char_literal)) (=>) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (break_expression (break)) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (break_expression (break)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (}))))) (}))))) (})) (,)) (match_arm (match_pattern (char_literal)) (=>) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (break_expression (break)) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (break_expression (break)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (}))))) (}))))) (})) (,)) (match_arm (match_pattern (identifier) (if) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ())))) (=>) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})) (,)) (match_arm (match_pattern (char_literal)) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (continue_expression (continue)) (;)) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break)) (;)) (}))))) (}))) (match_arm (match_pattern (_)) (=>) (block ({) (expression_statement (break_expression (break)) (;)) (})) (,)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (string_literal (") (string_content) (")) ()))) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})) (else_clause (else) (if_expression (if) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (string_literal (") (string_content) (")) ()))) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))))) (empty_statement (;)) (}))))) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (expression_statement (match_expression (match) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (block ({) (identifier) (}))) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (_) ()))) (=>) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (})) (else_clause (else) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (}))))) (}))) (})))) (}))) (}))))