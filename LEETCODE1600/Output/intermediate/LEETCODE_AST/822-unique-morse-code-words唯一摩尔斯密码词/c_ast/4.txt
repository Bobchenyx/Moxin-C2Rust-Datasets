(translation_unit (comment) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (field_identifier)) (;)) (}))) (type_identifier) (;)) (comment) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() ())))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (;))) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (+=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (comment) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (array_declarator (identifier) ([) (]))) (=) (initializer_list ({) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (}))) (;)) (comment) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() ())))) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (subscript_expression (identifier) ([) (cast_expression (() (type_descriptor (primitive_type)) ()) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (char_literal (') (character) ('))) ()))) (]))) (;)) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (call_expression (identifier) (argument_list (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (})))) (comment) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (call_expression (identifier) (argument_list (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (}))))))) (expression_statement (update_expression (++) (identifier)) (;)) (}))) (expression_statement (update_expression (++) (identifier)) (;)) (}))) (comment) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))