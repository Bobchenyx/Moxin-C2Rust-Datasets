(source_file (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (array_type ([) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (;) (integer_literal) (]))) (}))) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) ()))) (])) (struct_item (visibility_modifier (pub)) (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (type_identifier)) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (self) (.) (field_identifier))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (type_cast_expression (char_literal) (as) (primitive_type))) (;)) (let_declaration (let) (identifier) (=) (reference_expression (&) (mutable_specifier) (index_expression (field_expression (identifier) (.) (field_identifier)) ([) (type_cast_expression (identifier) (as) (primitive_type)) (]))) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (scoped_identifier (generic_type (type_identifier) (::) (type_arguments (<) (type_identifier) (>))) (::) (identifier)) ())))) (;)) (})))) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (boolean_literal (true))) (=>) (binary_expression (type_cast_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)) (+) (integer_literal)) (,)) (match_arm (match_pattern (boolean_literal (false))) (=>) (integer_literal)) (})))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (,) (identifier) (|)) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (reference_expression (&) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) ())))) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (;)) (})))) (identifier) (}))) (}))))