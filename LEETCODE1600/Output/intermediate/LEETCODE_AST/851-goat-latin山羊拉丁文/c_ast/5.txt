(translation_unit (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) ())) (preproc_arg)) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (string_literal (") (string_content) ("))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (number_literal) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (number_literal) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (string_literal (") (string_content) (")) ())))) (;)) (while_statement (while) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (number_literal) (<<) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) ())))) ())) (&) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (binary_expression (identifier) (+) (number_literal)) (,) (binary_expression (identifier) (-) (number_literal)) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (number_literal)) (])) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (identifier) (]))) (,) (identifier) ()))) (;)) (})))) (expression_statement (assignment_expression (identifier) (+=) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (char_literal (') (character) ('))) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (char_literal (') (character) ('))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (null (NULL)) (,) (string_literal (") (string_content) (")) ())))) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (}))))