(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (identifier) (=) (array_expression ([) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (])) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (type_identifier))) ())) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (type_identifier))) ())) (block ({) (line_comment (//)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (string_literal (") (string_content) (")) ()))) (;)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (type_identifier))) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (binary_expression (identifier) (+) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (;)) (})))) (}))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (reference_type (&) (primitive_type)) (>))) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (reference_pattern (&) (identifier)) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (range_expression (integer_literal) (..) (integer_literal)) ()))) (.) (field_identifier)) (arguments (() ())))) ())))) (block ({) (expression_statement (call_expression (identifier) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (})))) (empty_statement (;)) (expression_statement (call_expression (identifier) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (expression_statement (call_expression (identifier) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (string_literal (") (string_content) ("))) (;)) (})))) (})))) (identifier) (}))) (}))))