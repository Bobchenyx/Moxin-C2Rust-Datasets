(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (identifier) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (integer_literal)) (||) (binary_expression (identifier) (<) (integer_literal))) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (+) (integer_literal)) ()))) (!=) (identifier)) (&&) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (+) (integer_literal)) ()))) (!=) (identifier))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (/) (integer_literal))) (])) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (%) (integer_literal))) (])) (!=) (integer_literal)) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (/) (integer_literal))) (])) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (%) (integer_literal))) (])) (<) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (/) (integer_literal))) (])) ([) (binary_expression (identifier) (+) (binary_expression (identifier) (%) (integer_literal))) (])) ()))) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (!=) (integer_literal)) (block ({) (line_comment (//)) (expression_statement (continue_expression (continue)) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (]))) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (]))) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (identifier))) (&&) (binary_expression (identifier) (==) (identifier))) (&&) (binary_expression (identifier) (==) (identifier))) (&&) (binary_expression (identifier) (==) (identifier))) (&&) (binary_expression (identifier) (==) (identifier))) (&&) (binary_expression (identifier) (==) (identifier))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (})))) (})))) (identifier) (}))) (}))))