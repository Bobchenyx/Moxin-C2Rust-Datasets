(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (generic_type (type_identifier) (::) (type_arguments (<) (primitive_type) (>))) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (generic_type (type_identifier) (::) (type_arguments (<) (primitive_type) (>))) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (char_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (}))))) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (char_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (}))))) (}))))) (})))) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (char_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (}))))) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (char_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (}))))) (}))))) (})))) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (binary_expression (identifier) (==) (identifier)) (}))) (}))))