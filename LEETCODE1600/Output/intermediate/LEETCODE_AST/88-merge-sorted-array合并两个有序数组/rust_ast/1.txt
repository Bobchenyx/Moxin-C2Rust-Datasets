(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (as) (primitive_type))) (block ({) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) ()))) (;)) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (&&) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) (;)) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..) (binary_expression (identifier) (+) (identifier))) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (identifier)) (||) (binary_expression (binary_expression (identifier) (!=) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (identifier) (]))))) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (=) (index_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (identifier) (})) (else_clause (else) (block ({) (binary_expression (identifier) (-) (integer_literal)) (}))))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (=) (index_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (identifier) (})) (else_clause (else) (block ({) (binary_expression (identifier) (-) (integer_literal)) (}))))) (;)) (}))))) (})))) (}))) (}))))