(translation_unit (declaration (primitive_type) (identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (null (NULL))) (||) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (escape_sequence) (')))) ())) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;))) (comment) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (comment) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (update_expression (++) (identifier)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;))) (comment) (expression_statement (update_expression (++) (identifier)) (;)) (return_statement (return) (parenthesized_expression (() (conditional_expression (identifier) (?) (binary_expression (number_literal) (*) (identifier)) (:) (number_literal)) ())) (;)) (comment) (}))))