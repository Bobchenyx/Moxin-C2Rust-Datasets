(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (:) (primitive_type) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (reference_pattern (&) (identifier)) (|)) (type_cast_expression (identifier) (as) (primitive_type))) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (/) (type_cast_expression (identifier) (as) (primitive_type))) ())) (as) (primitive_type)) (+) (if_expression (if) (binary_expression (binary_expression (identifier) (%) (type_cast_expression (identifier) (as) (primitive_type))) (==) (integer_literal)) (block ({) (integer_literal) (})) (else_clause (else) (block ({) (integer_literal) (}))))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (integer_literal) (,) (closure_expression (closure_parameters (|) (identifier) (,) (identifier) (|)) (binary_expression (binary_expression (identifier) (+) (binary_expression (identifier) (/) (identifier))) (+) (if_expression (if) (binary_expression (binary_expression (identifier) (%) (identifier)) (==) (integer_literal)) (block ({) (integer_literal) (})) (else_clause (else) (block ({) (integer_literal) (})))))) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<=) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (})))) (macro_invocation (identifier) (!) (token_tree (() ()))) (}))) (}))))