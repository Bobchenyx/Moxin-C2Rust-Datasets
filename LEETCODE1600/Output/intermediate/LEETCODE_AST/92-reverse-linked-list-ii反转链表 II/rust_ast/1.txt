(source_file (type_item (type) (type_identifier) (=) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (unary_expression (-) (integer_literal)) ()))) ()))) ()))) (;)) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (type_identifier))) (,) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (type_identifier))) ())) (;)) (expression_statement (unsafe_block (unsafe) (block ({) (let_declaration (let) (identifier) (=) (closure_expression (closure_parameters (|) (parameter (mutable_specifier) (identifier) (:) (pointer_type (*) (mutable_specifier) (type_identifier))) (,) (parameter (identifier) (:) (primitive_type)) (|)) (block ({) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier))) (as) (pointer_type (*) (mutable_specifier) (type_identifier)))) (;)) (})))) (identifier) (}))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (integer_literal) ())))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (unary_expression (*) (identifier)) (==) (identifier)) (||) (binary_expression (identifier) (==) (identifier))) (block ({) (expression_statement (return_expression (return) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (type_identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (type_identifier))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (type_identifier) (=) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (integer_literal)) ()))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (call_expression (identifier) (arguments (() (identifier) (,) (integer_literal) ())))) ())) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (type_identifier)))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (integer_literal) ())))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (reference_expression (&) (mutable_specifier) (identifier)) (as) (pointer_type (*) (mutable_specifier) (type_identifier)))) (;)) (})))) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (field_expression (call_expression (field_expression (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (}))) (}))))