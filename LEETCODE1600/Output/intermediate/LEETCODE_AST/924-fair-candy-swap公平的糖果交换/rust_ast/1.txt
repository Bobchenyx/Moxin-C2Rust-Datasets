(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (/) (integer_literal)) (+) (identifier)) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (])))) (;)) (})))) (})))) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (}))) (}))))