(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (enum_item (enum) (type_identifier) (enum_variant_list ({) (enum_variant (identifier)) (,) (enum_variant (identifier)) (}))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>))) (,) (type_identifier) ())) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (scoped_identifier (identifier) (::) (identifier)) ())) ()))) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (scoped_identifier (identifier) (::) (identifier)) (=) (field_expression (identifier) (.) (integer_literal))) (block ({) (line_comment (//)) (line_comment (//)) (line_comment (//)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (,) (scoped_identifier (identifier) (::) (identifier)) ())) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (call_expression (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) (arguments (() ()))) (,) (scoped_identifier (identifier) (::) (identifier)) ())) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (,) (scoped_identifier (identifier) (::) (identifier)) ())) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) ()))) (;)) (}))))) (})))) (})))) (identifier) (}))) (}))))