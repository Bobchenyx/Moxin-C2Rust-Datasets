(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (line_comment (//)) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (index_expression (identifier) ([) (identifier) (])))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (-) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (tuple_expression (() (index_expression (identifier) ([) (identifier) (])) (,) (identifier) (,) (identifier) ())) (;)) (line_comment (//)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (identifier)) (block ({) (expression_statement (return_expression (return) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (})))) (line_comment (//)) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (index_expression (identifier) ([) (identifier) (])))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (-) (identifier))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (tuple_expression (() (index_expression (identifier) ([) (identifier) (])) (,) (identifier) (,) (binary_expression (identifier) (-) (identifier)) ())) (;)) (line_comment (//)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (line_comment (//)) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (index_expression (identifier) ([) (identifier) (])))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (-) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (field_expression (identifier) (.) (integer_literal))) (block ({) (line_comment (//)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (tuple_expression (() (index_expression (identifier) ([) (identifier) (])) (,) (binary_expression (field_expression (identifier) (.) (integer_literal)) (+) (identifier)) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (integer_literal)) ())))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (tuple_expression (() (index_expression (identifier) ([) (identifier) (])) (,) (binary_expression (field_expression (identifier) (.) (integer_literal)) (+) (identifier)) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (integer_literal)) ())))) (;)) (}))))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (type_cast_expression (identifier) (as) (primitive_type)) (}))))