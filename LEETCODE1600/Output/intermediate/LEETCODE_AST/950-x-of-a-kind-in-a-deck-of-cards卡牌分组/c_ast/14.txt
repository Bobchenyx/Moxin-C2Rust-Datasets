(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (conditional_expression (identifier) (?) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (%) (identifier)) ()))) (:) (identifier)) (;)) (comment) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (declaration (primitive_type) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (update_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (++)) (;))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (subscript_expression (identifier) ([) (identifier) (])) ())))) (;)) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (>) (number_literal)) (?) (true) (:) (false)) (;)) (}))) (ERROR (binary_expression (identifier) (ERROR (ERROR)) (/) (pointer_expression (*) (identifier))) (identifier)) (compound_statement ({) (function_definition (type_identifier) (ERROR (identifier)) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (ERROR (abstract_array_declarator ([) (]))) (identifier)) ()))) (compound_statement ({) (comment) (declaration (primitive_type) (ERROR (array_declarator (identifier) ([) (]))) (init_declarator (identifier) (=) (ERROR (identifier)) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (ERROR (for) (() (declaration (primitive_type) (ERROR (identifier) (:) (identifier) ()) ({)) (array_declarator (identifier) ([) (identifier) (])) (ERROR (++)) (;))) (}))) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (ERROR (for) (() (primitive_type) (ERROR (identifier) (:)) (identifier) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (}))) (})) (return_statement (return) (binary_expression (identifier) (>=) (number_literal)) (;)) (})) (function_definition (type_identifier) (ERROR (identifier)) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (%) (identifier)) ())))) (;)) (}))) (ERROR (}) (type_identifier) (ERROR (ERROR) (identifier)) (function_declarator (identifier) (parameter_list (() (identifier) ()))) (ERROR (:)) (declaration (type_identifier) (init_declarator (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier)) (,) (parameter_declaration (type_identifier)) ())) (ERROR (:)) (identifier)) (=) (ERROR (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (identifier) ()))) (identifier) (number_literal) (ERROR) (number_literal) (identifier)) (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ()))))) (;)) (declaration (type_identifier) (identifier) (;)) (type_identifier) (function_declarator (identifier) (parameter_list (() (ERROR (number_literal) (,)) (parameter_declaration (type_identifier)) (ERROR (+) (number_literal)) ())) (ERROR (:)) (identifier) (identifier) (identifier) (ERROR (%)) (identifier) (ERROR (==) (number_literal) (:) (if)) (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (%) (identifier)) (==) (number_literal)) ()))) (identifier) (identifier) (identifier) (identifier) (ERROR (.)) (call_expression (identifier) (argument_list (() ())))) ()) (:) (identifier) (identifier) (identifier) (ERROR)) (return_statement (return) (identifier) (;)) (return_statement (return) (identifier) (;)))