(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (type_identifier) (field_identifier) (;)) (}))) (type_identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (identifier) (%) (identifier)) ())))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (,) (identifier) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (pointer_expression (&) (field_expression (identifier) (->) (field_identifier))) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ()))) (,) (identifier) ()))) (;)) (}))) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (true)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (false)) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (continue_statement (continue) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (||) (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (%) (identifier)) (!=) (number_literal)) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (})) (return_statement (return) (true) (;)) (}))))