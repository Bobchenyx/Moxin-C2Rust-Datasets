(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (%) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (identifier) (})) (else_clause (else) (block ({) (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ()))) (}))))) (}))) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (integer_literal) (]))) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (reference_expression (&) (identifier)) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (+=) (integer_literal)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (reference_expression (&) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (assignment_expression (identifier) (=) (identifier)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (identifier) ())))) (;)) (}))))) (})))) (})))) (binary_expression (identifier) (>=) (integer_literal)) (}))) (}))))