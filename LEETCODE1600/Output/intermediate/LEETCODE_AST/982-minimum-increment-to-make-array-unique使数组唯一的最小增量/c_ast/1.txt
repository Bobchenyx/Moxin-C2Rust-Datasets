(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (number_literal)) ()))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (++)) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<=) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (number_literal)) ())) (comment) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (number_literal)) ())) (comment) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (>) (identifier)) ())) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (identifier)) (/) (number_literal)))) (;)) (else_clause (else) (comment) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ())) (+) (number_literal)) ())) (*) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ()))) (/) (number_literal)))) (;)) (comment) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (-) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ()))) ())) (*) (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ()))))) (;)) (})))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (<) (identifier)) (&&) (binary_expression (identifier) (!=) (number_literal))) ())) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (number_literal)) (+) (identifier)) (-) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ())))) (;)) (comment) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (number_literal))) (;)))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (}))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (identifier)) (/) (number_literal)))) (;)) (return_statement (return) (identifier) (;)) (}))))