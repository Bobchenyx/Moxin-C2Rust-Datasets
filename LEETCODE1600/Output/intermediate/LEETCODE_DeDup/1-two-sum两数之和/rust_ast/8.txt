(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (-) (integer_literal) (;) (integer_literal) (]))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (reference_pattern (&) (identifier)) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (reference_expression (&) (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ()))) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (block ({) (let_declaration (let) (identifier) (=) (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (integer_literal) (])) (=) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (integer_literal) (])) (=) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (})))) (identifier) (}))))