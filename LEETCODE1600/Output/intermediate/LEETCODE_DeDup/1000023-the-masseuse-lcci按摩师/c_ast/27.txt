(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (subscript_expression (identifier) ([) (number_literal) (])) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (conditional_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>=) (subscript_expression (identifier) ([) (number_literal) (]))) (?) (subscript_expression (identifier) ([) (number_literal) (])) (:) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (conditional_expression (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (]))) (>=) (subscript_expression (identifier) ([) (number_literal) (]))) (?) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (]))) (:) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (conditional_expression (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (]))) (>=) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (])))) (?) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (]))) (:) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (]))))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (subscript_expression (identifier) ([) (number_literal) (])))) (;)) (return_statement (return) (conditional_expression (binary_expression (identifier) (>=) (identifier)) (?) (identifier) (:) (identifier)) (;)) (})) (else_clause (else) (compound_statement ({) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) ())))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) ())))) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (]))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (>) (identifier)) ())) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (>) (identifier)) (?) (identifier) (:) (identifier)) (;)) (})))))))))))) (}))))