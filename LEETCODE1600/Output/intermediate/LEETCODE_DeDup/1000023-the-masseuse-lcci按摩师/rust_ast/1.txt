(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (.) (identifier) (token_tree (() ())) (+) (integer_literal) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (assignment_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (=) (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (binary_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..=) (binary_expression (identifier) (-) (integer_literal))) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (+) (index_expression (identifier) ([) (identifier) (]))) (})) (else_clause (else) (block ({) (index_expression (identifier) ([) (identifier) (])) (}))))) (})))) (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (}))) (}))))