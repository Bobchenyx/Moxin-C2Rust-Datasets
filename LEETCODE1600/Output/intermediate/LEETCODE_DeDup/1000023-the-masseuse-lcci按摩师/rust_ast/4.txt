(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (line_comment (//)) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (return_expression (return) (integer_literal)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (token_tree (() (integer_literal) (,) (integer_literal) ())) (;) (identifier) (]))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (integer_literal) (])) (=) (tuple_expression (() (index_expression (identifier) ([) (integer_literal) (])) (,) (integer_literal) ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (tuple_expression (() (binary_expression (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) (+) (index_expression (identifier) ([) (identifier) (]))) (,) (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) (,) (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) ()))) ()))) (;)) (})))) (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) (,) (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (integer_literal)) ()))) (}))) (line_comment (//)) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (return_expression (return) (integer_literal)) (})))) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (reference_expression (&) (identifier)) ()))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (block ({) (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (binary_expression (index_expression (identifier) ([) (identifier) (])) (+) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (identifier) (+) (integer_literal)) (,) (reference_expression (&) (identifier)) ())))) (,) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ()))) ()))) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (block ({) (index_expression (identifier) ([) (identifier) (])) (})) (else_clause (else) (block ({) (integer_literal) (}))))))) (}))) (}))))