(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (array_declarator (field_identifier) ([) (identifier) (])) (;)) (}))) (type_identifier) (,) (pointer_declarator (*) (type_identifier)) (;)) (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (type_identifier) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (type_identifier) (pointer_declarator (*) (field_identifier)) (;)) (}))) (type_identifier) (,) (pointer_declarator (*) (type_identifier)) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (;)) (comment) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() ())))) (compound_statement ({) (comment) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (goto_statement (goto) (statement_identifier) (;))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (comment) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (field_expression (identifier) (->) (field_identifier))) ())) (goto_statement (goto) (statement_identifier) (;))) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (=) (number_literal)) (;)) (comment) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (field_expression (identifier) (->) (field_identifier))) ())) (goto_statement (goto) (statement_identifier) (;))) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (number_literal) (,) (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))) (;)) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (comment) (labeled_statement (statement_identifier) (:) (if_statement (if) (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ())) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ()))) (;)))) (labeled_statement (statement_identifier) (:) (if_statement (if) (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ())) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ()))) (;)))) (labeled_statement (statement_identifier) (:) (if_statement (if) (parenthesized_expression (() (identifier) ())) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)))) (return_statement (return) (null (NULL)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (==) (binary_expression (identifier) (-) (number_literal))) ())) (return_statement (return) (;))) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (!=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (update_expression (++) (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier))) (])) (=) (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (update_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (--)) (]))) (;)) (}))) (comment) (expression_statement (assignment_expression (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (update_expression (++) (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier))) (])) (=) (identifier)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (return_statement (return) (identifier) (;))) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (!=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (update_expression (++) (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier))) (])) (=) (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (update_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (--)) (]))) (;)) (}))) (comment) (return_statement (return) (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (update_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (--)) (])) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (return_statement (return) (identifier) (;))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (number_literal) (])) (;)) (comment) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (subscript_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) ([) (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (])) (;)) (comment) (})))) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (return_statement (return) (conditional_expression (parenthesized_expression (() (binary_expression (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (==) (number_literal)) (&&) (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (->) (field_identifier)) (==) (number_literal))) ())) (?) (true) (:) (false)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))))