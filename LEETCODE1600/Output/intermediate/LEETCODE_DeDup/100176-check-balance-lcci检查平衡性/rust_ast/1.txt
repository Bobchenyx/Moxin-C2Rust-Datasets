(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (primitive_type) (block ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (+) (integer_literal)) (})) (else_clause (else) (block ({) (integer_literal) (}))))) (}))) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (parenthesized_expression (() (binary_expression (call_expression (identifier) (arguments (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (-) (call_expression (identifier) (arguments (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ())))) ())) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (block ({) (boolean_literal (false)) (})) (else_clause (else) (block ({) (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (&&) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ())))) (}))))) (})) (else_clause (else) (block ({) (boolean_literal (true)) (}))))) (}))) (}))))