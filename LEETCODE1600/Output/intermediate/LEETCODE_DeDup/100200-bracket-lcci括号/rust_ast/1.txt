(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (line_comment (//)) (line_comment (//)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (token_tree (() (string_literal (") (string_content) (")) (.) (identifier) (token_tree (() ())) (,) (integer_literal) (,) (integer_literal) ())) (]))) (;)) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (binary_expression (identifier) (*) (integer_literal))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) (,) (identifier) ())) (in) (identifier) (block ({) (line_comment (//)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ())) ()))) (;)) (})))) (line_comment (//)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (char_literal) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ())) ()))) (;)) (})))) (})))) (})))) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (tuple_pattern (() (identifier) (,) (_) (,) (_) ())) (|)) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))