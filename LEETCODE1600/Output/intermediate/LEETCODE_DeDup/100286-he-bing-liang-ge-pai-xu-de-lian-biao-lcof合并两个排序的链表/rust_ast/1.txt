(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (unary_expression (-) (integer_literal))) (,) (field_initializer (field_identifier) (:) (identifier)) (}))) ()))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (expression_statement (while_expression (while) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (||) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (line_comment (//)) (expression_statement (match_expression (match) (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (identifier) ()))) (=>) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (ref_pattern (ref) (mut_pattern (mutable_specifier) (identifier))) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (})))) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ()))) (=>) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (ref_pattern (ref) (mut_pattern (mutable_specifier) (identifier))) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (})))) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (mut_pattern (mutable_specifier) (identifier)) ())) (,) (tuple_struct_pattern (identifier) (() (mut_pattern (mutable_specifier) (identifier)) ())) ()))) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) (<) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (ref_pattern (ref) (mut_pattern (mutable_specifier) (identifier))) ())) (=) (identifier)) (block ({) (line_comment (//)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (line_comment (//)) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (line_comment (//)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (ref_pattern (ref) (mut_pattern (mutable_specifier) (identifier))) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (}))))) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (identifier) ()))) (=>) (block ({) (})) (,)) (})))) (})))) (expression_statement (return_expression (return) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier))) (;)) (}))))