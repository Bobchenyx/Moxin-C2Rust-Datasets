(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (binary_expression (identifier) (/) (integer_literal))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (+) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (binary_expression (identifier) (+) (identifier)) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (parenthesized_expression (() (range_expression (identifier) (..=) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (})))) (identifier) (}))) (}))))