(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (integer_literal)) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<=) (identifier)) (block ({) (expression_statement (while_expression (while) (binary_expression (identifier) (<=) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (+) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (&&) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (+) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (&&) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (unary_expression (*) (identifier))) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (identifier) (}))) (}))))