(source_file (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (while_expression (while) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (field_expression (identifier) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (}))))) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (unary_expression (!) (identifier))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (identifier) (}))) (}))))