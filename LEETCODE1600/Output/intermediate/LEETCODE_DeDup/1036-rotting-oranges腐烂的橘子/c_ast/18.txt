(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (init_declarator (array_declarator (array_declarator (identifier) ([) (number_literal) (])) ([) (number_literal) (])) (=) (initializer_list ({) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (}))) (;)) (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (declaration (type_identifier) (array_declarator (identifier) ([) (identifier) (])) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() ()))) (compound_statement ({) (return_statement (return) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() ()))) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (<) (number_literal)) ())) (||) (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (<) (number_literal)) ())) (||) (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (return_statement (return) (true) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_identifier) (identifier) (;)) (declaration (type_identifier) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (||) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ()))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (assignment_expression (identifier) (=) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (-) (number_literal))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (number_literal) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (}))) (}))) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() ()))) (==) (false)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (==) (true)) ())) (&&) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ()))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (number_literal)) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (}))) (}))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (}))) (}))) (return_statement (return) (identifier) (;)) (}))))