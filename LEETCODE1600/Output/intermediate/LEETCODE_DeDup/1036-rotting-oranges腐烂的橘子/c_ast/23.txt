(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (comment) (return_statement (return) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (comment) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (for_statement (for) (() (identifier) (;) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>=) (number_literal)) (&&) (binary_expression (identifier) (<) (identifier))) ())) (&&) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>=) (number_literal)) (&&) (binary_expression (identifier) (<) (pointer_expression (*) (identifier)))) ()))) ())) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (comment) (compound_statement ({) (comment) (expression_statement (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (--)) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (++) (identifier)) (])) (=) (identifier)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (})))) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (comment) (expression_statement (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (;))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (declaration (primitive_type) (array_declarator (identifier) ([) (identifier) (])) (;)) (comment) (declaration (primitive_type) (array_declarator (identifier) ([) (identifier) (])) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (identifier) (])) (;)) (comment) (declaration (primitive_type) (array_declarator (identifier) ([) (identifier) (])) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (++) (identifier)) (])) (=) (identifier)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (expression_statement (update_expression (identifier) (++)) (;))))) (})))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (identifier) (;))) (return_statement (return) (number_literal) (;)) (}))))