(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (integer_literal)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (match_expression (match) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (match_block ({) (match_arm (match_pattern (integer_literal)) (=>) (assignment_expression (identifier) (=) (boolean_literal (false))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>) (integer_literal)) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (])) (==) (integer_literal))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>) (integer_literal)) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (==) (integer_literal))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (=) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (])) (==) (integer_literal))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (==) (integer_literal))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (=) (integer_literal)) (;)) (})))) (})) (,)) (match_arm (match_pattern (_)) (=>) (unit_expression (() ())) (,)) (})))) (empty_statement (;)) (})))) (})))) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (unary_expression (-) (integer_literal)) (}))) (}))))