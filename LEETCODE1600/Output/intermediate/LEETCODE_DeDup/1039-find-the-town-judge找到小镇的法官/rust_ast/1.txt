(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (as) (primitive_type) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (-) (integer_literal)) (])) (-=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (-) (integer_literal)) (])) (+=) (integer_literal)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (==) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (return_expression (return) (binary_expression (identifier) (+) (integer_literal))) (;)) (})))) (})))) (unary_expression (-) (integer_literal)) (}))) (}))))