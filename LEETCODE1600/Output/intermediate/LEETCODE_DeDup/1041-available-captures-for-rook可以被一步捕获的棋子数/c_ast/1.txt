(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (break_statement (break) (;)) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (}))) (ERROR (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (escape_sequence) (")) (,) (identifier) (,) (identifier) ()))) (ERROR)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (>) (number_literal)) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (identifier)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (identifier)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (>) (number_literal)) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (<) (number_literal)) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (identifier)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (identifier)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (<) (number_literal)) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))))) (}))) (return_statement (return) (identifier) (;)) (}))))