(translation_unit (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (switch_statement (switch) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (case_statement (case) (number_literal) (:) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (number_literal))) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (continue_statement (continue) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (;)) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (break_statement (break) (;))))))) (}))) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (number_literal))) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (continue_statement (continue) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (;)) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (break_statement (break) (;))))))) (}))) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal))) (;) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (continue_statement (continue) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (;)) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (break_statement (break) (;))))))) (}))) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal))) (;) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (continue_statement (continue) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (;)) (break_statement (break) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (field_expression (identifier) (.) (field_identifier)) (])) (==) (char_literal (') (character) ('))) ())) (break_statement (break) (;))))))) (}))) (break_statement (break) (;))) (}))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (,) (init_declarator (identifier) (=) (pointer_expression (*) (identifier))) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (type_identifier) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (ERROR (break) (ERROR)) (}))))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (identifier) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) ()))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))