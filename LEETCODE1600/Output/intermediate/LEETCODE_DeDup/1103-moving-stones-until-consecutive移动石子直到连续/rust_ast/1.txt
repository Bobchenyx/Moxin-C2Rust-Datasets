(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (,) (identifier) (]))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (integer_literal) (])) (;)) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (integer_literal) (])) (;)) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (integer_literal) (])) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (-) (identifier)) (==) (integer_literal)) (block ({) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (]))) (})) (else_clause (else) (if_expression (if) (binary_expression (binary_expression (binary_expression (identifier) (-) (identifier)) (>) (integer_literal)) (&&) (binary_expression (binary_expression (identifier) (-) (identifier)) (>) (integer_literal))) (block ({) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (identifier) (-) (identifier) (-) (integer_literal) (]))) (})) (else_clause (else) (block ({) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (identifier) (-) (identifier) (-) (integer_literal) (]))) (}))))))) (}))) (}))))