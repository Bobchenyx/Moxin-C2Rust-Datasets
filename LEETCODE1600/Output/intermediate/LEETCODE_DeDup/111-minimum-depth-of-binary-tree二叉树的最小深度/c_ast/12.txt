(translation_unit (comment) (comment) (preproc_def (#define) (identifier) (preproc_arg)) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (comment) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (identifier) (,) (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (identifier) (,) (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (null (NULL))) (&&) (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (null (NULL)))) ())) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (conditional_expression (binary_expression (pointer_expression (*) (identifier)) (>) (identifier)) (?) (identifier) (:) (pointer_expression (*) (identifier)))) (;)) (}))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) (,) (number_literal) ()))) (;)) (comment) (return_statement (return) (conditional_expression (binary_expression (identifier) (<) (identifier)) (?) (identifier) (:) (number_literal)) (;)) (}))))