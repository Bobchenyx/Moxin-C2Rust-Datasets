(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (,) (identifier) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (identifier)) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (true)) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ())))) (;)) (comment) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (subscript_expression (identifier) ([) (identifier) (]))) ())) (comment) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (number_literal)) (;)) (comment) (break_statement (break) (;)) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (comment) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (false)) (;)) (break_statement (break) (;)) (comment) (}))) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (false)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (}))) (}))) (return_statement (return) (identifier) (;)) (}))))