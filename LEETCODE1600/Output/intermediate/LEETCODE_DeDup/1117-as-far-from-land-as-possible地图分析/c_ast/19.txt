(translation_unit (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (;) (preproc_def (#define) (identifier) (preproc_arg)) (declaration (struct_specifier (struct) (type_identifier)) (array_declarator (identifier) ([) (identifier) (])) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (>) (identifier)) (?) (identifier) (:) (identifier))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) (*) (identifier)) ()))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (pointer_expression (*) (identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (number_literal) (,) (number_literal) ()))) (;)) (}))) (}))) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (!=) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (>=) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (-) (number_literal)) (,) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (+) (number_literal)) (,) (number_literal) ()))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (<) (parenthesized_expression (() (binary_expression (identifier) (-) (number_literal)) ()))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (+) (number_literal)) (,) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (+) (number_literal)) (,) (number_literal) ()))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (>=) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (-) (number_literal)) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (+) (number_literal)) (,) (number_literal) ()))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (<) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) ()))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (+) (number_literal)) (,) (binary_expression (field_expression (subscript_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (+) (number_literal)) (,) (number_literal) ()))) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (>) (number_literal)) (?) (binary_expression (identifier) (-) (number_literal)) (:) (number_literal))) (;)) (return_statement (return) (identifier) (;)) (}))))