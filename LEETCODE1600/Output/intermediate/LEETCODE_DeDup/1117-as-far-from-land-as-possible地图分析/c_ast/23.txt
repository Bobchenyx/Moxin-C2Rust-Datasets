(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (type_definition (typedef) (sized_type_specifier (unsigned) (short)) (type_identifier) (;)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (*) (identifier)) (*) (number_literal)) ()))))) (;)) (for_statement (for) (() (declaration (type_identifier) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;))) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (||) (binary_expression (identifier) (==) (binary_expression (identifier) (*) (identifier)))) ())) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (type_identifier) (identifier) (,) (identifier) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ()))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (number_literal)) (||) (binary_expression (identifier) (<) (number_literal))) (||) (binary_expression (identifier) (>=) (identifier))) (||) (binary_expression (identifier) (>=) (identifier))) (||) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) ())) (continue_statement (continue) (;))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (}))) (}))) (}))) (return_statement (return) (identifier) (;)) (}))))