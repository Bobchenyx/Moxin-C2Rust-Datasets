(translation_unit (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (field_identifier)) (;)) (}))) (type_identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (null (NULL))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (null (NULL))) ())) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (array_declarator (array_declarator (identifier) ([) (identifier) (])) ([) (subscript_expression (identifier) ([) (number_literal) (])) (])) (;)) (expression_statement (cast_expression (() (type_descriptor (primitive_type)) ()) (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (identifier) (*) (subscript_expression (identifier) ([) (number_literal) (]))) ())))) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (comment) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (false)) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (init_declarator (array_declarator (array_declarator (identifier) ([) (number_literal) (])) ([) (number_literal) (])) (=) (initializer_list ({) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (}))) (;)) (while_statement (while) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (number_literal) (])))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (number_literal)) (||) (binary_expression (identifier) (>=) (identifier))) (||) (binary_expression (identifier) (<) (number_literal))) (||) (binary_expression (identifier) (>=) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (continue_statement (continue) (;))) (if_statement (if) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ())) (continue_statement (continue) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (true)) (;)) (break_statement (break) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (number_literal)) (;)) (})))) (}))) (if_statement (if) (parenthesized_expression (() (identifier) ())) (break_statement (break) (;))) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (while_statement (while) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (conditional_expression (parenthesized_expression (() (identifier) ())) (?) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (+) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ())))) ())) (:) (number_literal))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (subscript_expression (identifier) ([) (number_literal) (]))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (number_literal)) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (}))) (}))) (}))) (return_statement (return) (identifier) (;)) (}))))