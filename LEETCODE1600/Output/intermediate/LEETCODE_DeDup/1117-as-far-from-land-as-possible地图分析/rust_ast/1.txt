(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ())))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (||) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (==) (binary_expression (identifier) (*) (identifier)))) (block ({) (expression_statement (return_expression (return) (unary_expression (-) (integer_literal))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (loop_expression (loop) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (identifier)) (block ({) (expression_statement (if_expression (if) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (identifier) (,) (tuple_expression (() (identifier) (,) (identifier) ())) ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (})))) (})))) (})))) (})))) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (return_expression (return) (binary_expression (identifier) (-) (integer_literal))) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (tuple_pattern (() (identifier) (,) (identifier) ())) (:) (tuple_type (() (primitive_type) (,) (primitive_type) ()))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (+) (integer_literal)) ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (let_declaration (let) (identifier) (=) (reference_expression (&) (mutable_specifier) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (})))) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (+) (integer_literal)) ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) ([) (identifier) (])) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (index_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) ([) (identifier) (])) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (let_declaration (let) (identifier) (=) (reference_expression (&) (mutable_specifier) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (]))) (;)) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (})))) (identifier) (}))) (}))))