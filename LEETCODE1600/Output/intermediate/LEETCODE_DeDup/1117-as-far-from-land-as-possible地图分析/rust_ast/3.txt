(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (as) (primitive_type) (,) (identifier) (as) (primitive_type) (]))) (,) (integer_literal) ()))) (;)) (})))) (})))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (parenthesized_expression (() (binary_expression (integer_literal) (*) (identifier)) ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (reference_expression (&) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (type_cast_expression (identifier) (as) (primitive_type))) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (expression_statement (if_expression (if) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (!=) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (token_tree ([) (integer_literal) (])) (-) (integer_literal) (,) (identifier) (token_tree ([) (integer_literal) (])) (]))) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (as) (primitive_type)) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (!=) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (token_tree ([) (integer_literal) (])) (+) (integer_literal) (,) (identifier) (token_tree ([) (integer_literal) (])) (]))) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (as) (primitive_type)) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (!=) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (token_tree ([) (integer_literal) (])) (,) (identifier) (token_tree ([) (integer_literal) (])) (-) (integer_literal) (]))) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (as) (primitive_type)) ()))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (!=) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (token_tree ([) (integer_literal) (])) (,) (identifier) (token_tree ([) (integer_literal) (])) (+) (integer_literal) (]))) ()))) (.) (field_identifier)) (arguments (() (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (as) (primitive_type)) ()))) (;)) (})))) (})))) (})))) (expression_statement (if_expression (if) (unary_expression (!) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (unary_expression (-) (integer_literal))) (;)) (})))) (return_expression (return) (type_cast_expression (parenthesized_expression (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) ())) (as) (primitive_type))) (})))) (})))) (identifier) (}))) (}))))