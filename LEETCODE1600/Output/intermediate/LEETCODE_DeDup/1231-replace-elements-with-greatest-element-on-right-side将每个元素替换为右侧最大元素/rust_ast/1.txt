(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (=) (unary_expression (-) (integer_literal))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (;)) (line_comment (//)) (expression_statement (assignment_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (})))) (parenthesized_expression (() (identifier) ())) (}))) (}))))