(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (%) (number_literal)) (==) (number_literal)) (&&) (binary_expression (binary_expression (identifier) (%) (number_literal)) (!=) (number_literal))) ())) (||) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (%) (number_literal)) (==) (number_literal)) ()))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (number_literal) (;)) (})))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (binary_expression (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())) (*) (number_literal)) (+) (binary_expression (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())) (*) (number_literal))) (+) (binary_expression (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())) (*) (number_literal))) (+) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())) (*) (number_literal)) (+) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())) (*) (number_literal)) (+) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (number_literal) (]))) (-) (number_literal)) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (conditional_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (?) (number_literal) (:) (number_literal))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (identifier) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (}))) (return_statement (return) (binary_expression (identifier) (+) (identifier)) (;)) (}))))