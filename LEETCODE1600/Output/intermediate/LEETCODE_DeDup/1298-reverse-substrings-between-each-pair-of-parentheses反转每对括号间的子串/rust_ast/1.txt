(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (enum_item (enum) (type_identifier) (enum_variant_list ({) (enum_variant (identifier) (ordered_field_declaration_list (() (primitive_type) ()))) (,) (enum_variant (identifier) (ordered_field_declaration_list (() (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) ()))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (boolean_literal (false)) (,) (closure_expression (closure_parameters (|) (identifier) (,) (identifier) (|)) (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (char_literal)) (=>) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (match_expression (match) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (scoped_identifier (identifier) (::) (identifier)) (() (char_literal) ()))) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (block ({) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ()))) (})))) (expression_statement (break_expression (break)) (;)) (})) (,)) (match_arm (match_pattern (tuple_struct_pattern (scoped_identifier (identifier) (::) (identifier)) (() (identifier) ()))) (=>) (block ({) (expression_statement (if_expression (if) (unary_expression (!) (identifier)) (block ({) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) ())))) ()))) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) ()))) (;)) (}))))) (})) (,)) (match_arm (match_pattern (tuple_struct_pattern (scoped_identifier (identifier) (::) (identifier)) (() (identifier) ()))) (=>) (block ({) (expression_statement (if_expression (if) (unary_expression (!) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (}))))) (}))) (})))) (empty_statement (;)) (})))) (unary_expression (!) (identifier)) (})) (,)) (match_arm (match_pattern (_)) (=>) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ()))) (;)) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (char_literal)) (=>) (unary_expression (!) (identifier)) (,)) (match_arm (match_pattern (_)) (=>) (identifier)) (})))) (})) (,)) (})))) ()))) (;)) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (string_literal (") (")) ()))) (,) (closure_expression (closure_parameters (|) (identifier) (,) (identifier) (|)) (block ({) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (scoped_identifier (identifier) (::) (identifier)) (() (identifier) ()))) (=>) (call_expression (field_expression (array_expression ([) (identifier) (,) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (type_identifier) (>))) (arguments (() ()))) (])) (.) (field_identifier)) (arguments (() ()))) (,)) (match_arm (match_pattern (tuple_struct_pattern (scoped_identifier (identifier) (::) (identifier)) (() (identifier) ()))) (=>) (call_expression (field_expression (array_expression ([) (identifier) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (])) (.) (field_identifier)) (arguments (() ()))) (,)) (})))) (}))) ()))) (}))) (}))))