(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (reference_type (&) (primitive_type)) (,) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (array_expression ([) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (,) (tuple_expression (() (string_literal (") (string_content) (")) (,) (integer_literal) ())) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (string_literal (") (string_content) (")) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (string_literal (") (string_content) (")) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (range_expression (identifier) (..) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (range_expression (identifier) (..) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (parenthesized_expression (() (identifier) ())) (}))) (}))))