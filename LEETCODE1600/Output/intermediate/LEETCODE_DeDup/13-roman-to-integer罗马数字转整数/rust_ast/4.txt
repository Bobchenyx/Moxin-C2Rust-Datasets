(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (char_literal)) (=>) (integer_literal) (,)) (match_arm (match_pattern (_)) (=>) (macro_invocation (identifier) (!) (token_tree (() ()))) (,)) (}))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (unary_expression (-) (identifier)) (})) (else_clause (else) (block ({) (identifier) (}))))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (identifier) (}))))