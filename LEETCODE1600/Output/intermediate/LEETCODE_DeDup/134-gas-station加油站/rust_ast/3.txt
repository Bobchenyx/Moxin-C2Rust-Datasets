(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (label (') (identifier)) (:) (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (%) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (+) (index_expression (identifier) ([) (identifier) (]))) (-) (index_expression (identifier) ([) (identifier) (])))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (integer_literal)) (block ({) (expression_statement (continue_expression (continue) (label (') (identifier))) (;)) (})))) (})))) (expression_statement (return_expression (return) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (})))) (unary_expression (-) (integer_literal)) (}))))