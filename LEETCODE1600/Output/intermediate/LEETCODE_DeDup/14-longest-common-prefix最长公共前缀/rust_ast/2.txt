(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (loop_expression (loop) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (identifier)) (block ({) (expression_statement (if_expression (if) (parenthesized_expression (() (binary_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (identifier) ()))) (!=) (identifier)) ())) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (})))) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (,)) (match_arm (match_pattern (identifier)) (=>) (break_expression (break)) (,)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (identifier) (}))) (}))))