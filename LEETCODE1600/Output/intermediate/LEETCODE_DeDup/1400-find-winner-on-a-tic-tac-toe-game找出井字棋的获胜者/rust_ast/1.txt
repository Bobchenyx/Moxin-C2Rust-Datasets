(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (array_expression ([) (integer_literal) (;) (integer_literal) (])) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (%) (integer_literal)) (*) (integer_literal)) (-) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (])) (+=) (identifier)) (;)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (binary_expression (type_cast_expression (index_expression (identifier) ([) (integer_literal) (])) (as) (primitive_type)) (+) (integer_literal)) (])) (+=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (unary_expression (*) (identifier)) (==) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (])))) (||) (binary_expression (unary_expression (*) (identifier)) (==) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (]))))) (||) (binary_expression (unary_expression (*) (identifier)) (==) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (]))))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (integer_literal) (])) (+=) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (unary_expression (*) (identifier)) (==) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (])))) (||) (binary_expression (unary_expression (*) (identifier)) (==) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (]))))) (||) (binary_expression (unary_expression (*) (identifier)) (==) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (]))))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (integer_literal) (])) (+=) (identifier)) (;)) (})))) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (unary_expression (-) (integer_literal))) ()))) (block ({) (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) (})) (else_clause (else) (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (integer_literal)) ()))) (block ({) (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) (})) (else_clause (else) (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) (})) (else_clause (else) (block ({) (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) (}))))))))) (}))) (}))))