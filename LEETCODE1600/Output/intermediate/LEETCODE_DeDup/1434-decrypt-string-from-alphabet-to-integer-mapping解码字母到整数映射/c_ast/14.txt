(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (assignment_expression (identifier) (=) (identifier))) (;)) (while_statement (while) (parenthesized_expression (() (number_literal) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) (||) (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (--)) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (pointer_expression (*) (identifier))) (+) (number_literal))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (char_literal (') (escape_sequence) ('))) (;)) (break_statement (break) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (--)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (pointer_expression (*) (identifier))) (-) (number_literal))) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (pointer_expression (*) (identifier))) (-) (number_literal)) ())) (*) (number_literal))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (+=) (number_literal)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (pointer_expression (*) (identifier))) (+) (number_literal))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})))) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (escape_sequence) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (char_literal (') (escape_sequence) ('))) (;)) (break_statement (break) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (pointer_expression (*) (identifier))) (+) (number_literal))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})))))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))