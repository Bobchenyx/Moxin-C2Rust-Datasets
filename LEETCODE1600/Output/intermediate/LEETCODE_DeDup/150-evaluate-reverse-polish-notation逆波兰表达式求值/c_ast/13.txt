(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (conditional_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) (?) (number_literal) (:) (number_literal))) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (subscript_expression (identifier) ([) (identifier) (])) ())) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (]))) (-) (char_literal (') (character) (')))) (;))) (return_statement (return) (conditional_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) (?) (unary_expression (-) (identifier)) (:) (identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (/) (number_literal)) (])) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) ())))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (switch_statement (switch) (parenthesized_expression (() (subscript_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) ([) (number_literal) (])) ())) (compound_statement ({) (case_statement (case) (char_literal (') (character) (')) (:) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (--) (identifier)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (+) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (break_statement (break) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (--) (identifier)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (*) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (break_statement (break) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (--) (identifier)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (/) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (break_statement (break) (;))) (case_statement (case) (char_literal (') (character) (')) (:) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) ([) (number_literal) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (--) (identifier)) (])) (=) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (-) (subscript_expression (identifier) ([) (identifier) (])))) (;)) (break_statement (break) (;)) (})))) (comment) (case_statement (default) (:) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (++) (identifier)) (])) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) ())))) (;))) (})))) (return_statement (return) (subscript_expression (identifier) ([) (number_literal) (])) (;)) (}))))