(translation_unit (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (pointer_expression (*) (identifier)) (^) (pointer_expression (*) (identifier)))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (pointer_expression (*) (identifier)) (^) (pointer_expression (*) (identifier)))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (binary_expression (pointer_expression (*) (identifier)) (^) (pointer_expression (*) (identifier)))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (return_statement (return) (;))) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (parenthesized_expression (() (update_expression (identifier) (++)) ()))) (,) (binary_expression (identifier) (+) (parenthesized_expression (() (update_expression (identifier) (--)) ()))) ()))) (;))) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (,) (identifier) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (identifier)) (||) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (<) (number_literal))) ())) (return_statement (return) (identifier) (;))) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (for_statement (for) (() (comma_expression (assignment_expression (identifier) (=) (number_literal)) (,) (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal)))) (;) (binary_expression (identifier) (<) (identifier)) (;) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (subscript_expression (identifier) ([) (identifier) (]))) ())) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (parenthesized_expression (() (update_expression (identifier) (++)) ()))) (,) (binary_expression (identifier) (+) (parenthesized_expression (() (update_expression (identifier) (--)) ()))) ()))) (;)) (else_clause (else) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (})))) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (assignment_expression (identifier) (=) (number_literal))) (;)) (while_statement (while) (parenthesized_expression (() (number_literal) ())) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (break_statement (break) (;)) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (char_literal (') (character) (')))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (-) (number_literal)) ()))) (;)) (})))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (break_statement (break) (;))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (--)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (number_literal)) ())) (return_statement (return) (identifier) (;))) (comment) (for_statement (for) (() (comma_expression (assignment_expression (identifier) (=) (number_literal)) (,) (comma_expression (assignment_expression (identifier) (=) (number_literal)) (,) (assignment_expression (identifier) (=) (number_literal)))) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (&&) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal)))) (&&) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (!=) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (identifier)) (,) (binary_expression (identifier) (+) (identifier)) ()))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (}))) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (&&) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (==) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))