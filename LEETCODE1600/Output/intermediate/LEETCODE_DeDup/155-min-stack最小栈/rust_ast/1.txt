(source_file (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)) (function_item (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (||) (binary_expression (identifier) (<=) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() ()))))) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (}))))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) ())) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (})))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (unary_expression (*) (identifier)) (})) (else_clause (else) (block ({) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (}))))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (unary_expression (*) (identifier)) (})) (else_clause (else) (block ({) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (}))))) (}))) (}))))