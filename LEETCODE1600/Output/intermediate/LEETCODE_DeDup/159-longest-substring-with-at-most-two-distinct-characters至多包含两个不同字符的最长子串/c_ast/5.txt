(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (identifier)) (||) (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) ()))))) ())) (return_statement (return) (number_literal) (;))) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (identifier) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (identifier) ()))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (++)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (identifier) (>) (number_literal))) ())) (compound_statement ({) (comment) (expression_statement (update_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (--)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (number_literal)) ())))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))