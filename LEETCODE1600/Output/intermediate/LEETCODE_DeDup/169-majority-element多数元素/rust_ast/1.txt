(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (reference_expression (&) (identifier)) (block ({) (let_declaration (let) (identifier) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (+) (integer_literal))) (;)) (}))))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (type_cast_expression (parenthesized_expression (() (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (/) (integer_literal)) ())) (as) (primitive_type))) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (})))) (expression_statement (return_expression (return) (integer_literal)) (;)) (}))) (}))))