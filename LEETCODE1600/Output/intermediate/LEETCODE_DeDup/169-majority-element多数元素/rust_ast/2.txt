(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (match_expression (match) (identifier) (match_block ({) (line_comment (//)) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (}))))) (})) (,)) (line_comment (//)) (match_arm (match_pattern (identifier)) (=>) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (}))) (})))) (})))) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (identifier) (,)) (match_arm (match_pattern (identifier)) (=>) (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) ())))) (})))) (}))) (}))))