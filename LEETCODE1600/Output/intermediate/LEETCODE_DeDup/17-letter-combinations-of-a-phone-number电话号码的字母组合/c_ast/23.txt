(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))))) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (==) (number_literal)) ())) (return_statement (return) (null (NULL)) (;))) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (array_declarator (identifier) ([) (number_literal) (]))) (=) (initializer_list ({) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) ()))))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (parenthesized_expression (() (binary_expression (identifier) (-) (number_literal)) ()))) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) ())) (expression_statement (assignment_expression (identifier) (*=) (number_literal)) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) ())) (expression_statement (assignment_expression (identifier) (*=) (number_literal)) (;))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (identifier)) (;)) (}))) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (pointer_declarator (*) (identifier))) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ())) (*) (identifier)) ()))))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) ()))))) (;))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (/) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (]))) ()))) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (;) (binary_expression (identifier) (<) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (/) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (]))) ()))) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (for_statement (for) (() (;) (binary_expression (identifier) (<) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (cast_expression (() (type_descriptor (type_identifier) (abstract_array_declarator ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (]))) ()) (unary_expression (+) (identifier)))) (*) (parenthesized_expression (() (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (])) ()))) (*) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (/) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (]))) ()))) ()))) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (subscript_expression (subscript_expression (identifier) ([) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) (])) ([) (identifier) (]))) (;)) (comment) (}))) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))