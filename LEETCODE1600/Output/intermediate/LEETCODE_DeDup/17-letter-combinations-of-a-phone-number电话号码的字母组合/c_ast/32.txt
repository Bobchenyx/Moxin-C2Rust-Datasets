(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (field_identifier))) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (comment) (field_declaration (primitive_type) (field_identifier) (;)) (comment) (}))) (type_identifier) (;)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (declaration (primitive_type) (init_declarator (array_declarator (array_declarator (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (initializer_list ({) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (,) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (,) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (,) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (,) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (,) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (,) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (,) (initializer_list ({) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (,) (char_literal (') (character) (')) (})) (}))) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (identifier) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (number_literal) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (return_statement (return) (number_literal) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ())) (*) (identifier)) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (number_literal) (,) (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ())) (*) (identifier)) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (return_statement (return) (number_literal) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (>=) (field_expression (identifier) (->) (field_identifier))) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (=) (identifier)) (;)) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (;)) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (<=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (--)) (;)) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (field_expression (identifier) (->) (field_identifier)) (>=) (field_expression (identifier) (->) (field_identifier))) (||) (binary_expression (field_expression (identifier) (->) (field_identifier)) (<=) (number_literal))) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (number_literal)) ())) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (,) (number_literal) (,) (binary_expression (field_expression (identifier) (->) (field_identifier)) (+) (number_literal)) ()))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (field_expression (identifier) (->) (field_identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) ([) (identifier) (])) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (}))) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (;)) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (==) (identifier)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (return_statement (return) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (field_expression (identifier) (.) (field_identifier)) (])) (-) (char_literal (') (character) (')))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) ()))) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (initializer_pair (field_designator (.) (field_identifier)) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (number_literal))) (,) (initializer_pair (field_designator (.) (field_identifier)) (=) (binary_expression (field_expression (identifier) (.) (field_identifier)) (+) (number_literal))) (}))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (return_statement (return) (;)) (}))) (comment) (function_definition (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (||) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ()))) (||) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) ()))) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (number_literal) (}))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (return_statement (return) (null (NULL)) (;)) (}))) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (number_literal) (}))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (return_statement (return) (field_expression (identifier) (.) (field_identifier)) (;)) (}))))