(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (array_expression ([) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (tuple_expression (() (char_literal) (,) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (,) (char_literal) (]))) ())) (,) (])) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (function_item (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (let_declaration (let) (ref_pattern (ref) (identifier)) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (reference_expression (&) (identifier)) ()))) (;)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (for_expression (for) (mut_pattern (mutable_specifier) (identifier)) (in) (identifier) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (}))))) (})))) (line_comment (//)) (identifier) (}))) (expression_statement (return_expression (return) (call_expression (identifier) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (reference_expression (&) (identifier)) ())))) (;)) (}))) (}))))