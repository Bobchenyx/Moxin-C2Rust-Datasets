(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (char_literal) (,) (char_literal) (,) (char_literal) (,) (char_literal) (]))) (,)) (match_arm (match_pattern (_)) (=>) (macro_invocation (identifier) (!) (token_tree ([) (]))) (,)) (})))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (parameter (identifier) (:) (primitive_type)) (|)) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (.) (field_identifier)) (arguments (() ())))) ()))) (;)) (expression_statement (match_expression (match) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (block ({) (expression_statement (for_expression (for) (identifier) (in) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (}))) (match_arm (match_pattern (identifier)) (=>) (return_expression (return) (identifier)) (,)) (})))) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (for_expression (for) (identifier) (in) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (identifier) (}))) (}))))