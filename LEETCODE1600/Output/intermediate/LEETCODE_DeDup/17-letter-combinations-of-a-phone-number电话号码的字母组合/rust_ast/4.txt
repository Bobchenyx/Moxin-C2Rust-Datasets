(source_file (const_item (const) (identifier) (:) (array_type ([) (reference_type (&) (array_type ([) (primitive_type) (]))) (;) (integer_literal) (])) (=) (array_expression ([) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (,) (string_literal (") (string_content) (")) (])) (;)) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) ()))) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (unsafe_block (unsafe) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (expression_statement (call_expression (identifier) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (integer_literal) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (identifier) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) ())) (block ({) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (index_expression (identifier) ([) (identifier) (])) (-) (char_literal)) ())) (as) (primitive_type)) (])) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (block ({) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (unsafe_block (unsafe) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (}))) ()))) (})) (else_clause (else) (block ({) (call_expression (identifier) (arguments (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ()))) (}))))) (})))) (}))))