(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (field_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (.) (integer_literal)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (tuple_type (() (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (,) (primitive_type) ())) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) (,) (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (+) (integer_literal)) (==) (identifier)) (block ({) (tuple_expression (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ())) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (tuple_expression (() (call_expression (identifier) (arguments (() (identifier) ()))) (,) (binary_expression (identifier) (+) (integer_literal)) ())) (}))))) (})) (else_clause (else) (block ({) (tuple_expression (() (identifier) (,) (integer_literal) ())) (}))))) (}))) (}))))