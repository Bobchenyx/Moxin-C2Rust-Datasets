(translation_unit (comment) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (identifier) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (true)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (identifier)) ())) (compound_statement ({) (switch_statement (switch) (parenthesized_expression (() (subscript_expression (identifier) ([) (identifier) (])) ())) (compound_statement ({) (case_statement (case) (char_literal (') (character) (')) (:) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (subscript_expression (identifier) ([) (identifier) (])) ()))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (case_statement (case) (char_literal (') (character) (')) (:) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) ())))) (&&) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (==) (char_literal (') (character) (')))) ())) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (false)) (;)))) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (case_statement (case) (char_literal (') (character) (')) (:) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (subscript_expression (identifier) ([) (identifier) (])) ()))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (case_statement (case) (char_literal (') (character) (')) (:) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) ())))) (&&) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (==) (char_literal (') (character) (')))) ())) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (false)) (;)))) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (case_statement (case) (char_literal (') (character) (')) (:) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (subscript_expression (identifier) ([) (identifier) (])) ()))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (case_statement (case) (char_literal (') (character) (')) (:) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) ())))) (&&) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (==) (char_literal (') (character) (')))) ())) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) ()))) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (false)) (;)))) (expression_statement (update_expression (identifier) (++)) (;)) (break_statement (break) (;)) (}))) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (&&) (identifier)) ())) (return_statement (return) (true) (;)) (else_clause (else) (return_statement (return) (false) (;)))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (compound_statement ({) (return_statement (return) (pointer_expression (*) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (-) (number_literal)) ()))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (assignment_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (=) (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (=) (identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (-) (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier))) (>=) (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (,) (binary_expression (parenthesized_expression (() (binary_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (+) (identifier)) ())) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (=) (binary_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (+) (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)))) (;)) (expression_statement (assignment_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (+=) (identifier)) (;)) (}))) (expression_statement (assignment_expression (pointer_expression (*) (update_expression (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier)) (++))) (=) (identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (expression_statement (update_expression (--) (field_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (.) (field_identifier))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (==) (field_expression (identifier) (.) (field_identifier))) ())) (return_statement (return) (true) (;)) (else_clause (else) (return_statement (return) (false) (;)))) (}))))