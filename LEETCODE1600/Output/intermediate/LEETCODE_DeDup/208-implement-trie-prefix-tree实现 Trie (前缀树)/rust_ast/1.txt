(source_file (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) ()))) (])) (struct_item (visibility_modifier (pub)) (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (type_identifier)) (,) (}))) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (line_comment (//)) (field_declaration (field_identifier) (:) (array_type ([) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (;) (integer_literal) (]))) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() ())) (->) (type_identifier) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (type_identifier)) ())) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (self) (.) (field_identifier))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (char_literal)) ())) (as) (primitive_type)) (;)) (let_declaration (let) (identifier) (=) (reference_expression (&) (mutable_specifier) (index_expression (field_expression (identifier) (.) (field_identifier)) ([) (identifier) (]))) (;)) (line_comment (//)) (line_comment (//)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (scoped_identifier (generic_type (type_identifier) (::) (type_arguments (<) (type_identifier) (>))) (::) (identifier)) ())))) (;)) (})))) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (boolean_literal (true))) (;)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (call_expression (field_expression (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() (boolean_literal (false)) (,) (closure_expression (closure_parameters (|) (identifier) (|)) (field_expression (identifier) (.) (field_identifier))) ()))) (line_comment (//)) (line_comment (//)) (line_comment (//)) (line_comment (//)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (call_expression (field_expression (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (}))) (line_comment (//) (outer_doc_comment_marker (/)) (doc_comment)) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (reference_type (&) (type_identifier)) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (field_expression (self) (.) (field_identifier))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (char_literal)) ())) (as) (primitive_type)) (;)) (expression_statement (match_expression (match) (reference_expression (&) (index_expression (field_expression (identifier) (.) (field_identifier)) ([) (identifier) (]))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (identifier) ()))) (=>) (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (,)) (match_arm (match_pattern (identifier)) (=>) (return_expression (return) (identifier)) (,)) (})))) (})))) (call_expression (identifier) (arguments (() (identifier) ()))) (}))) (}))))