(translation_unit (comment) (type_definition (typedef) (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (type_identifier)) (;)) (comment) (function_definition (type_identifier) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (null (NULL)) (==) (identifier)) ())) (return_statement (return) (null (NULL)) (;)) (else_clause (else) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (identifier)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (null (NULL))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (}))) (return_statement (return) (identifier) (;)) (})))) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (identifier)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (!=) (null (NULL))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (+) (call_expression (identifier) (argument_list (() (identifier) ()))))) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (expression_statement (;)) (else_clause (else) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)))))) (declaration (type_identifier) (init_declarator (identifier) (=) (identifier)) (;)) (declaration (type_identifier) (init_declarator (identifier) (=) (null (NULL))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (identifier)) (;) (binary_expression (identifier) (!=) (null (NULL))) (;) (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;) (binary_expression (identifier) (!=) (null (NULL))) (;) (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (<) (field_expression (identifier) (->) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (}))) (}))) (}))) (return_statement (return) (identifier) (;)) (}))))