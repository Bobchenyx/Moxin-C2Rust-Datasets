(source_file (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (binary_expression (field_expression (identifier) (.) (field_identifier)) (!=) (identifier)) (block ({) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) (.) (identifier) ()))) (;)) (let_declaration (let) (identifier) (=) (field_expression (identifier) (.) (field_identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) (.) (identifier) ()))) (;)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (primitive_type))) (,) (parameter (identifier) (:) (reference_type (&) (primitive_type))) ())) (->) (type_identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (return_expression (return) (scoped_identifier (identifier) (::) (identifier))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (scoped_identifier (identifier) (::) (identifier))) (;)) (})) (else_clause (else) (block ({) (expression_statement (return_expression (return) (scoped_identifier (identifier) (::) (identifier))) (;)) (}))))))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (identifier) (=) (identifier) (;)) (let_declaration (let) (identifier) (=) (identifier) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (binary_expression (field_expression (identifier) (.) (field_identifier)) (!=) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (let_declaration (let) (identifier) (=) (field_expression (identifier) (.) (field_identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (expression_statement (while_expression (while) (binary_expression (field_expression (identifier) (.) (field_identifier)) (!=) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (let_declaration (let) (identifier) (=) (field_expression (identifier) (.) (field_identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (return_expression (return) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (}))))))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ())))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (}))))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (expression_statement (return_expression (return) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ())))) (;)) (}))))) (}))) (function_item (fn) (identifier) (parameters (() ())) (block ({) (let_declaration (let) (identifier) (=) (call_expression (identifier) (arguments (() (call_expression (identifier) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (]))) ()))) (,) (call_expression (identifier) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (]))) ()))) ()))) (;)) (expression_statement (call_expression (identifier) (arguments (() (identifier) ()))) (;)) (}))))