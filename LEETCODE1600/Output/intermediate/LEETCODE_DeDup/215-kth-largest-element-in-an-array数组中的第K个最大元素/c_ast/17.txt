(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (array_declarator (identifier) ([) (]))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (binary_expression (number_literal) (*) (identifier)) (+) (number_literal))) (;)) (binary_expression (identifier) (<) (identifier)) (;) (comma_expression (assignment_expression (identifier) (=) (identifier)) (,) (assignment_expression (identifier) (=) (binary_expression (binary_expression (number_literal) (*) (identifier)) (+) (number_literal)))) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (<) (identifier)) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>) (subscript_expression (identifier) ([) (identifier) (]))) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (else_clause (else) (break_statement (break) (;)))) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (binary_expression (identifier) (/) (number_literal)) (-) (number_literal))) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<) (subscript_expression (identifier) ([) (identifier) (]))) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (identifier) ()))) (;)) (}))) (return_statement (return) (subscript_expression (identifier) ([) (number_literal) (])) (;)) (}))))