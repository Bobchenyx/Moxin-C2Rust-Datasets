(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (integer_literal) (])) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (<) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (+) (integer_literal)) (>=) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (}))))) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (==) (identifier)) (block ({) (index_expression (identifier) ([) (identifier) (])) (})) (else_clause (else) (if_expression (if) (binary_expression (parenthesized_expression (() (type_cast_expression (identifier) (as) (primitive_type)) ())) (<) (identifier)) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (range_expression (integer_literal) (..) (identifier)) (]))) (,) (identifier) ()))) (})) (else_clause (else) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (range_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (..) (identifier)) (]))) (,) (binary_expression (binary_expression (identifier) (-) (type_cast_expression (identifier) (as) (primitive_type))) (-) (integer_literal)) ()))) (}))))))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (identifier) (=) (type_cast_expression (parenthesized_expression (() (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (type_cast_expression (identifier) (as) (primitive_type))) ())) (as) (primitive_type)) (;)) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (index_expression (identifier) ([) (range_expression (..)) (]))) (,) (identifier) ()))) (}))) (}))))