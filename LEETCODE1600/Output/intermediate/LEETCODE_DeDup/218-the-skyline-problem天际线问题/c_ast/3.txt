(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (string_literal (") (string_content) ("))) (preproc_include (#include) (string_literal (") (string_content) ("))) (preproc_include (#include) (string_literal (") (string_content) ("))) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (comment) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (declaration (storage_class_specifier (static)) (primitive_type) (init_declarator (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())) (identifier) (ERROR (*)) (identifier)) (=) (pointer_expression (*) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (identifier)))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (ERROR (})) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (identifier) (,) (field_expression (identifier) (->) (field_identifier)) ()))))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (pointer_expression (*) (parenthesized_expression (() (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (identifier)) ())))) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (pointer_expression (*) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (identifier))) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (==) (identifier)) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (pointer_expression (*) (parenthesized_expression (() (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (identifier)) ())))) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (pointer_expression (*) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (identifier))) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (<) (identifier)) ())) (compound_statement ({) (comment) (return_statement (return) (number_literal) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (return_statement (return) (pointer_expression (*) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))))) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) ())))) (;)) (return_statement (return) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) ()))) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (null (NULL)) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (call_expression (identifier) (argument_list (() (identifier) (,) (null (NULL)) (,) (pointer_expression (&) (identifier)) ()))) (;)) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) ()))) (;)) (})))) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (null (NULL)) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (,) (null (NULL)) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (})) (else_clause (else) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (})))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (initializer_list ({) (identifier) (,) (identifier) (}))) (;)) (declaration (type_identifier) (identifier) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (cast_expression (() (type_descriptor (primitive_type)) ()) (call_expression (identifier) (argument_list (() (identifier) ()))))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (pointer_expression (&) (identifier)) (,) (identifier) ()))) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;) (binary_expression (identifier) (!=) (null (NULL))) (;) (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (conditional_expression (field_expression (identifier) (->) (field_identifier)) (?) (char_literal (') (character) (')) (:) (char_literal (') (character) ('))) (,) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (number_literal) (])) (,) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (number_literal) (])) (,) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (number_literal) (])) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (identifier)) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (}))) (}))) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (escape_sequence) (")) (,) (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;) (binary_expression (identifier) (!=) (null (NULL))) (;) (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (identifier)) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (!=) (null (NULL))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (identifier) (<) (identifier))) ())) (compound_statement ({) (comment) (expression_statement (call_expression (identifier) (argument_list (() (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (,) (identifier) ()))) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (}))) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (*) (identifier)) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (identifier)) (;) (binary_expression (identifier) (!=) (null (NULL))) (;) (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (,) (identifier) ()))) (;)) (}))) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (type_identifier) (identifier) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ([) (number_literal) (])) (==) (number_literal)) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ()))) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;) (binary_expression (identifier) (!=) (null (NULL))) (;) (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (comment) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (field_expression (identifier) (.) (field_identifier)) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (!=) (identifier)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) ()))) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ([) (number_literal) (])) (==) (number_literal)) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (,) (identifier) ()))) (;)) (}))) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) ()))))) (compound_statement ({) (declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier))) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_identifier) (identifier) (;)) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (number_literal) (,) (number_literal) ())))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (number_literal) ())))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (while_statement (while) (parenthesized_expression (() (unary_expression (!) (call_expression (identifier) (argument_list (() (identifier) ())))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ([) (number_literal) (])) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ([) (number_literal) (])) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (==) (number_literal)) (||) (binary_expression (pointer_expression (*) (identifier)) (==) (number_literal))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>=) (subscript_expression (identifier) ([) (number_literal) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<=) (subscript_expression (identifier) ([) (number_literal) (])))) (&&) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (<=) (subscript_expression (identifier) ([) (number_literal) (])))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (return_statement (return) (number_literal) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ([) (number_literal) (])) (==) (number_literal)) ())) (compound_statement ({) (continue_statement (continue) (;)) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (,) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ([) (number_literal) (])) (=) (number_literal)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (,) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) ([) (number_literal) (])) (=) (number_literal)) (;)) (}))))) (}))) (}))) (return_statement (return) (number_literal) (;)) (}))) (comment) (function_definition (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) ()))))) (compound_statement ({) (declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier))) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (declaration (type_identifier) (pointer_declarator (*) (identifier)) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (,) (null (NULL)) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (declaration (type_identifier) (init_declarator (identifier) (=) (initializer_list ({) (number_literal) (,) (number_literal) (}))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) ()))) (;)) (})) (else_clause (else) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ())) (,) (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (pointer_expression (*) (identifier)) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (})))) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))