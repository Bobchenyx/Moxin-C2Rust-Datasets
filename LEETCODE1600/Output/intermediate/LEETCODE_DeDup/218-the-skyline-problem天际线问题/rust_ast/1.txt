(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) (,) (primitive_type) ())) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (index_expression (identifier) ([) (integer_literal) (])) (,) (integer_literal) (,) (index_expression (identifier) ([) (integer_literal) (])) ())) ()))) (;)) (line_comment (//)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (index_expression (identifier) ([) (integer_literal) (])) (,) (integer_literal) (,) (index_expression (identifier) ([) (integer_literal) (])) ())) ()))) (;)) (line_comment (//)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (::) (identifier)) (arguments (() ()))) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (::) (identifier)) (arguments (() ()))) (;)) (line_comment (//)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (integer_literal) ()))) (;)) (line_comment (//)) (expression_statement (for_expression (for) (reference_pattern (&) (tuple_pattern (() (identifier) (,) (identifier) (,) (identifier) ()))) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (line_comment (//)) (expression_statement (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (compound_assignment_expr (unary_expression (*) (identifier)) (+=) (integer_literal))) ()))) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (;)) (})) (else_clause (else) (block ({) (line_comment (//)) (expression_statement (compound_assignment_expr (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ())))) (-=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (reference_expression (&) (identifier)) (])) (==) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (})))) (}))))) (line_comment (//)) (line_comment (//)) (line_comment (//)) (let_declaration (let) (identifier) (=) (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (})))) (})))) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (tuple_pattern (() (identifier) (,) (identifier) ())) (|)) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (])))) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (!=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (index_expression (identifier) ([) (integer_literal) (]))) (;)) (boolean_literal (true)) (})) (else_clause (else) (block ({) (boolean_literal (false)) (}))))) (}))) ()))) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))