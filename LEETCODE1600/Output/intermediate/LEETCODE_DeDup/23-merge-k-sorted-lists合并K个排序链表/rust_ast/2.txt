(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (tuple_pattern (() (identifier) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (integer_literal) ())) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (binary_expression (identifier) (-) (identifier))) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) ())))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (*) (integer_literal))) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (*=) (integer_literal)) (;)) (})))) (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (let_condition (let) (identifier) (=) (identifier)) (block ({) (line_comment (//)) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (let_condition (let) (identifier) (=) (identifier)) (block ({) (line_comment (//)) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (expression_statement (loop_expression (loop) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (if_expression (if) (let_condition (let) (identifier) (=) (identifier)) (block ({) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) ()))) ())))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (break_expression (break)) (;)) (})) (else_clause (else) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (})))))) (expression_statement (if_expression (if) (let_condition (let) (identifier) (=) (identifier)) (block ({) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) ()))) ()))) ())))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (break_expression (break)) (;)) (})) (else_clause (else) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (field_expression (identifier) (.) (field_identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (})))) (})))))) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ()))) ())))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (integer_literal)) (=>) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (;)) (}))) (,)) (match_arm (match_pattern (integer_literal)) (=>) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (;)) (}))) (,)) (match_arm (match_pattern (_)) (=>) (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) ()))) (,)) (})))) (line_comment (//)) (})))) (identifier) (}))) (}))))