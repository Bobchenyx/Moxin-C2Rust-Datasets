(source_file (use_declaration (use) (scoped_use_list (scoped_identifier (identifier) (::) (identifier)) (::) (use_list ({) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (}))) (;)) (use_declaration (use) (scoped_use_list (identifier) (::) (use_list ({) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (}))) (;)) (use_declaration (use) (scoped_use_list (scoped_identifier (identifier) (::) (identifier)) (::) (use_list ({) (identifier) (,) (identifier) (}))) (;)) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (primitive_type) (block ({) (binary_expression (field_expression (self) (.) (field_identifier)) (==) (field_expression (identifier) (.) (field_identifier))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (primitive_type) (block ({) (binary_expression (field_expression (self) (.) (field_identifier)) (!=) (field_expression (identifier) (.) (field_identifier))) (}))) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (call_expression (identifier) (arguments (() (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) ()))) ()))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (primitive_type) (block ({) (binary_expression (field_expression (self) (.) (field_identifier)) (<) (field_expression (identifier) (.) (field_identifier))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (primitive_type) (block ({) (binary_expression (field_expression (self) (.) (field_identifier)) (<=) (field_expression (identifier) (.) (field_identifier))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (primitive_type) (block ({) (binary_expression (field_expression (self) (.) (field_identifier)) (>) (field_expression (identifier) (.) (field_identifier))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (primitive_type) (block ({) (binary_expression (field_expression (self) (.) (field_identifier)) (>=) (field_expression (identifier) (.) (field_identifier))) (}))) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (type_identifier) (block ({) (call_expression (field_expression (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() ()))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (shorthand_field_initializer (identifier)) (,) (shorthand_field_initializer (identifier)) (}))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) (,) (identifier) ()))) ()))) ()))) (;)) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) ()))) ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (index_expression (identifier) ([) (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) (]))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (identifier) (.) (field_identifier)) (,) (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) ()))) ()))) ()))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (field_expression (field_expression (identifier) (.) (integer_literal)) (.) (field_identifier)) (])) (=) (reference_expression (&) (field_expression (identifier) (.) (field_identifier)))) (;)) (})))) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier)))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (}))))) (})))) (identifier) (}))) (}))))