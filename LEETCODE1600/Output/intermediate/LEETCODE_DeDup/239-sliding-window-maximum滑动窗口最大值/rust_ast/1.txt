(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (macro_invocation (identifier) (!) (token_tree (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (||) (binary_expression (identifier) (==) (integer_literal))) (||) (binary_expression (identifier) (>) (parenthesized_expression (() (type_cast_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)) ())))) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (line_comment (//)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (type_cast_expression (unary_expression (*) (identifier)) (as) (primitive_type)) (]))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break)) (;)) (}))))) (})))) (let_declaration (let) (identifier) (:) (primitive_type) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (line_comment (//)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (==) (binary_expression (identifier) (-) (identifier))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (index_expression (identifier) ([) (type_cast_expression (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (as) (primitive_type)) (])) ()))) (;)) (})))) (})))) (identifier) (}))) (}))))