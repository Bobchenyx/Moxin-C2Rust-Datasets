(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (return_expression (return) (identifier)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (pointer_type (*) (mutable_specifier) (type_identifier)) (=) (reference_expression (&) (mutable_specifier) (identifier)) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (unsafe_block (unsafe) (block ({) (let_declaration (let) (identifier) (=) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (block ({) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier))) (})) (else_clause (else) (block ({) (break_expression (break)) (}))))) (;)) (let_declaration (let) (identifier) (=) (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (block ({) (reference_expression (&) (mutable_specifier) (field_expression (identifier) (.) (field_identifier))) (})) (else_clause (else) (block ({) (break_expression (break)) (})))) (;)) (expression_statement (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (})))) (})))) (identifier) (}))))