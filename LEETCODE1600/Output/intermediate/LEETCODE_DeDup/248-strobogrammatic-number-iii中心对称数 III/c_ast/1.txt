(translation_unit (preproc_include (#include) (system_lib_string)) (declaration (storage_class_specifier (static)) (type_qualifier (const)) (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (storage_class_specifier (static)) (type_qualifier (const)) (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (storage_class_specifier (static)) (type_qualifier (const)) (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (storage_class_specifier (static)) (type_qualifier (const)) (primitive_type) (init_declarator (array_declarator (identifier) ([) (])) (=) (initializer_list ({) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (,) (number_literal) (}))) (;)) (declaration (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (;)) (declaration (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (;)) (declaration (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ())) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;))) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (true) ())))) (;)) (expression_statement (assignment_expression (identifier) (-=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (false) ())))) (;)) (return_statement (return) (conditional_expression (binary_expression (identifier) (>) (number_literal)) (?) (identifier) (:) (number_literal)) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (;) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (char_literal (') (escape_sequence) ('))) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (-=) (char_literal (') (character) ('))) (;))) (return_statement (return) (identifier) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (binary_expression (binary_expression (identifier) (/) (number_literal)) (>=) (number_literal)) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (return_statement (return) (binary_expression (binary_expression (identifier) (%) (number_literal)) (==) (number_literal)) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (binary_expression (identifier) (/) (number_literal)) (-) (number_literal))) (;)) (return_statement (return) (conditional_expression (binary_expression (identifier) (>) (number_literal)) (?) (identifier) (:) (number_literal)) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (identifier) (*=) (number_literal)) (;))) (return_statement (return) (identifier) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (*=) (conditional_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (?) (number_literal) (:) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (*=) (conditional_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (?) (number_literal) (:) (number_literal))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (return_statement (return) (binary_expression (identifier) (*) (call_expression (identifier) (argument_list (() (number_literal) (,) (identifier) ())))) (;)) (}))) (function_definition (storage_class_specifier (static)) (storage_class_specifier (inline)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_qualifier (const)) (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (;) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<) (identifier))) (;) (update_expression (identifier) (++)) ()) (expression_statement (;))) (return_statement (return) (identifier) (;)) (}))) (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (conditional_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (?) (number_literal) (:) (number_literal))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (/) (sizeof_expression (sizeof) (parenthesized_expression (() (subscript_expression (identifier) ([) (number_literal) (])) ())))) (,) (subscript_expression (identifier) ([) (number_literal) (])) ())))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (identifier) (*) (call_expression (identifier) (argument_list (() (number_literal) (,) (identifier) ())))) (*) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (number_literal) (])) (])) (==) (number_literal)) ())) (comment) (return_statement (return) (identifier) (;))) (}))) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (/) (sizeof_expression (sizeof) (parenthesized_expression (() (subscript_expression (identifier) ([) (number_literal) (])) ())))) (,) (subscript_expression (identifier) ([) (binary_expression (number_literal) (+) (identifier)) (])) ())))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (identifier) (*) (call_expression (identifier) (argument_list (() (number_literal) (,) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) ())))) (*) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (binary_expression (number_literal) (+) (identifier)) (])) (])) (==) (number_literal)) ())) (comment) (return_statement (return) (identifier) (;))) (}))) (comment) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) (/) (sizeof_expression (sizeof) (parenthesized_expression (() (subscript_expression (identifier) ([) (number_literal) (])) ())))) (,) (subscript_expression (identifier) ([) (binary_expression (identifier) (/) (number_literal)) (])) ())))) (;)) (expression_statement (assignment_expression (identifier) (+=) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (binary_expression (identifier) (/) (number_literal)) (])) (])) (!=) (subscript_expression (identifier) ([) (binary_expression (identifier) (/) (number_literal)) (]))) ())) (comment) (return_statement (return) (identifier) (;))) (}))) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (return_statement (return) (identifier) (;))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (])) (<) (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (binary_expression (number_literal) (+) (identifier)) (])) (]))) ())) (return_statement (return) (identifier) (;)))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (<) (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (number_literal) (])) (]))) ())) (return_statement (return) (identifier) (;))) (return_statement (return) (binary_expression (identifier) (+) (number_literal)) (;)) (}))))