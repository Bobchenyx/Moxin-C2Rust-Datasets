(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (const_item (const) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (const_item (const) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (const_item (const) (identifier) (:) (array_type ([) (primitive_type) (;) (identifier) (])) (=) (array_expression ([) (integer_literal) (,) (integer_literal) (,) (integer_literal) (])) (;)) (const_item (const) (identifier) (:) (array_type ([) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (;) (identifier) (])) (=) (array_expression ([) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (])) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (]))) ()))) ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..=) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (if_expression (if) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (&) (integer_literal)) ())) (==) (integer_literal)) (block ({) (binary_expression (identifier) (/) (integer_literal)) (})) (else_clause (else) (block ({) (binary_expression (binary_expression (identifier) (/) (integer_literal)) (-) (integer_literal)) (})))) (as) (primitive_type)) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (integer_literal) (,) (integer_literal) (,) (identifier) (,) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (as) (primitive_type)) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (type_cast_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>)))) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (identifier)) (||) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (&&) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (&) (integer_literal)) ())) (==) (integer_literal)) ()))) ()))) (block ({) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (reference_expression (&) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (binary_expression (identifier) (-) (identifier)) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (identifier) ()))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (identifier) (+) (binary_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (*) (identifier))) (+) (binary_expression (parenthesized_expression (() (unary_expression (*) (identifier)) ())) (*) (identifier))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>) (identifier)) (||) (binary_expression (binary_expression (identifier) (+) (identifier)) (<=) (identifier))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) (,) (identifier) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (})) (else_clause (else) (if_expression (if) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (&&) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (&) (integer_literal)) ())) (==) (integer_literal)) ()))) (block ({) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (binary_expression (identifier) (*) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (binary_expression (identifier) (-) (identifier)) ()))))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>) (identifier)) (||) (binary_expression (identifier) (<) (identifier))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) (,) (identifier) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (})) (else_clause (else) (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (||) (binary_expression (identifier) (>=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (identifier) ()))))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (identifier) (==) (integer_literal)) (&&) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))))) (&&) (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (==) (string_literal (") (string_content) (")))) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))))))) (}))) (}))))