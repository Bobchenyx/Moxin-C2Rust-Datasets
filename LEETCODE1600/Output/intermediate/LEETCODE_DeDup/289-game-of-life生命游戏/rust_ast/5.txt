(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) ())) (block ({) (let_declaration (let) (identifier) (=) (array_expression ([) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (])) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (:) (primitive_type) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (+) (field_expression (identifier) (.) (integer_literal))) (;)) (let_declaration (let) (identifier) (:) (primitive_type) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (+) (field_expression (identifier) (.) (integer_literal))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (integer_literal)) (||) (binary_expression (identifier) (<) (integer_literal))) (||) (binary_expression (identifier) (>=) (type_cast_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)))) (||) (binary_expression (identifier) (>=) (type_cast_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (index_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (==) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (==) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (integer_literal)) (||) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (})))) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (integer_literal)) (;)) (})))) (}))))) (})))) (})))) (}))) (}))))