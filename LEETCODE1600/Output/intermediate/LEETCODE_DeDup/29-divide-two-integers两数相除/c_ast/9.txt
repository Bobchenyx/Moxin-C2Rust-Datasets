(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (sized_type_specifier (long) (long)) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (&&) (binary_expression (identifier) (>) (number_literal))) ())) (||) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (number_literal)) (&&) (binary_expression (identifier) (<) (number_literal))) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<) (number_literal)) (&&) (binary_expression (identifier) (>) (number_literal))) ())) (||) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (&&) (binary_expression (identifier) (<) (number_literal))) ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (&&) (binary_expression (identifier) (!=) (number_literal))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (declaration (sized_type_specifier (long) (long)) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (cast_expression (() (type_descriptor (sized_type_specifier (long) (long))) ()) (identifier)) ())))) (;)) (declaration (sized_type_specifier (long) (long)) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (cast_expression (() (type_descriptor (sized_type_specifier (long) (long))) ()) (identifier)) ())))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (compound_statement ({) (declaration (sized_type_specifier (long) (long)) (init_declarator (identifier) (=) (identifier)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>=) (parenthesized_expression (() (binary_expression (identifier) (<<) (number_literal)) ()))) ())) (comment) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (<<) (number_literal))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (<<) (number_literal))) (;)) (comment) (}))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (identifier))) (;)) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (unary_expression (-) (identifier))) (;)) (}))) (comment))