(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..) (integer_literal)) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (>>) (identifier)) ())) (>=) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (integer_literal) (<<) (identifier))) (;)) (expression_statement (compound_assignment_expr (identifier) (-=) (binary_expression (identifier) (<<) (identifier))) (;)) (})))) (})))) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (unary_expression (-) (integer_literal))) (&&) (binary_expression (identifier) (!=) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)))) (block ({) (expression_statement (return_expression (return) (unary_expression (-) (identifier))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier))) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (}))))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (identifier) (-=) (identifier)) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (identifier)) (;)) (}))))) (})))) (let_declaration (let) (identifier) (=) (if_expression (if) (binary_expression (identifier) (<) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (unary_expression (-) (identifier)) (})) (else_clause (else) (block ({) (identifier) (})))) (;)) (let_declaration (let) (identifier) (=) (if_expression (if) (binary_expression (identifier) (<) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (unary_expression (!) (parenthesized_expression (() (binary_expression (identifier) (^) (boolean_literal (false))) ())))) (;)) (unary_expression (-) (identifier)) (})) (else_clause (else) (block ({) (identifier) (})))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier))) (block ({) (expression_statement (return_expression (return) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier))) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (boolean_literal (false))) (block ({) (unary_expression (-) (identifier)) (})) (else_clause (else) (block ({) (identifier) (}))))) (}))) (}))))