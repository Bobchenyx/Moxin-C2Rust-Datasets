(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (}))) (function_item (fn) (identifier) (type_parameters (<) (lifetime_parameter (lifetime (') (identifier))) (,) (lifetime_parameter (lifetime (') (identifier)) (trait_bounds (:) (lifetime (') (identifier)))) (>)) (parameters (() (parameter (identifier) (:) (reference_type (&) (lifetime (') (identifier)) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (reference_type (&) (lifetime (') (identifier)) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (reference_type (&) (lifetime (') (identifier)) (array_type ([) (primitive_type) (]))) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (reference_type (&) (lifetime (') (identifier)) (array_type ([) (primitive_type) (]))) (,) (primitive_type) (>))))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (integer_literal) (])) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ())))) (block ({) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ())))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (expression_statement (return_expression (return) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (range_expression (integer_literal) (..)) (]))) (,) (reference_expression (&) (index_expression (identifier) ([) (range_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (..)) (]))) (,) (identifier) (,) (identifier) ())))) (;)) (})) (else_clause (else) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))))) (block ({) (let_declaration (let) (identifier) (=) (reference_expression (&) (index_expression (identifier) ([) (range_expression (..) (binary_expression (identifier) (+) (integer_literal))) (]))) (;)) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (if_expression (if) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (range_expression (integer_literal) (..)) (]))) (,) (reference_expression (&) (index_expression (identifier) ([) (range_expression (binary_expression (identifier) (+) (integer_literal)) (..)) (]))) (,) (identifier) (,) (identifier) ()))) (block ({) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (})))) (}))))) (boolean_literal (false)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) (,) (parameter (identifier) (:) (reference_type (&) (array_type ([) (primitive_type) (])))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (binary_expression (identifier) (==) (reference_expression (&) (index_expression (identifier) ([) (range_expression (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (])))) (}))) (}))))