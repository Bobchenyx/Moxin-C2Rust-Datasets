(translation_unit (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (identifier) ())) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (pointer_expression (*) (identifier)) (;) (comma_expression (update_expression (identifier) (++)) (,) (update_expression (identifier) (++))) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (pointer_expression (*) (identifier)) (])) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (number_literal)) ())) ())))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (pointer_expression (*) (identifier)) (])) (+) (number_literal))) (;)) (})))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (pointer_expression (*) (identifier)) (])) (=) (identifier)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))