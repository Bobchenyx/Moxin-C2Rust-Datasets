(translation_unit (comment) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (struct_specifier (struct) (type_identifier)) (field_identifier) (;)) (}))) (;) (declaration (struct_specifier (struct) (type_identifier)) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (struct_specifier (struct) (type_identifier)) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (->) (field_identifier)) (,) (identifier) (,) (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (;)) (})))) (comment) (return_statement (return) (field_expression (identifier) (->) (field_identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type)) ()))) (compound_statement ({) (declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (field_expression (identifier) (->) (field_identifier))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (})) (return_statement (return) (true) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type)) ()))) (compound_statement ({) (declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (})) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type)) ()))) (compound_statement ({) (declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier)) (,) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (})) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (if_statement (if) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (update_expression (parenthesized_expression (() (field_expression (identifier) (->) (field_identifier)) ())) (++)) (;)) (return_statement (return) (;)) (}))) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (expression_statement (binary_expression (identifier) (==) (null (NULL))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (number_literal)) ()))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (==) (null (NULL))) (||) (binary_expression (identifier) (==) (null (NULL)))) (||) (binary_expression (identifier) (==) (number_literal))) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) ())))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) (,) (identifier) ()))) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<=) (binary_expression (identifier) (-) (parenthesized_expression (() (binary_expression (identifier) (*) (identifier)) ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (identifier))) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (identifier))) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (parenthesized_expression (() (binary_expression (identifier) (*) (identifier)) ()))) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (*) (identifier))) (])) (=) (identifier)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() ()))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (pointer_expression (*) (identifier)) (])) (=) (identifier)) (;)) (expression_statement (update_expression (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (++)) (;)) (comment) (}))) (expression_statement (call_expression (identifier) (argument_list (() ()))) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() ()))) (;)) (comment) (return_statement (return) (identifier) (;)) (}))))