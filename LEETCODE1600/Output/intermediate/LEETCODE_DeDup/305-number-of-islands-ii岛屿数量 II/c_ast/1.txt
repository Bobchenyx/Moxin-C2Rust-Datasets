(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_include (#include) (system_lib_string)) (preproc_def (#define) (identifier) (preproc_arg)) (declaration (primitive_type) (pointer_declarator (*) (array_declarator (array_declarator (identifier) ([) (identifier) (])) ([) (identifier) (]))) (;)) (comment) (declaration (primitive_type) (array_declarator (identifier) ([) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ())) (/) (number_literal)) (])) (;)) (comment) (declaration (primitive_type) (identifier) (;)) (comment) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (comment) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (binary_expression (binary_expression (binary_expression (identifier) (*) (identifier)) (/) (number_literal)) (+) (number_literal))) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;))) (expression_statement (assignment_expression (identifier) (=) (pointer_expression (&) (subscript_expression (identifier) ([) (number_literal) (])))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (identifier)) (;)))) (expression_statement (update_expression (identifier) (++)) (;)) (comment) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (number_literal)) (||) (binary_expression (identifier) (>=) (identifier))) (||) (binary_expression (identifier) (<) (number_literal))) (||) (binary_expression (identifier) (>=) (identifier))) ())) (return_statement (return) (number_literal) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (!=) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (;)) (return_statement (return) (number_literal) (;)) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (!=) (pointer_expression (*) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (comment) (return_statement (return) (number_literal) (;)) (})) (else_clause (else) (return_statement (return) (number_literal) (;)))) (})))) (})) (else_clause (else) (return_statement (return) (number_literal) (;)))))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (subscript_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (number_literal) (])) (])) ([) (subscript_expression (identifier) ([) (number_literal) (])) (]))) (==) (number_literal)) ())) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (-) (number_literal)) (,) (identifier) (,) (identifier) ())))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (number_literal)) (,) (identifier) (,) (identifier) ())))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (-) (number_literal)) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (identifier) (,) (identifier) ())))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (+) (number_literal)) (,) (subscript_expression (identifier) ([) (number_literal) (])) (,) (identifier) (,) (identifier) ())))) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (identifier)) (+) (identifier)) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (subscript_expression (identifier) ([) (number_literal) (])) (])) ([) (subscript_expression (identifier) ([) (number_literal) (])) (])) (=) (identifier)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (}))) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (identifier)) ()))))) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (identifier)) (+) (binary_expression (identifier) (*) (number_literal))) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (}))) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (array_declarator (array_declarator (identifier) ([) (number_literal) (])) ([) (number_literal) (])) (=) (initializer_list ({) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (,) (initializer_list ({) (number_literal) (,) (number_literal) (})) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (pointer_expression (&) (identifier))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (identifier)) (,) (identifier) (,) (pointer_expression (&) (identifier)) (,) (identifier) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (pointer_expression (*) (identifier)) (,) (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) (,) (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) (,) (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) ()))) (;)) (return_statement (return) (number_literal) (;)) (}))))