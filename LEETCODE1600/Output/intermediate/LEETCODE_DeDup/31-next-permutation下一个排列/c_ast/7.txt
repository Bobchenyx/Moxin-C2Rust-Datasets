(translation_unit (function_definition (storage_class_specifier (static)) (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_qualifier (const)) (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (type_qualifier (const)) (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (return_statement (return) (binary_expression (pointer_expression (*) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (identifier))) (-) (pointer_expression (*) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (identifier)))) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (null (NULL)) (==) (identifier)) (||) (binary_expression (number_literal) (==) (identifier))) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>=) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) ())) (comment) (compound_statement ({) (break_statement (break) (;)) (}))) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (number_literal) (==) (identifier)) ())) (comment) (compound_statement ({) (return_statement (return) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (,) (identifier) ()))) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;) (binary_expression (binary_expression (identifier) (<=) (binary_expression (identifier) (-) (number_literal))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<) (subscript_expression (identifier) ([) (identifier) (])))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (null (NULL)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (=) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (,) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (,) (identifier) ()))) (;)) (}))))