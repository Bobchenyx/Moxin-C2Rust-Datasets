(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (type_definition (typedef) (struct_specifier (struct) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (labeled_statement (statement_identifier) (:) (ERROR (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;)) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (>) (identifier)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (ERROR (identifier) (subscript_expression (identifier) ([) (identifier) (]))) (initializer_list ({) (}))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (compound_statement ({) (ERROR (comma_expression (subscript_expression (identifier) ([) (number_literal) (])) (,) (number_literal))) (})) ()))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (conditional_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (?) (char_literal (') (escape_sequence) (')) (:) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (.) (field_identifier)))) (,) (init_declarator (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (char_literal (') (character) ('))) (&&) (binary_expression (identifier) (==) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (.) (field_identifier)) (])) (=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (number_literal)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (;)) (})) (else_clause (else) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (compound_statement ({) (ERROR (comma_expression (identifier) (,) (identifier))) (})) ()))) (;)))) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (identifier)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (number_literal)) ())) (expression_statement (update_expression (++) (identifier)) (;)) (else_clause (else) (break_statement (break) (;)))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>) (identifier)) ())) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;))) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (}))) (expression_statement (;)))