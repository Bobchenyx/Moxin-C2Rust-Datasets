(source_file (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)) (line_comment (//)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (>>) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (<) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))))) (})))) (identifier) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (integer_literal)) ())) (>>) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (==) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (binary_expression (identifier) (-) (integer_literal)) ())))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))))) (})))) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (identifier) ())))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (identifier) ())))) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (as) (primitive_type) (,) (identifier) (as) (primitive_type) (])))) (;)) (})))) (})))) (macro_invocation (identifier) (!) (token_tree ([) (-) (integer_literal) (,) (-) (integer_literal) (]))) (}))) (}))))