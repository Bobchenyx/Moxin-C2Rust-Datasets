(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (primitive_type))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (primitive_type))) ())) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (-) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (<) (identifier)) (||) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (identifier))) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (==) (identifier))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (unary_expression (*) (identifier)) (==) (unary_expression (-) (integer_literal))) (||) (binary_expression (unary_expression (*) (identifier)) (>) (type_cast_expression (identifier) (as) (primitive_type)))) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (unary_expression (*) (identifier)) (==) (unary_expression (-) (integer_literal))) (||) (binary_expression (unary_expression (*) (identifier)) (<) (type_cast_expression (identifier) (as) (primitive_type)))) (block ({) (expression_statement (assignment_expression (unary_expression (*) (identifier)) (=) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (as) (primitive_type))) (;)) (})))) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (binary_expression (identifier) (/) (integer_literal))) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (binary_expression (identifier) (/) (integer_literal))) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (identifier) (,) (integer_literal) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (]))) (}))) (}))))