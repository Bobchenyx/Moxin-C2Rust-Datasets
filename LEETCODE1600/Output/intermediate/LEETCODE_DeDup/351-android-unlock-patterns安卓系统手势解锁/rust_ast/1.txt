(source_file (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) ()))) (])) (struct_item (struct) (type_identifier) (ordered_field_declaration_list (() (primitive_type) (,) (primitive_type) ())) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (call_expression (identifier) (arguments (() (binary_expression (integer_literal) (<<) (identifier)) (,) (identifier) ()))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (match_expression (match) (tuple_expression (() (identifier) (,) (identifier) ())) (match_block ({) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (tuple_pattern (() (integer_literal) (,) (integer_literal) ()))) (=>) (integer_literal) (,)) (match_arm (match_pattern (_)) (=>) (macro_invocation (identifier) (!) (token_tree (() ())))) (})))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (block ({) (expression_statement (match_expression (match) (identifier) (match_block ({) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (integer_literal)) (=>) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,)) (match_arm (match_pattern (_)) (=>) (macro_invocation (identifier) (!) (token_tree (() ()))) (,)) (})))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) ())) (->) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (field_expression (self) (.) (integer_literal)) ()))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (call_expression (identifier) (arguments (() (binary_expression (field_expression (self) (.) (integer_literal)) (|) (parenthesized_expression (() (binary_expression (integer_literal) (<<) (identifier)) ()))) (,) (identifier) ()))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (integer_literal) (<<) (identifier)) (;)) (binary_expression (binary_expression (field_expression (self) (.) (integer_literal)) (&) (identifier)) (==) (identifier)) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (integer_literal) (*) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (integer_literal) (,) (identifier) (,) (identifier) ())))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (integer_literal) (*) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (integer_literal) (,) (identifier) (,) (identifier) ())))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (integer_literal) (,) (identifier) (,) (identifier) ()))) (;)) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (identifier)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (array_expression ([) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (unary_expression (-) (integer_literal)) ())) (])) (;)) (let_declaration (let) (identifier) (=) (array_expression ([) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (,) (tuple_expression (() (integer_literal) (,) (unary_expression (-) (integer_literal)) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (integer_literal) ())) (,) (tuple_expression (() (unary_expression (-) (integer_literal)) (,) (unary_expression (-) (integer_literal)) ())) (])) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (token_tree (() (identifier) (::) (identifier) (token_tree (() (identifier) (,) (identifier) ())) (,) (integer_literal) ())) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (identifier)) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (unary_expression (*) (identifier))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (unary_expression (*) (identifier))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (integer_literal)) (||) (binary_expression (identifier) (>) (integer_literal))) (||) (binary_expression (identifier) (<) (integer_literal))) (||) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (,) (binary_expression (identifier) (+) (integer_literal)) ())) ()))) (;)) (})))) (})))) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (unary_expression (*) (identifier))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (unary_expression (*) (identifier))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (<) (integer_literal)) (||) (binary_expression (identifier) (>) (integer_literal))) (||) (binary_expression (identifier) (<) (integer_literal))) (||) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (binary_expression (unary_expression (*) (identifier)) (/) (integer_literal))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (binary_expression (unary_expression (*) (identifier)) (/) (integer_literal))) (;)) (expression_statement (if_expression (if) (binary_expression (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ())))) (&&) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (,) (binary_expression (identifier) (+) (integer_literal)) ())) ()))) (;)) (})))) (})))) (})))) (identifier) (}))) (}))))