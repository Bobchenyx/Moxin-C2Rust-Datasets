(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (labeled_statement (statement_identifier) (:) (ERROR (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (ERROR (<) (primitive_type) (>) (&)) (identifier)) ())))) (compound_statement ({) (declaration (type_qualifier (const)) (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_qualifier (const)) (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (type_qualifier (const)) (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (<) (number_literal)) ())) (return_statement (return) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ()))) (;))) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() ())))) (;) (update_expression (identifier) (++)) ()) (comment) (compound_statement ({) (switch_statement (switch) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (case_statement (case) (identifier) (:) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (<) (subscript_expression (identifier) ([) (identifier) (]))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (>) (subscript_expression (identifier) ([) (identifier) (]))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)))))) (break_statement (break) (;))) (case_statement (case) (identifier) (:) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (>) (subscript_expression (identifier) ([) (identifier) (]))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (break_statement (break) (;))) (case_statement (case) (identifier) (:) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (<) (subscript_expression (identifier) ([) (identifier) (]))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)))) (break_statement (break) (;))) (}))) (}))) (return_statement (return) (identifier) (;)) (}))) (}))) (expression_statement (;)))