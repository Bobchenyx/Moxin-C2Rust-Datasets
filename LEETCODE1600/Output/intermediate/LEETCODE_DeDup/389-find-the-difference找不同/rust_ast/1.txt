(source_file (line_comment (//)) (line_comment (//)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (:) (type_identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (string_literal (") (string_content) (")) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (match_expression (match) (parenthesized_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ()))) (=>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ()))) (,)) (match_arm (match_pattern (_)) (=>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (integer_literal) ()))) (,)) (})))) (empty_statement (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (match_expression (match) (parenthesized_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ()))) (=>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ()))) (,)) (match_arm (match_pattern (_)) (=>) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (integer_literal) ()))) (,)) (})))) (empty_statement (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (match_expression (match) (parenthesized_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ()))) (=>) (block ({) (expression_statement (match_expression (match) (parenthesized_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (reference_pattern (&) (identifier)) ()))) (=>) (if_expression (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (identifier)) ())) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (match_arm (match_pattern (_)) (=>) (return_expression (return) (identifier)) (,)) (})))) (})) (,)) (match_arm (match_pattern (_)) (=>) (unit_expression (() ())) (,)) (})))) (empty_statement (;)) (})))) (expression_statement (return_expression (return) (char_literal)) (;)) (}))) (}))))