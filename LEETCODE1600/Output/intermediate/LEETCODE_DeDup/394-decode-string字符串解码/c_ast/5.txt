(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (-) (number_literal))) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (break_statement (break) (;)) (}))) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (pointer_expression (*) (identifier))) (;)) (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (break_statement (break) (;)) (}))) (}))) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>) (char_literal (') (character) ('))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (break_statement (break) (;)) (}))) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)))) (;)) (expression_statement (conditional_expression (binary_expression (binary_expression (identifier) (==) (identifier)) (==) (number_literal)) (?) (number_literal) (:) (identifier)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (return_statement (return) (null (NULL)) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (identifier) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (identifier)) (,) (pointer_expression (&) (identifier)) ()))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (pointer_expression (&) (identifier)) ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (+) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (number_literal)) ())) (*) (identifier))) ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (+) (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (number_literal)) ())) (*) (identifier))) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (-) (identifier)) ()))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (identifier) (-) (identifier))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (,) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ()))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (!=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (-) (number_literal))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (,) (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (-) (identifier)) (+) (number_literal)) ()))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) ()))) ())) (return_statement (return) (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (else_clause (else) (return_statement (return) (identifier) (;)))) (}))))