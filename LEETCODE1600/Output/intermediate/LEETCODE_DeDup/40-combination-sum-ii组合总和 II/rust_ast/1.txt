(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (line_comment (//)) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (||) (binary_expression (identifier) (<=) (integer_literal))) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (::) (identifier) (::) (identifier) (::) (identifier) (token_tree (() ())) (;) (token_tree (() (identifier) (+) (integer_literal) ())) (as) (primitive_type) (]))) (;)) (expression_statement (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (]))) ()))) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (reference_expression (&) (identifier)) (block ({) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (parenthesized_expression (() (range_expression (identifier) (..=) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (index_expression (identifier) ([) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (as) (primitive_type)) (]))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (expression_statement (call_expression (field_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (})))) (})))) (expression_statement (return_expression (return) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (;)) (}))) (}))))