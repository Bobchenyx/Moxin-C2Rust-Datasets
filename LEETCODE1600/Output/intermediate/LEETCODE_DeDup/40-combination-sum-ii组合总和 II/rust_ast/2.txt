(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (break_expression (break)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (})))) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (::) (identifier) (token_tree (() ())) (;) (identifier) (as) (primitive_type) (+) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (reference_expression (&) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (;)) (expression_statement (compound_assignment_expr (unary_expression (*) (identifier)) (+=) (integer_literal)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (parenthesized_expression (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (+) (integer_literal)) ()))) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (identifier) (])) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (type_cast_expression (identifier) (as) (primitive_type))) (block ({) (expression_statement (break_expression (break)) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (]))) ()))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (mut_pattern (mutable_specifier) (identifier)) (in) (identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (identifier) ()))) (>=) (unary_expression (*) (parenthesized_expression (() (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) ())))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (index_expression (identifier) ([) (identifier) (])) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (}))))) (})))) (})))) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))