(translation_unit (ERROR (identifier) ([) (])) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (number_literal) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (>=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (>>) (parenthesized_expression (() (binary_expression (update_expression (identifier) (--)) (<<) (number_literal)) ()))) ())) (&) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (||) (binary_expression (identifier) (>) (number_literal))) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (conditional_expression (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (?) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (number_literal)) (+) (char_literal (') (character) ('))) ())) (:) (parenthesized_expression (() (binary_expression (identifier) (+) (char_literal (') (character) ('))) ())))) (;))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (number_literal) (==) (identifier)) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (number_literal) (])) (=) (char_literal (') (character) ('))) (;))) (return_statement (return) (identifier) (;)) (}))))