(translation_unit (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (number_literal) (,) (number_literal) ()))))) (,) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (char_literal (') (character) ('))) (;))) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (string_literal (") (string_content) ("))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (sized_type_specifier (long)) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (<<) (update_expression (identifier) (--))) ())) (&) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (number_literal) (,) (binary_expression (number_literal) (-) (identifier)) ())))) (;)) (}))) (}))) (if_statement (if) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (assignment_expression (pointer_expression (*) (update_expression (identifier) (++))) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (}))) (}))) (return_statement (return) (identifier) (;)))