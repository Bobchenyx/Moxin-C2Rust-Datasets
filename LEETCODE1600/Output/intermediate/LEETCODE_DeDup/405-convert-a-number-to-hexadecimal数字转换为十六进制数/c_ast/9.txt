(translation_unit (comment) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (field_identifier)) (;)) (}))) (type_identifier) (;)) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (!=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (update_expression (++) (identifier)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (!=) (number_literal)) ())) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (}))) (comment) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (string_literal (") (string_content) (")) (;))) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (char_literal (') (escape_sequence) (')) ())))) (;)) (declaration (sized_type_specifier (unsigned)) (init_declarator (identifier) (=) (cast_expression (() (type_descriptor (sized_type_specifier (unsigned))) ()) (identifier))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (!=) (number_literal)) ())) (compound_statement ({) (switch_statement (switch) (parenthesized_expression (() (binary_expression (identifier) (%) (number_literal)) ())) (compound_statement ({) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (case_statement (case) (number_literal) (:) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (char_literal (') (character) (')) ()))) (;)) (break_statement (break) (;))) (}))) (expression_statement (assignment_expression (identifier) (/=) (number_literal)) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) ()))))) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))