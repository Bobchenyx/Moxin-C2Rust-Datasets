(translation_unit (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (identifier) (;) (binary_expression (binary_expression (binary_expression (identifier) (-) (identifier)) (>=) (number_literal)) (&&) (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (<=) (binary_expression (identifier) (-) (number_literal)))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (!=) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (]))) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (}))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (*) (number_literal))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (identifier) (;) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (>=) (number_literal)) (&&) (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (<=) (binary_expression (identifier) (-) (number_literal)))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (])) (!=) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (]))) ())) (compound_statement ({) (break_statement (break) (;)) (}))) (}))) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (>) (number_literal)) (?) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (number_literal)) (:) (number_literal))) (;)) (return_statement (return) (conditional_expression (binary_expression (identifier) (>) (identifier)) (?) (identifier) (:) (identifier)) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (continue_statement (continue) (;)) (})) (else_clause (else) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (continue_statement (continue) (;)) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (subscript_expression (identifier) ([) (identifier) (]))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (character) ('))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (character) ('))) (;)) (break_statement (break) (;)) (}))) (})))) (}))) (})))) (}))) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (}))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (identifier)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (binary_expression (identifier) (+) (number_literal)) (;)) (})))) (}))))