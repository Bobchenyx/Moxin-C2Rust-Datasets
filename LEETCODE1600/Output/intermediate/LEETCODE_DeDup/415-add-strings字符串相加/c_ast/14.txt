(translation_unit (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (char_literal (') (escape_sequence) (')) (}))) (;)) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (sized_type_specifier (short)) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (,) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (comma_expression (update_expression (identifier) (--)) (,) (update_expression (identifier) (--))) (;) (binary_expression (binary_expression (binary_expression (identifier) (>=) (number_literal)) (||) (binary_expression (identifier) (>=) (number_literal))) (||) (identifier)) (;) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (parenthesized_expression (() (conditional_expression (binary_expression (identifier) (>=) (number_literal)) (?) (binary_expression (subscript_expression (identifier) ([) (update_expression (identifier) (--)) (])) (-) (number_literal)) (:) (number_literal)) ())) (+) (parenthesized_expression (() (conditional_expression (binary_expression (identifier) (>=) (number_literal)) (?) (binary_expression (subscript_expression (identifier) ([) (update_expression (identifier) (--)) (])) (-) (number_literal)) (:) (number_literal)) ())))) (;)) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (--)) (])) (=) (binary_expression (binary_expression (identifier) (%) (number_literal)) (+) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (/=) (number_literal)) (;)) (}))) (return_statement (return) (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (;)) (comment) (}))))