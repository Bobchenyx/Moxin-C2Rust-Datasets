(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;)) (declaration (primitive_type) (identifier) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (}))) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) ())))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (})))) (for_statement (for) (() (;) (binary_expression (pointer_expression (*) (identifier)) (&&) (pointer_expression (*) (identifier))) (;) (comma_expression (update_expression (identifier) (++)) (,) (update_expression (identifier) (++))) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) ())) (+) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) ()))) (+) (identifier)) ())) (%) (number_literal)) (+) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) ())) (+) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) ()))) (+) (identifier)) (>=) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (escape_sequence) ('))) ())) (&&) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (escape_sequence) ('))) ()))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (identifier) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (identifier) (+) (number_literal))) (;))) (})) (else_clause (else) (compound_statement ({) (for_statement (for) (() (;) (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) (+) (identifier)) ())) (%) (number_literal)) (+) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) (+) (identifier)) (>=) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)))) (}))) (for_statement (for) (() (;) (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (escape_sequence) ('))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) (+) (identifier)) ())) (%) (number_literal)) (+) (number_literal))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (pointer_expression (*) (identifier)) (-) (number_literal)) (+) (identifier)) (>=) (number_literal)) ())) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)))) (}))) (if_statement (if) (parenthesized_expression (() (identifier) ())) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (number_literal)) (;))) (})))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (call_expression (identifier) (argument_list (() (identifier) ()))) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))