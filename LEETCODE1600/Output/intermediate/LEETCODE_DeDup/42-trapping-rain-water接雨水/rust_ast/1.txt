(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (<) (integer_literal)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal)) (,) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (,) (integer_literal) ())) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (let_declaration (let) (identifier) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (<) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (}))))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (index_expression (identifier) ([) (identifier) (])) ())))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (-) (index_expression (identifier) ([) (identifier) (])))) (;)) (})))) (})))) (identifier) (}))) (}))))