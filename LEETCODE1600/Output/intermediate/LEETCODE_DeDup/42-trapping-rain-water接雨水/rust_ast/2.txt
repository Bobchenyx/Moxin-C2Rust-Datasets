(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (unary_expression (*) (identifier)) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (unary_expression (*) (identifier))) (;)) (})))) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (reference_expression (&) (parenthesized_expression (() (type_cast_expression (identifier) (as) (primitive_type)) ())))) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (identifier)) (-) (integer_literal))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (})))) (line_comment (//)) (})))) (type_cast_expression (identifier) (as) (primitive_type)) (}))))