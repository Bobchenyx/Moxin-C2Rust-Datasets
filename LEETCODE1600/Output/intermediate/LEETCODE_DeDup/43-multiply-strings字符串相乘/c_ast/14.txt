(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (,) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (identifier)) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (identifier) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (identifier) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (return_statement (return) (null (NULL)) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) (||) (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) (')))) ())) (return_statement (return) (string_literal (") (string_content) (")) (;))))))))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (])) (+=) (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())) (*) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (])) (>=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal)) (])) (-=) (number_literal)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (identifier)) (])) (+=) (number_literal)) (;)) (}))) (})))) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (number_literal))) (;) (binary_expression (identifier) (>) (number_literal)) (;) (update_expression (identifier) (--)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (%) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (identifier)) ())) (/) (number_literal))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (+=) (identifier)) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (-=) (binary_expression (identifier) (*) (number_literal))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (identifier))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})) (else_clause (else) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (number_literal))) (;)))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) ())))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (number_literal))) (;) (binary_expression (identifier) (>=) (number_literal)) (;) (update_expression (identifier) (--)) ()) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (identifier)) (]))) (+) (char_literal (') (character) (')))) (;))) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (return_statement (return) (identifier) (;)) (}))))