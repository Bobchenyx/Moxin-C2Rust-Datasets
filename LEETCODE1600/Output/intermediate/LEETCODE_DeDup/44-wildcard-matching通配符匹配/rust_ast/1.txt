(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) (+) (reference_expression (&) (identifier))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ()))) (+) (reference_expression (&) (identifier))) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (parenthesized_expression (() (binary_expression (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (char_literal)) (||) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (index_expression (identifier) ([) (identifier) (])))) ()))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (char_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))))))))) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (!=) (char_literal)) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (})))) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (}))) (}))))