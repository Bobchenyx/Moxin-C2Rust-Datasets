(source_file (ERROR (identifier)) (use_declaration (use) (scoped_use_list (scoped_identifier (identifier) (::) (identifier)) (::) (use_list ({) (identifier) (}))) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (->) (primitive_type) (block ({) (type_cast_expression (parenthesized_expression (() (binary_expression (call_expression (field_expression (parenthesized_expression (() (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (-) (index_expression (identifier) ([) (integer_literal) (]))) ())) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (+) (call_expression (field_expression (parenthesized_expression (() (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (-) (index_expression (identifier) ([) (integer_literal) (]))) ())) (.) (field_identifier)) (arguments (() (integer_literal) ())))) ())) (as) (primitive_type)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (identifier) (]))) (,) (reference_expression (&) (index_expression (identifier) ([) (identifier) (]))) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (if_expression (if) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (identifier) (*) (integer_literal))) (;)) (expression_statement (assignment_expression (unary_expression (*) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (.) (field_identifier)) (arguments (() ())))) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (integer_literal) ()))) (;)) (}))))) (})))) (})))) (identifier) (}))) (}))))