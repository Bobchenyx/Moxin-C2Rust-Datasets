(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (label (') (identifier)) (:) (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>=) (unary_expression (*) (identifier))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (continue_expression (continue) (label (') (identifier))) (;)) (})))) (})))) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (identifier) (}))))