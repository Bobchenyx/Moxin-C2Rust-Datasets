(source_file (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) (,) (primitive_type) (,) (primitive_type) ())) (>)))) (}))) (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) ())))) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (mutable_specifier) (field_expression (self) (.) (field_identifier))) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (identifier) (.) (integer_literal)) (==) (identifier)) (block ({) (expression_statement (compound_assignment_expr (field_expression (self) (.) (field_identifier)) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (field_expression (identifier) (.) (integer_literal)) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (integer_literal)) (=) (field_expression (self) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (integer_literal))) (;)) (})))) (})))) (line_comment (//)) (expression_statement (return_expression (return) (identifier)) (;)) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (mutable_specifier) (field_expression (self) (.) (field_identifier))) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (identifier) (.) (integer_literal)) (==) (identifier)) (block ({) (expression_statement (compound_assignment_expr (field_expression (self) (.) (field_identifier)) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (integer_literal)) (=) (identifier)) (;)) (expression_statement (compound_assignment_expr (field_expression (identifier) (.) (integer_literal)) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (integer_literal)) (=) (field_expression (self) (.) (field_identifier))) (;)) (expression_statement (return_expression (return)) (;)) (})))) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (==) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (field_expression (index_expression (field_expression (self) (.) (field_identifier)) ([) (integer_literal) (])) (.) (integer_literal)) (,) (field_expression (index_expression (field_expression (self) (.) (field_identifier)) ([) (integer_literal) (])) (.) (integer_literal)) ())) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (identifier) ())) (in) (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (identifier) (.) (integer_literal)) (<) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (field_expression (identifier) (.) (integer_literal)) (==) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (identifier) (.) (integer_literal)) (<) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (.) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (})))))) (})))) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (line_comment (//)) (})))) (let_declaration (let) (identifier) (=) (tuple_expression (() (identifier) (,) (identifier) (,) (integer_literal) (,) (integer_literal) ())) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (line_comment (//)) (}))) (}))))