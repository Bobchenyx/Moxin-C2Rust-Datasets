(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (attribute_item (#) ([) (attribute (identifier) (token_tree (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (])) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (type_identifier) (block ({) (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (|)) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) ())))) ()))) (}))) (}))) (impl_item (impl) (type_identifier) (for) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (call_expression (identifier) (arguments (() (call_expression (field_expression (self) (.) (field_identifier)) (arguments (() (identifier) ()))) ()))) (}))) (}))) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (,) (type_identifier) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>)))) (}))) (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (,) (field_initializer (field_identifier) (:) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ())))) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (self) (.) (field_identifier)) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (unary_expression (-) (integer_literal))) (;)) (})))) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ())))) (block ({) (expression_statement (return_expression (return) (unary_expression (-) (integer_literal))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (type_identifier) (=) (index_expression (field_expression (self) (.) (field_identifier)) ([) (reference_expression (&) (identifier)) (])) (;)) (line_comment (//)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (line_comment (//)) (expression_statement (compound_assignment_expr (field_expression (identifier) (.) (field_identifier)) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (field_expression (self) (.) (field_identifier)) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (field_expression (self) (.) (field_identifier))) (;)) (line_comment (//)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (line_comment (//)) (field_expression (identifier) (.) (field_identifier)) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (mutable_specifier) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (self) (.) (field_identifier)) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (==) (type_cast_expression (field_expression (self) (.) (field_identifier)) (as) (primitive_type))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (field_expression (identifier) (.) (field_identifier))) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (})))) (expression_statement (compound_assignment_expr (field_expression (self) (.) (field_identifier)) (+=) (integer_literal)) (;)) (let_declaration (let) (identifier) (=) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (integer_literal)) (,) (field_initializer (field_identifier) (:) (field_expression (self) (.) (field_identifier))) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (}))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (index_expression (field_expression (self) (.) (field_identifier)) ([) (reference_expression (&) (identifier)) (])) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (expression_statement (compound_assignment_expr (field_expression (identifier) (.) (field_identifier)) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (field_expression (self) (.) (field_identifier)) (+=) (integer_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (field_expression (self) (.) (field_identifier))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (}))))) (}))) (}))) (block_comment (/*) (outer_doc_comment_marker) (doc_comment) (*/)))