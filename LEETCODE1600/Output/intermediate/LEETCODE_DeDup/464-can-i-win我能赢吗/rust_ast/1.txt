(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (*) (identifier)) (/) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (binary_expression (binary_expression (identifier) (&) (integer_literal)) (==) (integer_literal))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (;) (integer_literal) (<<) (token_tree (() (identifier) (as) (primitive_type) ())) (]))) (;)) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (identifier) (,) (identifier) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))))) ())) (->) (primitive_type) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..=) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (binary_expression (integer_literal) (<<) (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ()))) (;)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (&) (identifier)) (==) (integer_literal)) (block ({) (line_comment (//)) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>=) (identifier)) (||) (unary_expression (!) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (identifier) (|) (identifier)) (,) (identifier) (,) (binary_expression (identifier) (-) (identifier)) (,) (identifier) ()))))) (block ({) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (call_expression (identifier) (arguments (() (boolean_literal (true)) ())))) (;)) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})))) (})))) (})))) (line_comment (//)) (expression_statement (assignment_expression (index_expression (identifier) ([) (identifier) (])) (=) (call_expression (identifier) (arguments (() (boolean_literal (false)) ())))) (;)) (boolean_literal (false)) (}))) (}))))