(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (tuple_pattern (() (identifier) (,) (ref_pattern (ref) (identifier)) ())) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (tuple_pattern (() (identifier) (,) (identifier) ())) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (expression_statement (call_expression (field_expression (index_expression (identifier) ([) (range_expression (identifier) (..)) (])) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (unary_expression (*) (identifier)) (]))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) (,) (identifier) ()))) (;)) (expression_statement (return_expression (return) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (})))) (})))) (})))) (})))) (})))) (identifier) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (.) (identifier) (token_tree (() ())) (]))) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (identifier) (}))) (}))))