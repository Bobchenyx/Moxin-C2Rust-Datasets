(translation_unit (function_definition (type_identifier) (identifier) (compound_statement ({) (labeled_statement (statement_identifier) (:) (declaration (primitive_type) (array_declarator (identifier) ([) (number_literal) (])) (;))) (comment) (declaration (type_qualifier (const)) (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (labeled_statement (statement_identifier) (:) (ERROR (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (identifier)) (||) (binary_expression (call_expression (identifier) (argument_list (() (binary_expression (identifier) (-) (identifier)) ()))) (==) (call_expression (identifier) (argument_list (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (identifier)) ()))))) ())) (comment) (return_statement (return) (false) (;))) (}))) (return_statement (return) (true) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (type_identifier) (ERROR (<) (identifier) (<) (identifier) (>>) (&)) (identifier)) ()))) (compound_statement ({) (comment) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (>) (identifier)) (;)) (declaration (type_identifier) (identifier) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (char_literal (') (character) (')) ()))) (;))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (identifier) ()))) (;))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (expression_statement (assignment_expression (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (subscript_expression (identifier) ([) (identifier) (])) (])) (=) (char_literal (') (character) ('))) (;))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (argument_list (() (identifier) ()))) (;)) (}))) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (<) (binary_expression (identifier) (>>) (call_expression (identifier) (argument_list (() (identifier) (ERROR (identifier)) ()))))) (;)) (compound_statement ({) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (}))) (expression_statement (binary_expression (binary_expression (identifier) (<) (identifier)) (<) (binary_expression (identifier) (>>) (identifier))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) ())) (compound_statement ({) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (comment) (break_statement (break) (;)) (})) (else_clause (else) (compound_statement ({) (comment) (expression_statement (update_expression (identifier) (++)) (;)) (})))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (identifier)) ())) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (comment) (break_statement (break) (;))) (expression_statement (update_expression (identifier) (--)) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (+) (number_literal))) (;)) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (comment) (continue_statement (continue) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (binary_expression (identifier) (-) (number_literal))) ())) (compound_statement ({) (comment) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (+) (number_literal))) (;)) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (comment) (continue_statement (continue) (;)) (}))) (expression_statement (update_expression (identifier) (++)) (;)) (comment) (}))) (return_statement (return) (identifier) (;)) (})) (}))) (expression_statement (;)))