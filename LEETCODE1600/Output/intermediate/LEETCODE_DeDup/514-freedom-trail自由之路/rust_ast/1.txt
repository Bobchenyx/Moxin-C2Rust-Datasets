(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (||) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (const_item (const) (identifier) (:) (primitive_type) (=) (type_cast_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (as) (primitive_type)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (identifier) (!) (token_tree ([) (identifier) (;) (identifier) (])) (;) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (tuple_pattern (() (identifier) (,) (reference_pattern (&) (identifier)) ())) (in) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (]))) ()))) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (integer_literal) (]))) ())))) (block ({) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (identifier) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (integer_literal) (])) ([) (identifier) (])) (=) (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (integer_literal) (,) (identifier) (,) (identifier) ()))) (+) (integer_literal))) (;)) (})))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (^) (integer_literal)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (!=) (index_expression (identifier) ([) (identifier) (]))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) ())))) (block ({) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (identifier) (block ({) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (call_expression (field_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (.) (field_identifier)) (arguments (() (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) ())))) (+) (integer_literal)) ())))) (;)) (})))) (})))) (})))) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (type_cast_expression (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (as) (primitive_type)) (;)) (expression_statement (for_expression (for) (reference_pattern (&) (identifier)) (in) (call_expression (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (^) (integer_literal)) (])) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ())))) (;)) (})))) (type_cast_expression (identifier) (as) (primitive_type)) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (identifier)) (block ({) (call_expression (field_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (.) (field_identifier)) (arguments (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (identifier)) ()))) (})) (else_clause (else) (block ({) (call_expression (field_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (.) (field_identifier)) (arguments (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (identifier)) ()))) (}))))) (}))) (}))))