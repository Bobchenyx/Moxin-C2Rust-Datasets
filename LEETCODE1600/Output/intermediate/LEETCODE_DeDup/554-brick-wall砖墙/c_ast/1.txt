(translation_unit (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (;) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (struct_specifier (struct) (type_identifier)) (field_identifier) (;)) (field_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (field_identifier)) (;)) (}))) (;) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (field_identifier)) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (;) (declaration (struct_specifier (struct) (type_identifier)) (identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (;)) (}))) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (cast_expression (() (type_descriptor (struct_specifier (struct) (type_identifier)) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ()))) ()))))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (field_expression (identifier) (.) (field_identifier)) (,) (number_literal) (,) (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ()))) ()))) (;)) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (%) (field_expression (identifier) (.) (field_identifier)))) (;)) (declaration (struct_specifier (struct) (type_identifier)) (init_declarator (pointer_declarator (*) (identifier)) (=) (pointer_expression (&) (subscript_expression (field_expression (identifier) (.) (field_identifier)) ([) (identifier) (])))) (;)) (declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (=) (number_literal)) (;)) (return_statement (return) (;)) (}))) (while_statement (while) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (==) (identifier)) ())) (compound_statement ({) (expression_statement (update_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (++)) (;)) (return_statement (return) (;)) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (null (NULL))) ())) (compound_statement ({) (comment) (break_statement (break) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (})))) (}))) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (struct_specifier (struct) (type_identifier)) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (() (type_descriptor (struct_specifier (struct) (type_identifier))) ())) ()))))) (;)) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (null (NULL))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (return_statement (return) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (field_expression (identifier) (.) (field_identifier))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (identifier)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (pointer_expression (&) (subscript_expression (field_expression (identifier) (.) (field_identifier)) ([) (identifier) (])))) (;)) (while_statement (while) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (escape_sequence) (")) (,) (field_expression (field_expression (identifier) (->) (field_identifier)) (.) (field_identifier)) (,) (identifier) ()))) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (field_expression (identifier) (->) (field_identifier))) (;)) (}))) (}))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (expression_statement (call_expression (identifier) (argument_list (() (number_literal) ()))) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (subscript_expression (subscript_expression (identifier) ([) (identifier) (])) ([) (identifier) (]))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) ()))) (;)) (}))) (}))) (return_statement (return) (parenthesized_expression (() (binary_expression (identifier) (-) (call_expression (identifier) (argument_list (() ())))) ())) (;)) (}))))