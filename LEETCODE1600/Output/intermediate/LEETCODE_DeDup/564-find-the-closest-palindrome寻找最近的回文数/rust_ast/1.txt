(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (generic_function (field_expression (identifier) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<=) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<) (integer_literal)) (block ({) (expression_statement (return_expression (return) (call_expression (field_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (expression_statement (return_expression (return) (call_expression (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (arguments (() ())))) (;)) (})))) (let_declaration (let) (identifier) (=) (type_cast_expression (call_expression (field_expression (parenthesized_expression (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (/) (float_literal)) ())) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type)) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (generic_function (field_expression (identifier) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (generic_function (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..) (identifier)) (])) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (integer_literal)) (;)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (reference_expression (&) (index_expression (identifier) ([) (range_expression (integer_literal) (..) (identifier)) (]))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (identifier) ()))) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (reference_expression (&) (unary_expression (*) (identifier))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (identifier) ()))) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) ()))) (+) (integer_literal)) ()))) (;)) (}))))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (identifier)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) (,) (reference_expression (&) (unary_expression (*) (identifier))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (mutable_specifier) (identifier)) (,) (identifier) ()))) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (integer_literal)) ()))) (-) (integer_literal)) ()))) (;)) (}))))) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (field_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (call_expression (field_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (||) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (call_expression (field_expression (parenthesized_expression (() (binary_expression (identifier) (-) (identifier)) ())) (.) (field_identifier)) (arguments (() ())))) (&&) (binary_expression (identifier) (<) (identifier))) ()))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (})))) (empty_statement (;)) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (type_identifier))) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (unsafe_block (unsafe) (block ({) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (}))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (&) (integer_literal)) (==) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (unary_expression (*) (identifier))) ()))) (;)) (})))) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))