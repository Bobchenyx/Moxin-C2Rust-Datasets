(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (array_declarator (identifier) ([) (identifier) (])) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (identifier) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (identifier)) (||) (unary_expression (!) (identifier))) ())) (compound_statement ({) (goto_statement (goto) (statement_identifier) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (compound_statement ({) (goto_statement (goto) (statement_identifier) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (>) (number_literal)) (?) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (*) (number_literal)) (-) (number_literal)) ())) (:) (number_literal))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (identifier)) (||) (binary_expression (identifier) (==) (binary_expression (identifier) (-) (number_literal)))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (identifier) (/) (identifier)) (+) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (identifier)) ())) (>) (identifier)) ())))) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (/) (identifier)) (*) (number_literal)) (+) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (identifier)) ())) (>) (identifier)) ()))) (+) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (%) (identifier)) ())) (>=) (binary_expression (binary_expression (binary_expression (identifier) (*) (number_literal)) (-) (identifier)) (-) (number_literal))) ())))) (;)) (})))) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (-) (identifier))) (;)) (})))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (subscript_expression (identifier) ([) (identifier) (])) (++)) (])) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (labeled_statement (statement_identifier) (:) (return_statement (return) (identifier) (;))) (}))))