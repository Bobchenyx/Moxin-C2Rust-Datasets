(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (identifier) (>) (integer_literal)) (&&) (binary_expression (identifier) (>) (integer_literal))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (identifier))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (identifier))) (;)) (}))))) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (identifier) (})) (else_clause (else) (block ({) (identifier) (}))))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (parenthesized_expression (() (range_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (..) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) ())) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (integer_literal)) ()))) ())) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (while_expression (while) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (parenthesized_expression (() (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (index_expression (identifier) ([) (identifier) (])) (,) (unary_expression (*) (identifier)) ()))) (;)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (/=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (unary_expression (*) (identifier))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (break_expression (break)) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (unary_expression (*) (identifier)) (/=) (identifier)) (;)) (}))))) (})))) (})))) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (integer_literal) (,) (closure_expression (closure_parameters (|) (identifier) (,) (identifier) (|)) (binary_expression (identifier) (*) (identifier))) ()))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (integer_literal)) (,) (binary_expression (identifier) (-) (integer_literal)) ()))) (}))) (}))))