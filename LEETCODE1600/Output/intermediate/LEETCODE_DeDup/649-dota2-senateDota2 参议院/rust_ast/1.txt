(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (binary_expression (identifier) (==) (char_literal))) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (reference_pattern (&) (reference_pattern (&) (identifier))) (|)) (identifier)) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (identifier)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (array_expression ([) (identifier) (,) (identifier) (])) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (!=) (integer_literal)) (&&) (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (!=) (integer_literal))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (=) (if_expression (if) (identifier) (block ({) (integer_literal) (})) (else_clause (else) (block ({) (unary_expression (-) (integer_literal)) (})))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (*) (identifier)) (>=) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (line_comment (//)) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (if_expression (if) (identifier) (block ({) (integer_literal) (})) (else_clause (else) (block ({) (integer_literal) (})))) (])) (-=) (integer_literal)) (;)) (}))))) (expression_statement (compound_assignment_expr (identifier) (+=) (identifier)) (;)) (})))) (line_comment (//)) (call_expression (field_expression (parenthesized_expression (() (if_expression (if) (binary_expression (index_expression (identifier) ([) (integer_literal) (])) (==) (integer_literal)) (block ({) (string_literal (") (string_content) (")) (})) (else_clause (else) (block ({) (string_literal (") (string_content) (")) (})))) ())) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))