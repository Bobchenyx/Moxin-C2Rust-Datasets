(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (false)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (false)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (false)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (false)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (false)) (;)) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (call_expression (identifier) (argument_list (() (identifier) ())))) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (||) (identifier)) (||) (identifier)) (||) (identifier)) ())) (expression_statement (assignment_expression (identifier) (=) (true)) (;))) (continue_statement (continue) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (identifier) ())) (comment) (return_statement (return) (false) (;))))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (<=) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (true)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) (||) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) (')))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (||) (identifier)) (||) (identifier)) (||) (identifier)) ())) (&&) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (!=) (char_literal (') (character) (')))) ())) (compound_statement ({) (comment) (return_statement (return) (false) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (true)) (;)) (})))) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (||) (identifier)) ())) (compound_statement ({) (comment) (return_statement (return) (false) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (true)) (;)) (})))) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (unary_expression (!) (identifier)) (||) (identifier)) ())) (compound_statement ({) (return_statement (return) (false) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (true)) (;)) (expression_statement (assignment_expression (identifier) (=) (false)) (;)) (})))) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (false) (;)) (})))))))))) (}))) (return_statement (return) (identifier) (;)) (}))))