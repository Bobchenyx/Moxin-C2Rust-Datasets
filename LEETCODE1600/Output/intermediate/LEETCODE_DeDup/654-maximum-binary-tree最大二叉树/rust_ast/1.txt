(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (}))) (struct_item (struct) (type_identifier) (field_declaration_list ({) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (primitive_type)) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (field_declaration (field_identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>)))) (,) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (type_identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (return_expression (return) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (})))) (})))) (let_declaration (let) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (/) (integer_literal)) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ()))) (;)) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (block ({) (expression_statement (if_expression (if) (binary_expression (field_expression (identifier) (.) (field_identifier)) (>) (field_expression (identifier) (.) (field_identifier))) (block ({) (tuple_expression (() (field_expression (identifier) (.) (field_identifier)) (,) (field_expression (identifier) (.) (field_identifier)) ())) (})) (else_clause (else) (block ({) (tuple_expression (() (field_expression (identifier) (.) (field_identifier)) (,) (field_expression (identifier) (.) (field_identifier)) ())) (}))))) (})) (;)) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (identifier)) (,) (shorthand_field_initializer (identifier)) (,) (field_initializer (field_identifier) (:) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ())))) (,) (field_initializer (field_identifier) (:) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ())))) (,) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (identifier)) (||) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (identifier))) ()))) (block ({) (expression_statement (return_expression (return) (tuple_expression (() (field_expression (self) (.) (field_identifier)) (,) (field_expression (self) (.) (field_identifier)) ()))) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ())) (/) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (<=) (identifier)) (block ({) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ()))) (})) (else_clause (else) (block ({) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (let_declaration (let) (tuple_pattern (() (identifier) (,) (identifier) ())) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (tuple_expression (() (identifier) (,) (identifier) ())) (})) (else_clause (else) (block ({) (tuple_expression (() (identifier) (,) (identifier) ())) (}))))) (}))))))) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) ())) (->) (type_identifier) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (integer_literal) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ()))) ())))) (,) (field_initializer (field_identifier) (:) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (,) (}))) (}))) (function_item (fn) (identifier) (parameters (() (self_parameter (&) (self)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (line_comment (//)) (let_declaration (let) (tuple_pattern (() (_) (,) (identifier) ())) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (field_expression (self) (.) (field_identifier)) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) (,) (integer_literal) (,) (field_expression (self) (.) (field_identifier)) ()))) (;)) (identifier) (}))) (}))) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (;)) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (reference_expression (&) (identifier)) (,) (integer_literal) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (type_identifier))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (>))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (return_expression (return) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (}))) ()))) ()))) ())))) (;)) (})))) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (identifier) ()))) (;)) (line_comment (//)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) ()))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ()))) (;)) (call_expression (identifier) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (struct_expression (type_identifier) (field_initializer_list ({) (field_initializer (field_identifier) (:) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (field_initializer (field_identifier) (:) (identifier)) (,) (}))) ()))) ()))) ()))) (}))) (}))))