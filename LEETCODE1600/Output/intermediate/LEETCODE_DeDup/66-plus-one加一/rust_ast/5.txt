(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (true)) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (match_expression (match) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (match_block ({) (match_arm (match_pattern (tuple_struct_pattern (identifier) (() (mut_pattern (mutable_specifier) (identifier)) ()))) (=>) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (compound_assignment_expr (identifier) (+=) (integer_literal)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (integer_literal)) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (false))) (;)) (}))))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (,)) (match_arm (match_pattern (identifier)) (=>) (block ({) (expression_statement (if_expression (if) (identifier) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (;)) (})))) (expression_statement (break_expression (break)) (;)) (})) (,)) (})))) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (identifier) (}))) (}))))