(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (binary_expression (identifier) (<) (identifier)) (&&) (binary_expression (identifier) (<) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (>) (subscript_expression (identifier) ([) (identifier) (]))) ())) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (-) (number_literal)) (!=) (number_literal)) (&&) (binary_expression (identifier) (!=) (binary_expression (identifier) (-) (number_literal)))) ())) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (>) (subscript_expression (identifier) ([) (identifier) (]))) (&&) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (>) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])))) ())) (compound_statement ({) (comment) (comment) (comment) (return_statement (return) (false) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (})))) (})) (else_clause (else) (compound_statement ({) (comment) (expression_statement (update_expression (identifier) (++)) (;)) (})))) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>=) (number_literal)) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (return_statement (return) (true) (;)) (}))))