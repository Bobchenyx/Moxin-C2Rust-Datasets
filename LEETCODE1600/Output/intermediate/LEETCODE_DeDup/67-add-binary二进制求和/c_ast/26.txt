(translation_unit (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (declaration (primitive_type) (identifier) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (-) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (call_expression (identifier) (argument_list (() (identifier) ()))) (-) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (conditional_expression (binary_expression (identifier) (>) (identifier)) (?) (binary_expression (identifier) (+) (number_literal)) (:) (binary_expression (identifier) (+) (number_literal))) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) ()))))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (null (NULL))) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (>=) (number_literal)) (||) (binary_expression (identifier) (>=) (number_literal))) (||) (binary_expression (identifier) (!=) (number_literal))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (>=) (number_literal)) (?) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) (:) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (conditional_expression (binary_expression (identifier) (>=) (number_literal)) (?) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (-) (char_literal (') (character) ('))) (:) (number_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (+) (identifier)) (+) (identifier))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (binary_expression (binary_expression (identifier) (%) (number_literal)) (+) (char_literal (') (character) (')))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (/) (number_literal))) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (expression_statement (update_expression (identifier) (--)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (binary_expression (identifier) (/) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (comment) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (identifier) ([) (identifier) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (]))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (])) (=) (identifier)) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))