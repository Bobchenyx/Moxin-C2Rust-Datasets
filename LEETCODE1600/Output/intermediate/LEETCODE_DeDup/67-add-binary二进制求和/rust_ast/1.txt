(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) ())) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (primitive_type) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (binary_expression (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (!=) (identifier)) (||) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (!=) (identifier))) (||) (binary_expression (identifier) (!=) (integer_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (integer_literal)) (;)) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ())))) (;)) (})))) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) ())))) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (+=) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (/) (integer_literal))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (%) (integer_literal))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (unary_expression (*) (identifier)) ())))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (type_identifier) (>))) (arguments (() ()))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (char_literal)) (block ({) (integer_literal) (})) (else_clause (else) (block ({) (integer_literal) (}))))) (}))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (char_literal) (})) (else_clause (else) (block ({) (char_literal) (}))))) (}))) (}))))