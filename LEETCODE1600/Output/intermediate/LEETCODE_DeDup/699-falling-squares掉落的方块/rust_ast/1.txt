(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (expression_statement (if_expression (if) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (return_expression (return) (macro_invocation (identifier) (!) (token_tree ([) (])))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (index_expression (index_expression (identifier) ([) (integer_literal) (])) ([) (integer_literal) (])) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (<) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (])) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>) (integer_literal)) (block ({) (line_comment (//)) (line_comment (//)) (expression_statement (if_expression (if) (unary_expression (!) (parenthesized_expression (() (binary_expression (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (integer_literal) (])) (>=) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (])) (+) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (])))) (||) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (])) (>=) (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (integer_literal) (])) (+) (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (integer_literal) (]))))) ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (+) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (]))) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (+) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (integer_literal) (])))) (;)) (})))) (})))) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (})))) (identifier) (}))) (}))))