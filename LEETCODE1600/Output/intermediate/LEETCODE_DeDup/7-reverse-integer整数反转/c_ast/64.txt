(translation_unit (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (sized_type_specifier (long)) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (pointer_declarator (*) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (number_literal) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (comment) (comment) (while_statement (while) (parenthesized_expression (() (binary_expression (number_literal) (&&) (binary_expression (identifier) (<) (number_literal))) ())) (compound_statement ({) (comment) (comment) (comment) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (binary_expression (binary_expression (identifier) (%) (parenthesized_expression (() (cast_expression (() (type_descriptor (primitive_type)) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (number_literal)) ())))) ()))) (/) (cast_expression (() (type_descriptor (primitive_type)) ()) (call_expression (identifier) (argument_list (() (identifier) ())))))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (number_literal)) (&&) (binary_expression (binary_expression (identifier) (/) (cast_expression (() (type_descriptor (primitive_type)) ()) (call_expression (identifier) (argument_list (() (identifier) ()))))) (==) (number_literal))) ())) (break_statement (break) (;))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (binary_expression (cast_expression (() (type_descriptor (sized_type_specifier (long))) ()) (subscript_expression (identifier) ([) (identifier) (]))) (*) (call_expression (identifier) (argument_list (() (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ())))))) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier)) (!=) (identifier)) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (return_statement (return) (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier)) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (return_statement (return) (number_literal) (;))) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (*) (number_literal))) (;)) (}))) (return_statement (return) (identifier) (;)) (}))))