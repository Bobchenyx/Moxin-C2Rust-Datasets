(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (const_item (const) (identifier) (:) (primitive_type) (=) (binary_expression (identifier) (/) (integer_literal)) (;)) (const_item (const) (identifier) (:) (primitive_type) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (const_item (const) (identifier) (:) (primitive_type) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (<) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (*) (integer_literal)) (+) (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (%) (integer_literal))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (&&) (binary_expression (identifier) (<) (identifier))) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (identifier)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (expression_statement (break_expression (break)) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (integer_literal)) (+) (binary_expression (identifier) (%) (integer_literal)))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (/) (integer_literal))) (;)) (})))) (expression_statement (if_expression (if) (identifier) (block ({) (binary_expression (integer_literal) (-) (identifier)) (})) (else_clause (else) (block ({) (identifier) (}))))) (}))) (}))))