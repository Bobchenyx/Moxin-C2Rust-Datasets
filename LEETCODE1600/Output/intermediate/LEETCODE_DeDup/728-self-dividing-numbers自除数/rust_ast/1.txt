(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..) (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (while_expression (while) (binary_expression (integer_literal) (!=) (identifier)) (block ({) (line_comment (//)) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (%) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (integer_literal) (!=) (identifier)) (&&) (binary_expression (integer_literal) (==) (parenthesized_expression (() (binary_expression (identifier) (%) (identifier)) ())))) (block ({) (expression_statement (compound_assignment_expr (identifier) (/=) (integer_literal)) (;)) (})) (else_clause (else) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (break_expression (break)) (;)) (}))))) (})))) (})))) (parenthesized_expression (() (identifier) ())) (}))) (}))))