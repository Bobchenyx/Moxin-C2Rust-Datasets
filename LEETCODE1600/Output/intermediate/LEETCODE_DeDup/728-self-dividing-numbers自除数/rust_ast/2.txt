(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (identifier) (..=) (identifier)) (block ({) (expression_statement (if_expression (if) (call_expression (identifier) (arguments (() (identifier) ()))) (block ({) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (})))) (})))) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (parenthesized_expression (() (type_cast_expression (identifier) (as) (primitive_type)) ())) (-) (integer_literal)) ())) (==) (integer_literal)) (||) (binary_expression (binary_expression (identifier) (%) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (type_cast_expression (identifier) (as) (primitive_type)) ())) (-) (integer_literal)) ()))) (!=) (integer_literal))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (})))) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (}))) (identifier) (}))) (}))))