(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (let_declaration (let) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (;)) (expression_statement (assignment_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (=) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (!=) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>) (integer_literal)) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ([) (identifier) (])) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) (,) (identifier) ())))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>) (integer_literal)) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) ())))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ([) (identifier) (])) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) (,) (identifier) ())))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (<) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (integer_literal) (])) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (&&) (binary_expression (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (==) (identifier))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) (,) (identifier) ())))) (;)) (})))) (})))) (identifier) (}))) (}))))