(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (integer_literal) ()))) (;)) (})))) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (+) (integer_literal)) ()))) (;)) (})))) (})))) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (}))) (}))))