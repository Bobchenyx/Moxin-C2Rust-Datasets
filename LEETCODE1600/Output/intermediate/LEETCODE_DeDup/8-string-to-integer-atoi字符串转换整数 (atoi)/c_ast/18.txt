(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (sized_type_specifier (long) (long)) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (!=) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (})) (else_clause (else) (compound_statement ({) (break_statement (break) (;)) (})))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (character) (')))) (&&) (unary_expression (!) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (<=) (char_literal (') (character) (')))) ())))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))))) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (!=) (number_literal)) (&&) (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (pointer_expression (*) (update_expression (identifier) (++))) (;)) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (>=) (char_literal (') (character) (')))) (&&) (binary_expression (pointer_expression (*) (identifier)) (<=) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (number_literal) (*) (identifier)) (+) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (char_literal (') (character) ('))) ())))) (;)) (expression_statement (pointer_expression (*) (update_expression (identifier) (++))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (identifier) (;)) (})))) (}))) (}))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (*) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (<=) (identifier)) (&&) (binary_expression (identifier) (>=) (identifier))) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (>) (identifier)) (?) (identifier) (:) (identifier)) (;)) (}))))