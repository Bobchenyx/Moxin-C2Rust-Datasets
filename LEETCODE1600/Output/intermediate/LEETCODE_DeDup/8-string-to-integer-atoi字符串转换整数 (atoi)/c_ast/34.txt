(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (identifier) (*=) (identifier)) (;))) (return_statement (return) (identifier) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (number_literal) (,) (number_literal) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (unary_expression (~) (identifier))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (expression_statement (update_expression (identifier) (++)) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (character) (')))) (&&) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (<) (char_literal (') (character) ('))) (||) (binary_expression (pointer_expression (*) (identifier)) (>) (char_literal (') (character) (')))) ()))) ())) (return_statement (return) (number_literal) (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (expression_statement (update_expression (identifier) (++)) (;))))) (declaration (sized_type_specifier (long)) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (<=) (char_literal (') (character) (')))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (-) (char_literal (') (character) ('))) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier)) (!=) (identifier)) ())) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (identifier)) (;))) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (return_statement (return) (conditional_expression (binary_expression (identifier) (==) (number_literal)) (?) (identifier) (:) (parenthesized_expression (() (binary_expression (unary_expression (~) (identifier)) (+) (number_literal)) ()))) (;)) (}))))