(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (&&) (binary_expression (pointer_expression (*) (identifier)) (>) (number_literal))) ())) (comment) (return_statement (return) (identifier) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (>) (number_literal)) (&&) (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) (')))) ())) (comment) (return_statement (return) (identifier) (;))))) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (initializer_list ({) (number_literal) (}))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (while_statement (while) (parenthesized_expression (() (pointer_expression (*) (identifier)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (==) (number_literal)) (&&) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) (||) (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) (')))) ()))) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (comment) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) ('))) ())) (expression_statement (assignment_expression (identifier) (=) (number_literal)) (;))) (expression_statement (update_expression (++) (identifier)) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (<=) (char_literal (') (character) (')))) ())) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (binary_expression (pointer_expression (*) (identifier)) (-) (char_literal (') (character) (')))) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (==) (number_literal)) (&&) (unary_expression (!) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (<=) (char_literal (') (character) (')))) ())))) (&&) (binary_expression (pointer_expression (*) (identifier)) (!=) (char_literal (') (character) (')))) ())) (comment) (break_statement (break) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (==) (number_literal)) (&&) (unary_expression (!) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (<=) (char_literal (') (character) (')))) ())))) (&&) (binary_expression (pointer_expression (*) (identifier)) (==) (char_literal (') (character) (')))) (&&) (binary_expression (identifier) (!=) (number_literal))) ())) (break_statement (break) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (!=) (number_literal)) (&&) (unary_expression (!) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (identifier)) (>=) (char_literal (') (character) ('))) (&&) (binary_expression (pointer_expression (*) (identifier)) (<=) (char_literal (') (character) (')))) ())))) ())) (break_statement (break) (;))))))))))) (expression_statement (update_expression (++) (identifier)) (;)) (}))) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (comment) (return_statement (return) (number_literal) (;))) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (++) (identifier)) ()) (compound_statement ({) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (*) (call_expression (identifier) (argument_list (() (number_literal) (,) (binary_expression (identifier) (-) (number_literal)) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (comment) (return_statement (return) (identifier) (;)) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (identifier)) (&&) (binary_expression (identifier) (==) (number_literal))) ())) (comment) (return_statement (return) (identifier) (;))))) (expression_statement (update_expression (--) (identifier)) (;)) (}))) (expression_statement (assignment_expression (identifier) (*=) (identifier)) (;)) (return_statement (return) (identifier) (;)) (}))))