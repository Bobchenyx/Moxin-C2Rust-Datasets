(translation_unit (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (identifier) (==) (number_literal)) (||) (binary_expression (identifier) (==) (null (NULL)))) ())) (compound_statement ({) (return_statement (return) (number_literal) (;)) (}))) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (escape_sequence) (string_content) (escape_sequence) (")) (,) (pointer_expression (*) (identifier)) ()))) (;)) (while_statement (while) (parenthesized_expression (() (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (comment) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (escape_sequence) (")) (,) (identifier) ()))) (;)) (declaration (sized_type_specifier (long)) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (<) (number_literal)) ())) (||) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (>) (number_literal)) ()))) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) (')))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier)) (!=) (identifier)) ())) (compound_statement ({) (comment) (return_statement (return) (identifier) (;)) (}))) (}))) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (<) (number_literal)) ())) (||) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (>) (number_literal)) ()))) ())) (compound_statement ({) (return_statement (return) (binary_expression (number_literal) (-) (identifier)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) (')))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (escape_sequence) (")) (,) (identifier) ()))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier)) (!=) (identifier)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (}))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (number_literal) (-) (identifier))) (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (>=) (number_literal)) ())) (&&) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (<=) (number_literal)) ()))) ())) (compound_statement ({) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (<) (number_literal)) ())) (||) (parenthesized_expression (() (binary_expression (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) ('))) (>) (number_literal)) ()))) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (pointer_expression (*) (parenthesized_expression (() (binary_expression (identifier) (+) (identifier)) ()))) (-) (char_literal (') (character) (')))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (escape_sequence) (")) (,) (identifier) ()))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (binary_expression (identifier) (*) (number_literal)) (+) (identifier))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier)) (!=) (identifier)) ())) (compound_statement ({) (return_statement (return) (identifier) (;)) (}))) (}))) (})) (else_clause (else) (compound_statement ({) (return_statement (return) (number_literal) (;)) (})))))))) (comment) (comment) (return_statement (return) (cast_expression (() (type_descriptor (primitive_type)) ()) (identifier)) (;)) (}))))