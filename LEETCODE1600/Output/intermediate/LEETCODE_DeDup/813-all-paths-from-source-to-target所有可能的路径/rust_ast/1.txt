(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (line_comment (//)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (]))) ()))) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (loop_expression (loop) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (index_expression (identifier) ([) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal)) (])) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (type_cast_expression (parenthesized_expression (() (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal)) ())) (as) (primitive_type))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (index_expression (identifier) ([) (type_cast_expression (identifier) (as) (primitive_type)) (]))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (unary_expression (*) (identifier)) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (}))))) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break)) (;)) (}))))) (})))) (identifier) (}))) (}))))