(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (as) (primitive_type)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (+) (integer_literal) (]))) (;)) (expression_statement (assignment_expression (index_expression (identifier) ([) (integer_literal) (])) (=) (integer_literal)) (;)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (type_cast_expression (unary_expression (*) (identifier)) (as) (primitive_type)) (;)) (expression_statement (for_expression (for) (identifier) (in) (call_expression (field_expression (parenthesized_expression (() (range_expression (identifier) (..=) (identifier)) ())) (.) (field_identifier)) (arguments (() ()))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (|=) (binary_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (<<) (integer_literal))) (;)) (})))) (})))) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (-) (integer_literal))) (block ({) (let_declaration (let) (identifier) (=) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (*) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (%) (identifier)) (!=) (integer_literal)) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (binary_expression (identifier) (/) (identifier)) (})) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (index_expression (identifier) ([) (identifier) (])) (&) (parenthesized_expression (() (binary_expression (integer_literal) (<<) (identifier)) ()))) (!=) (integer_literal)) (block ({) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})))) (})))) (boolean_literal (false)) (}))) (}))))