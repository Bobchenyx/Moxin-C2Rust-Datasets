(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (comment) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (struct_specifier (struct) (type_identifier)) (pointer_declarator (*) (pointer_declarator (*) (field_identifier))) (;)) (}))) (type_identifier) (;)) (comment) (declaration (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ())))) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (;)) (declaration (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (;)) (declaration (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier)))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (number_literal) ())))) (;)) (declaration (primitive_type) (identifier) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) ()))) (;))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (identifier) (+=) (call_expression (identifier) (argument_list (() (identifier) (,) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (identifier) (])) ()))) ())))) (;))) (return_statement (return) (identifier) (;)) (}))) (comment) (function_definition (type_identifier) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ())))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (sizeof_expression (sizeof) (parenthesized_expression (() (identifier) ()))) ())))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (identifier)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (false)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (number_literal)) (;)) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (type_identifier) (abstract_pointer_declarator (*))) ())) (*) (identifier)) ())))) (;)) (return_statement (return) (identifier) (;)) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (identifier) (,) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (true)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (break_statement (break) (;))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (field_expression (identifier) (->) (field_identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (field_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (->) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (break_statement (break) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (binary_expression (field_expression (identifier) (->) (field_identifier)) (-) (number_literal))) ())) (expression_statement (assignment_expression (identifier) (=) (false)) (;))) (}))) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (identifier)) ())) (break_statement (break) (;))) (}))) (while_statement (while) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (field_expression (identifier) (->) (field_identifier)) (])) (=) (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (update_expression (field_expression (identifier) (->) (field_identifier)) (++)) (]))) (;)) (}))) (}))) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (type_identifier) (init_declarator (pointer_declarator (*) (identifier)) (=) (identifier)) (;)) (declaration (primitive_type) (identifier) (,) (identifier) (,) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (field_expression (identifier) (->) (field_identifier))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (field_expression (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (])) (->) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (subscript_expression (field_expression (identifier) (->) (field_identifier)) ([) (identifier) (]))) (;)) (break_statement (break) (;)) (}))) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (->) (field_identifier)) (==) (number_literal)) ())) (if_statement (if) (parenthesized_expression (() (unary_expression (!) (field_expression (identifier) (->) (field_identifier))) ())) (compound_statement ({) (expression_statement (assignment_expression (field_expression (identifier) (->) (field_identifier)) (=) (true)) (;)) (return_statement (return) (binary_expression (identifier) (+) (number_literal)) (;)) (})) (else_clause (else) (return_statement (return) (number_literal) (;))))) (}))) (return_statement (return) (number_literal) (;)) (}))) (comment) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (call_expression (identifier) (argument_list (() (binary_expression (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) (*) (parenthesized_expression (() (binary_expression (identifier) (+) (number_literal)) ()))) ())))) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (-) (number_literal)) (-) (identifier)) (]))) (;))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (comment) (return_statement (return) (identifier) (;)) (}))))