(translation_unit (preproc_include (#include) (system_lib_string)) (preproc_def (#define) (identifier) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (comment) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (<) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;)) (}))) (return_statement (return) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (binary_expression (binary_expression (identifier) (==) (char_literal (') (character) ('))) (||) (binary_expression (identifier) (==) (char_literal (') (character) (')))) (||) (binary_expression (identifier) (==) (char_literal (') (character) (')))) (||) (binary_expression (identifier) (==) (char_literal (') (character) (')))) (||) (binary_expression (identifier) (==) (char_literal (') (character) (')))) ())) (;)) (}))) (function_definition (primitive_type) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ())))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (==) (null (NULL))) (||) (binary_expression (identifier) (==) (number_literal))) (||) (binary_expression (identifier) (>) (number_literal))) ())) (compound_statement ({) (return_statement (return) (null (NULL)) (;)) (}))) (comment) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (number_literal) (,) (binary_expression (identifier) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ()))) ()))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (comment) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (string_literal (") (string_content) ("))) (;)) (declaration (primitive_type) (init_declarator (array_declarator (identifier) ([) (number_literal) (])) (=) (string_literal (") (string_content) ("))) (;)) (comment) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (null (NULL))) (;)) (comment) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (comment) (declaration (primitive_type) (identifier) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (;)) (while_statement (while) (parenthesized_expression (() (identifier) ())) (compound_statement ({) (expression_statement (update_expression (identifier) (++)) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (if_statement (if) (parenthesized_expression (() (call_expression (identifier) (argument_list (() (subscript_expression (identifier) ([) (number_literal) (])) ()))) ())) (compound_statement ({) (comment) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (identifier)) (,) (identifier) (,) (identifier) ()))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (identifier)) (,) (identifier) ()))) (;)) (comment) (})) (else_clause (else) (compound_statement ({) (comment) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (identifier)) (,) (binary_expression (identifier) (+) (number_literal)) (,) (binary_expression (identifier) (-) (number_literal)) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (binary_expression (identifier) (+) (identifier)) (-) (number_literal)) (])) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (comment) (expression_statement (call_expression (identifier) (argument_list (() (binary_expression (identifier) (+) (identifier)) (,) (identifier) ()))) (;)) (comment) (})))) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (identifier) (+) (number_literal))) (;)) (comment) (comment) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (char_literal (') (character) ('))) (;)) (}))) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (char_literal (') (character) ('))) (;)) (comment) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (null (NULL)) (,) (identifier) ())))) (;)) (}))) (comment) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (number_literal)) (])) (=) (char_literal (') (escape_sequence) ('))) (;)) (return_statement (return) (identifier) (;)) (}))))