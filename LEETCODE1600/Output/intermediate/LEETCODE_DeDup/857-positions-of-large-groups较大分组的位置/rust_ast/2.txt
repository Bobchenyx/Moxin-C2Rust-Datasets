(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (line_comment (//)) (expression_statement (macro_invocation (identifier) (!) (token_tree (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (line_comment (//)) (let_declaration (let) (mutable_specifier) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (+) (integer_literal))) (block ({) (line_comment (//)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (identifier)) (||) (binary_expression (index_expression (identifier) ([) (identifier) (])) (!=) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])))) (block ({) (expression_statement (assignment_expression (identifier) (=) (type_cast_expression (parenthesized_expression (() (binary_expression (identifier) (-) (integer_literal)) ())) (as) (primitive_type))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (-) (identifier)) (>=) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (macro_invocation (identifier) (!) (token_tree ([) (identifier) (,) (identifier) (]))) ()))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (})))) (})))) (identifier) (}))) (}))))