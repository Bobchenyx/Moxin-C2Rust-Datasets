(translation_unit (type_definition (typedef) (struct_specifier (struct) (type_identifier) (field_declaration_list ({) (field_declaration (primitive_type) (field_identifier) (;)) (field_declaration (primitive_type) (field_identifier) (;)) (}))) (type_identifier) (;)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (>=) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (return_statement (return) (false) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (<=) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (return_statement (return) (false) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (<=) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (return_statement (return) (false) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (type_identifier) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (field_expression (identifier) (.) (field_identifier)) (>=) (subscript_expression (identifier) ([) (number_literal) (]))) ())) (compound_statement ({) (return_statement (return) (true) (;)) (}))) (return_statement (return) (false) (;)) (}))) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (declaration (type_identifier) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (expression_statement (assignment_expression (field_expression (identifier) (.) (field_identifier)) (=) (subscript_expression (identifier) ([) (number_literal) (]))) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) ())) (||) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) ()))) (||) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) ()))) (||) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ()))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) (&&) (call_expression (identifier) (argument_list (() (identifier) (,) (identifier) ())))) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (return_statement (return) (true) (;)) (}))))