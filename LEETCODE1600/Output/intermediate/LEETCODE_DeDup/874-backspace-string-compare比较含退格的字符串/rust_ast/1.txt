(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (loop_expression (loop) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (line_comment (//)) (line_comment (//)) (expression_statement (while_expression (while) (binary_expression (identifier) (>=) (integer_literal)) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (char_literal) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (}))))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>=) (integer_literal)) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (char_literal) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (integer_literal)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (expression_statement (compound_assignment_expr (identifier) (-=) (integer_literal)) (;)) (}))))) (})))) (expression_statement (match_expression (match) (tuple_expression (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (,) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ())) (match_block ({) (match_arm (match_pattern (tuple_pattern (() (tuple_struct_pattern (identifier) (() (identifier) ())) (,) (tuple_struct_pattern (identifier) (() (identifier) ())) ())) (if) (binary_expression (identifier) (==) (identifier))) (=>) (block ({) (expression_statement (continue_expression (continue)) (;)) (})) (,)) (match_arm (match_pattern (tuple_pattern (() (identifier) (,) (identifier) ()))) (=>) (block ({) (expression_statement (return_expression (return) (boolean_literal (true))) (;)) (})) (,)) (match_arm (match_pattern (_)) (=>) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (}))) (})))) (})))) (}))) (}))))