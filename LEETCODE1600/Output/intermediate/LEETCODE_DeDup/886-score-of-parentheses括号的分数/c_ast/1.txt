(translation_unit (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (declaration (primitive_type) (array_declarator (identifier) ([) (identifier) (])) (;)) (comment) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (pointer_declarator (*) (identifier)) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()) (call_expression (identifier) (argument_list (() (identifier) (,) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type)) ())) ()))))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (binary_expression (identifier) (<) (identifier)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (update_expression (identifier) (++)) (])) (=) (identifier)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (update_expression (identifier) (--)) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (identifier)) (;)) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (!=) (number_literal)) ())) (compound_statement ({) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (+=) (binary_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (*) (number_literal))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (=) (number_literal)) (;)) (})) (else_clause (else) (compound_statement ({) (expression_statement (update_expression (subscript_expression (identifier) ([) (identifier) (])) (++)) (;)) (})))) (comment) (})))) (}))) (return_statement (return) (subscript_expression (identifier) ([) (number_literal) (])) (;)) (}))))