(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (integer_literal)) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (field_expression (integer_literal) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (binary_expression (identifier) (%) (integer_literal)) (])) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (/=) (integer_literal)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) (;)) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (integer_literal) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (type_cast_expression (identifier) (as) (primitive_type)) (;)) (expression_statement (while_expression (while) (binary_expression (identifier) (>) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (binary_expression (identifier) (%) (integer_literal)) (])) (+=) (integer_literal)) (;)) (expression_statement (compound_assignment_expr (identifier) (/=) (integer_literal)) (;)) (})))) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (identifier)) ()))) (}))) (}))))