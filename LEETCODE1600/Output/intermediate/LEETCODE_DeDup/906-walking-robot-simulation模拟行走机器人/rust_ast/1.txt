(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) (,) (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (identifier) (|)) (tuple_expression (() (index_expression (identifier) ([) (integer_literal) (])) (,) (index_expression (identifier) ([) (integer_literal) (])) ()))) ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (>))) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (tuple_expression (() (integer_literal) (,) (integer_literal) ())) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (unary_expression (-) (integer_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (tuple_expression (() (field_expression (identifier) (.) (integer_literal)) (,) (unary_expression (-) (field_expression (identifier) (.) (integer_literal))) ()))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (unary_expression (-) (integer_literal))) (block ({) (expression_statement (assignment_expression (identifier) (=) (tuple_expression (() (unary_expression (-) (field_expression (identifier) (.) (integer_literal))) (,) (field_expression (identifier) (.) (integer_literal)) ()))) (;)) (})) (else_clause (else) (block ({) (expression_statement (for_expression (for) (_) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (expression_statement (if_expression (if) (unary_expression (!) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (tuple_expression (() (binary_expression (identifier) (+) (field_expression (identifier) (.) (integer_literal))) (,) (binary_expression (identifier) (+) (field_expression (identifier) (.) (integer_literal))) ()))) ())))) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (field_expression (identifier) (.) (integer_literal))) (;)) (expression_statement (compound_assignment_expr (identifier) (+=) (field_expression (identifier) (.) (integer_literal))) (;)) (})))) (})))) (expression_statement (assignment_expression (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (binary_expression (binary_expression (identifier) (*) (identifier)) (+) (binary_expression (identifier) (*) (identifier))) ())))) (;)) (}))))))) (})))) (identifier) (}))) (}))))