(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (integer_literal)) (;)) (})))) (let_declaration (let) (identifier) (=) (call_expression (generic_function (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (::) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>))) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (integer_literal) (;) (identifier) (.) (identifier) (token_tree (() ())) (+) (integer_literal) (]))) (;)) (line_comment (//)) (expression_statement (assignment_expression (index_expression (identifier) ([) (integer_literal) (])) (=) (integer_literal)) (;)) (line_comment (//)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>=) (integer_literal)) (&&) (binary_expression (identifier) (<=) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (+=) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (>=) (integer_literal)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (call_expression (field_expression (call_expression (field_expression (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (.) (field_identifier)) (arguments (() (integer_literal) ()))) (.) (field_identifier)) (arguments (() ()))) (*) (integer_literal)) (+) (identifier)) (;)) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (>=) (integer_literal)) (&&) (binary_expression (identifier) (<=) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (index_expression (identifier) ([) (identifier) (])) (+=) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (;)) (})))) (})))) (})))) (index_expression (identifier) ([) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (])) (}))) (}))))