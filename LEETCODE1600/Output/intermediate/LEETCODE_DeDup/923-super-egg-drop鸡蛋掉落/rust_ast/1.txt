(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (,) (primitive_type) (>))) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() ()))) (;)) (let_declaration (let) (tuple_pattern (() (mut_pattern (mutable_specifier) (identifier)) (,) (mut_pattern (mutable_specifier) (identifier)) ())) (=) (tuple_expression (() (integer_literal) (,) (binary_expression (identifier) (+) (integer_literal)) ())) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (identifier)) (;)) (})))) (let_declaration (let) (identifier) (=) (loop_expression (loop) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (type_cast_expression (call_expression (field_expression (parenthesized_expression (() (binary_expression (type_cast_expression (identifier) (as) (primitive_type)) (-) (type_cast_expression (identifier) (as) (primitive_type))) ())) (.) (field_identifier)) (arguments (() ()))) (as) (primitive_type))) (;)) (let_declaration (let) (identifier) (=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (type_cast_expression (identifier) (as) (primitive_type)) (,) (type_cast_expression (identifier) (as) (primitive_type)) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (>) (type_cast_expression (identifier) (as) (primitive_type))) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (<) (type_cast_expression (identifier) (as) (primitive_type))) (block ({) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (break_expression (break) (identifier)) (;)) (}))))))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (identifier)) (block ({) (expression_statement (break_expression (break) (identifier)) (;)) (})))) (}))) (;)) (type_cast_expression (identifier) (as) (primitive_type)) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (tuple_type (() (primitive_type) (,) (primitive_type) ())) (,) (primitive_type) (>))))) ())) (->) (primitive_type) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (reference_expression (&) (tuple_expression (() (identifier) (,) (identifier) ()))) ())))) (block ({) (expression_statement (return_expression (return) (unary_expression (*) (identifier))) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (identifier) (==) (integer_literal)) (||) (binary_expression (identifier) (==) (integer_literal))) (block ({) (expression_statement (return_expression (return) (type_cast_expression (identifier) (as) (primitive_type))) (;)) (})))) (let_declaration (let) (identifier) (=) (binary_expression (binary_expression (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (identifier) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) ()))) (+) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (binary_expression (identifier) (-) (integer_literal)) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) ())))) (+) (integer_literal)) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (tuple_expression (() (identifier) (,) (identifier) ())) (,) (identifier) ()))) (;)) (identifier) (}))) (}))))