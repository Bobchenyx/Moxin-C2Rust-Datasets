(translation_unit (comment) (preproc_ifdef (#ifdef) (identifier) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (...) ())) (preproc_arg)) (preproc_else (#else) (preproc_function_def (#define) (identifier) (preproc_params (() (identifier) (,) (...) ())) (preproc_arg))) (#endif)) (comment) (preproc_def (#define) (identifier) (preproc_arg)) (preproc_def (#define) (identifier) (preproc_arg)) (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (identifier)) ()))) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (||) (parenthesized_expression (() (binary_expression (identifier) (>) (number_literal)) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (expression_statement (;)) (})) (else_clause (else) (if_statement (if) (parenthesized_expression (() (binary_expression (identifier) (==) (number_literal)) ())) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (})) (else_clause (else) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) ())) (||) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>) (char_literal (') (character) ('))) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) ())) (&&) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>) (char_literal (') (character) ('))) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (==) (char_literal (') (character) ('))) ())) (&&) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>=) (char_literal (') (character) ('))) ()))) (&&) (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (number_literal) (])) (>) (char_literal (') (character) ('))) ()))) ())) (compound_statement ({) (return_statement (return) (false) (;)) (}))) (})))))) (return_statement (return) (true) (;)) (}))) (comment) (function_definition (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))))) (compound_statement ({) (declaration (primitive_type) (identifier) (,) (identifier) (,) (identifier) (,) (identifier) (;)) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (;)) (declaration (primitive_type) (pointer_declarator (*) (pointer_declarator (*) (identifier))) (,) (pointer_declarator (*) (identifier)) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (identifier) ())))) (;)) (expression_statement (assignment_expression (identifier) (=) (cast_expression (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*) (abstract_pointer_declarator (*)))) ()) (call_expression (identifier) (argument_list (() (binary_expression (number_literal) (*) (sizeof_expression (sizeof) (() (type_descriptor (primitive_type) (abstract_pointer_declarator (*))) ()))) ()))))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (identifier) (<) (number_literal)) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;) (binary_expression (identifier) (<=) (binary_expression (identifier) (+) (number_literal))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (number_literal))) (;) (binary_expression (parenthesized_expression (() (binary_expression (identifier) (<=) (binary_expression (identifier) (+) (number_literal))) ())) (&&) (parenthesized_expression (() (binary_expression (identifier) (<) (binary_expression (identifier) (-) (number_literal))) ()))) (;) (update_expression (identifier) (++)) ()) (compound_statement ({) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) (>) (number_literal)) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (continue_statement (continue) (;)) (}))) (if_statement (if) (parenthesized_expression (() (binary_expression (binary_expression (binary_expression (parenthesized_expression (() (binary_expression (false) (==) (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (number_literal) (]))) (,) (binary_expression (identifier) (+) (number_literal)) ())))) ())) (||) (parenthesized_expression (() (binary_expression (false) (==) (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (,) (binary_expression (identifier) (-) (identifier)) ())))) ()))) (||) (parenthesized_expression (() (binary_expression (false) (==) (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (,) (binary_expression (identifier) (-) (identifier)) ())))) ()))) (||) (parenthesized_expression (() (binary_expression (false) (==) (call_expression (identifier) (argument_list (() (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (,) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ())))) ()))) ())) (compound_statement ({) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (identifier) (,) (identifier) (,) (identifier) ()))) (;)) (continue_statement (continue) (;)) (}))) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (identifier) (])) (=) (assignment_expression (identifier) (=) (call_expression (identifier) (argument_list (() (number_literal) ()))))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (subscript_expression (identifier) ([) (number_literal) (]))) (,) (binary_expression (identifier) (+) (number_literal)) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (])) (=) (char_literal (') (character) ('))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (identifier) (+) (number_literal))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (,) (binary_expression (identifier) (-) (identifier)) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (=) (char_literal (') (character) ('))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (number_literal))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (,) (binary_expression (identifier) (-) (identifier)) ()))) (;)) (expression_statement (assignment_expression (subscript_expression (identifier) ([) (binary_expression (identifier) (-) (identifier)) (])) (=) (char_literal (') (character) ('))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (identifier) (-) (identifier)) (+) (number_literal))) (;)) (expression_statement (call_expression (identifier) (argument_list (() (identifier) (,) (pointer_expression (&) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (,) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal)) ()))) (;)) (expression_statement (assignment_expression (identifier) (+=) (binary_expression (binary_expression (identifier) (-) (identifier)) (-) (number_literal))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (number_literal)) (;)) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (subscript_expression (identifier) ([) (identifier) (])) ()))) (;)) (expression_statement (update_expression (identifier) (++)) (;)) (}))) (}))) (}))) (expression_statement (call_expression (identifier) (argument_list (() (string_literal (") (string_content) (")) (,) (identifier) ()))) (;)) (expression_statement (assignment_expression (pointer_expression (*) (identifier)) (=) (identifier)) (;)) (return_statement (return) (identifier) (;)) (}))))