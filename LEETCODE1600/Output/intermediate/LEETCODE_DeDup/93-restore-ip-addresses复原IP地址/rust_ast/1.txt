(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (reference_type (&) (primitive_type))) (,) (parameter (identifier) (:) (primitive_type)) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))))) (,) (parameter (identifier) (:) (reference_type (&) (mutable_specifier) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))))) ())) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..)) (])) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..)) (])) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (&&) (binary_expression (reference_expression (&) (index_expression (identifier) ([) (range_expression (integer_literal) (..) (integer_literal)) (]))) (==) (string_literal (") (string_content) (")))) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (call_expression (generic_function (field_expression (identifier) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (<=) (call_expression (field_expression (call_expression (generic_function (field_expression (string_literal (") (string_content) (")) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (string_literal (") (string_content) (")) ()))) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (})) (else_clause (else) (block ({) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..=) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (&&) (binary_expression (reference_expression (&) (index_expression (identifier) ([) (range_expression (integer_literal) (..) (integer_literal)) (]))) (==) (string_literal (") (string_content) (")))) (block ({) (expression_statement (continue_expression (continue)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..=) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (if_expression (if) (binary_expression (call_expression (field_expression (call_expression (generic_function (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..=) (identifier)) (])) (.) (field_identifier)) (::) (type_arguments (<) (primitive_type) (>))) (arguments (() ()))) (.) (field_identifier)) (arguments (() ()))) (>) (integer_literal)) (block ({) (expression_statement (return_expression (return)) (;)) (})))) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (index_expression (identifier) ([) (range_expression (integer_literal) (..=) (identifier)) (])) (.) (field_identifier)) (arguments (() ()))) ()))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (index_expression (identifier) ([) (range_expression (parenthesized_expression (() (binary_expression (identifier) (+) (integer_literal)) ())) (..)) (]))) (,) (binary_expression (identifier) (-) (integer_literal)) (,) (identifier) (,) (identifier) ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (})))) (}))))) (}))) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (type_identifier)) ())) (->) (generic_type (type_identifier) (type_arguments (<) (type_identifier) (>))) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (macro_invocation (identifier) (!) (token_tree ([) (]))) (;)) (expression_statement (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (reference_expression (&) (identifier)) (,) (integer_literal) (,) (reference_expression (&) (mutable_specifier) (identifier)) (,) (reference_expression (&) (mutable_specifier) (identifier)) ()))) (;)) (identifier) (}))) (}))))