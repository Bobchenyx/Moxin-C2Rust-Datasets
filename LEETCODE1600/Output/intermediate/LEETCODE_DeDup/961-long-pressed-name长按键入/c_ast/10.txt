(translation_unit (function_definition (primitive_type) (function_declarator (identifier) (parameter_list (() (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) (,) (parameter_declaration (primitive_type) (pointer_declarator (*) (identifier))) ()))) (compound_statement ({) (declaration (primitive_type) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (,) (init_declarator (identifier) (=) (number_literal)) (;)) (for_statement (for) (() (;) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (&&) (subscript_expression (identifier) ([) (identifier) (]))) (;) (comma_expression (update_expression (++) (identifier)) (,) (update_expression (++) (identifier))) ()) (compound_statement ({) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (;) (comma_expression (update_expression (++) (identifier)) (,) (update_expression (++) (identifier))) ()) (expression_statement (;))) (for_statement (for) (() (assignment_expression (identifier) (=) (number_literal)) (;) (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (==) (subscript_expression (identifier) ([) (binary_expression (identifier) (+) (number_literal)) (]))) (;) (comma_expression (update_expression (++) (identifier)) (,) (update_expression (++) (identifier))) ()) (expression_statement (;))) (if_statement (if) (parenthesized_expression (() (binary_expression (parenthesized_expression (() (binary_expression (subscript_expression (identifier) ([) (identifier) (])) (!=) (subscript_expression (identifier) ([) (identifier) (]))) ())) (||) (parenthesized_expression (() (binary_expression (identifier) (<) (identifier)) ()))) ())) (return_statement (return) (false) (;))) (}))) (return_statement (return) (parenthesized_expression (() (conditional_expression (subscript_expression (identifier) ([) (identifier) (])) (?) (false) (:) (true)) ())) (;)) (comment) (}))))