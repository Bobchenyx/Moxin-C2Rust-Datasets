(source_file (use_declaration (use) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (identifier) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..=) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (-) (identifier)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (identifier)) (block ({) (let_declaration (let) (identifier) (=) (binary_expression (identifier) (+) (integer_literal)) (;)) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (compound_assignment_expr (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+=) (call_expression (identifier) (arguments (() (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (,) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) ())))) (;)) (})) (else_clause (else) (if_expression (if) (binary_expression (identifier) (==) (binary_expression (identifier) (-) (integer_literal))) (block ({) (expression_statement (compound_assignment_expr (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+=) (call_expression (identifier) (arguments (() (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (,) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) ())))) (;)) (})) (else_clause (else) (block ({) (expression_statement (compound_assignment_expr (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (+=) (call_expression (scoped_identifier (identifier) (::) (identifier)) (arguments (() (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (-) (integer_literal)) (])) (,) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (identifier) (])) (,) (index_expression (index_expression (identifier) ([) (identifier) (])) ([) (binary_expression (identifier) (+) (integer_literal)) (])) (,) ())))) (;)) (}))))))) (})))) (})))) (let_declaration (let) (mutable_specifier) (identifier) (=) (scoped_identifier (scoped_identifier (identifier) (::) (identifier)) (::) (identifier)) (;)) (expression_statement (for_expression (for) (identifier) (in) (reference_expression (&) (index_expression (identifier) ([) (integer_literal) (]))) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) (,) (unary_expression (*) (identifier)) ())))) (;)) (})))) (identifier) (}))) (attribute_item (#) ([) (attribute (identifier)) (])) (function_item (visibility_modifier (pub)) (fn) (identifier) (type_parameters (<) (type_parameter (type_identifier) (trait_bounds (:) (type_identifier))) (>)) (parameters (() (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) (,) (parameter (identifier) (:) (type_identifier)) ())) (->) (type_identifier) (block ({) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() (identifier) ()))) ()))) (}))) (}))))