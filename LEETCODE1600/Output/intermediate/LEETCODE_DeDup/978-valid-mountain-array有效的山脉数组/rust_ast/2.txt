(source_file (function_item (visibility_modifier (pub)) (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (boolean_literal (false)) (;)) (expression_statement (for_expression (for) (identifier) (in) (range_expression (integer_literal) (..) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ())))) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (==) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (expression_statement (if_expression (if) (unary_expression (!) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (<) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (==) (integer_literal)) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (expression_statement (assignment_expression (identifier) (=) (boolean_literal (true))) (;)) (})))) (})) (else_clause (else) (block ({) (expression_statement (if_expression (if) (binary_expression (index_expression (identifier) ([) (identifier) (])) (>) (index_expression (identifier) ([) (binary_expression (identifier) (-) (integer_literal)) (]))) (block ({) (expression_statement (return_expression (return) (boolean_literal (false))) (;)) (})))) (}))))) (})))) (identifier) (}))))