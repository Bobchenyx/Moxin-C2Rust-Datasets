(source_file (impl_item (impl) (type_identifier) (declaration_list ({) (function_item (fn) (identifier) (parameters (() (parameter (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (identifier) (;)) (expression_statement (for_expression (for) (identifier) (in) (identifier) (block ({) (expression_statement (if_expression (if) (let_condition (let) (tuple_struct_pattern (identifier) (() (identifier) ())) (=) (identifier)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<=) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (binary_expression (identifier) (+) (integer_literal)) (-) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (binary_expression (identifier) (+) (integer_literal)) ())))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (}))))) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (call_expression (identifier) (arguments (() (identifier) ())))) (;)) (}))))) (})))) (identifier) (}))) (}))))