(source_file (function_item (fn) (identifier) (parameters (() (parameter (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>)))) ())) (->) (primitive_type) (block ({) (let_declaration (let) (mutable_specifier) (identifier) (:) (generic_type (type_identifier) (type_arguments (<) (primitive_type) (>))) (=) (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (expression_statement (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (unary_expression (-) (integer_literal)) (;)) (let_declaration (let) (mutable_specifier) (identifier) (=) (integer_literal) (;)) (expression_statement (call_expression (field_expression (call_expression (field_expression (identifier) (.) (field_identifier)) (arguments (() ()))) (.) (field_identifier)) (arguments (() (closure_expression (closure_parameters (|) (reference_pattern (&) (identifier)) (|)) (block ({) (expression_statement (if_expression (if) (binary_expression (identifier) (<=) (identifier)) (block ({) (expression_statement (compound_assignment_expr (identifier) (+=) (binary_expression (binary_expression (identifier) (+) (integer_literal)) (-) (identifier))) (;)) (expression_statement (assignment_expression (identifier) (=) (binary_expression (identifier) (+) (integer_literal))) (;)) (})) (else_clause (else) (block ({) (expression_statement (assignment_expression (identifier) (=) (identifier)) (;)) (}))))) (}))) ()))) (;)) (identifier) (}))))